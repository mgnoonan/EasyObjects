'===============================================================================
'  Generated From - VbNet_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject 
'      Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.1.4.0)

Imports System
Imports System.Data
Imports System.Configuration
Imports System.Collections
Imports System.Collections.Specialized
Imports System.Xml
Imports System.IO

Imports Microsoft.Practices.EnterpriseLibrary.Data
Imports NCI.EasyObjects


#Region " Schema "

Public Class OrdersSchema
	Inherits NCI.EasyObjects.Schema

    Private Shared _entries As ArrayList
	Public Shared OrderID As New SchemaItem("OrderID", DbType.Int32, True, False, False, True, True, False)
	Public Shared CustomerID As New SchemaItem("CustomerID", DbType.StringFixedLength, SchemaItemJustify.None, 5, True, False, True, False)
	Public Shared EmployeeID As New SchemaItem("EmployeeID", DbType.Int32, False, True, False, False, True, False)
	Public Shared OrderDate As New SchemaItem("OrderDate", DbType.DateTime, False, True, False, False, False, False)
	Public Shared RequiredDate As New SchemaItem("RequiredDate", DbType.DateTime, False, True, False, False, False, False)
	Public Shared ShippedDate As New SchemaItem("ShippedDate", DbType.DateTime, False, True, False, False, False, False)
	Public Shared ShipVia As New SchemaItem("ShipVia", DbType.Int32, False, True, False, False, True, False)
	Public Shared Freight As New SchemaItem("Freight", DbType.Currency, False, True, False, False, False, True)
	Public Shared ShipName As New SchemaItem("ShipName", DbType.String, SchemaItemJustify.None, 40, True, False, False, False)
	Public Shared ShipAddress As New SchemaItem("ShipAddress", DbType.String, SchemaItemJustify.None, 60, True, False, False, False)
	Public Shared ShipCity As New SchemaItem("ShipCity", DbType.String, SchemaItemJustify.None, 15, True, False, False, False)
	Public Shared ShipRegion As New SchemaItem("ShipRegion", DbType.String, SchemaItemJustify.None, 15, True, False, False, False)
	Public Shared ShipPostalCode As New SchemaItem("ShipPostalCode", DbType.String, SchemaItemJustify.None, 10, True, False, False, False)
	Public Shared ShipCountry As New SchemaItem("ShipCountry", DbType.String, SchemaItemJustify.None, 15, True, False, False, False)

    Public Overrides ReadOnly Property SchemaEntries() As ArrayList
        Get
            If _entries Is Nothing Then
                _entries = New ArrayList()
				_entries.Add(OrdersSchema.OrderID)
				_entries.Add(OrdersSchema.CustomerID)
				_entries.Add(OrdersSchema.EmployeeID)
				_entries.Add(OrdersSchema.OrderDate)
				_entries.Add(OrdersSchema.RequiredDate)
				_entries.Add(OrdersSchema.ShippedDate)
				_entries.Add(OrdersSchema.ShipVia)
				_entries.Add(OrdersSchema.Freight)
				_entries.Add(OrdersSchema.ShipName)
				_entries.Add(OrdersSchema.ShipAddress)
				_entries.Add(OrdersSchema.ShipCity)
				_entries.Add(OrdersSchema.ShipRegion)
				_entries.Add(OrdersSchema.ShipPostalCode)
				_entries.Add(OrdersSchema.ShipCountry)

            End If
            Return _entries
        End Get
    End Property

End Class

#End Region

Public MustInherit Class _Orders
    Inherits EasyObject

    Sub New()
        Dim _schema As New OrdersSchema()
        Me.SchemaEntries = _schema.SchemaEntries
		Me.SchemaGlobal = "dbo"
    End Sub

	Public Overrides Sub FlushData()
		Me._whereClause = Nothing
		Me._aggregateClause = Nothing
		MyBase.FlushData()
	End Sub
		
	''' <summary>
	''' Loads the business object with info from the database, based on the requested primary key.
	''' </summary>
	''' <param name="OrderID"></param>
	''' <returns>A Boolean indicating success or failure of the query</returns>
	Public Function LoadByPrimaryKey(ByVal OrderID As Integer) As Boolean
		
		Select Case Me.DefaultCommandType
			Case CommandType.StoredProcedure
				Dim parameters As ListDictionary = New ListDictionary

				' Add in parameters
				parameters.Add(OrdersSchema.OrderID.FieldName, OrderID)

				Return MyBase.LoadFromSql(Me.SchemaStoredProcedureWithSeparator & "daab_GetOrders", parameters, CommandType.StoredProcedure)
				
			Case CommandType.Text
				Me.Where.OrderID.Value = OrderID
				Return Me.Query.Load()

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select
		
	End Function

    ''' <summary>
    ''' Loads all records from the table.
    ''' </summary>
    ''' <returns>A Boolean indicating success or failure of the query</returns>
    Public Function LoadAll() As Boolean
	
		Select Case Me.DefaultCommandType
		
			Case CommandType.StoredProcedure
				Dim parameters As ListDictionary = Nothing
				Return MyBase.LoadFromSql(Me.SchemaStoredProcedureWithSeparator & "daab_GetAllOrders", parameters, CommandType.StoredProcedure)
				
			Case CommandType.Text
				Return Me.Query.Load()
			
			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

    End Function

    ''' <summary>
    ''' Adds a new record to the internal table.
    ''' </summary>
	Public Overrides Sub AddNew()
		MyBase.AddNew()

	End Sub

    Protected Shadows Function GetInsertCommand(commandType As CommandType) As DBCommandWrapper
	
		Dim dbCommandWrapper As DBCommandWrapper
		
        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "daab_AddOrders"
				dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand)
		
				CreateParameters(dbCommandWrapper)
				
				' Add autokey parameters
				dbCommandWrapper.AddParameter("OrderID", DbType.Int32, 0, ParameterDirection.Output, True, 0, 0, "OrderID", DataRowVersion.Default, Convert.DBNull)
				
			Case CommandType.Text
				Me.Where.WhereClauseReset()
				For Each item As SchemaItem In Me.SchemaEntries
					If Not (item.IsAutoKey OrElse item.IsComputed)
						Me.Query.AddInsertColumn(item)
					End If
				Next
				dbCommandWrapper = Me.Query.GetInsertCommandWrapper()

				dbCommandWrapper.Command.Parameters.Clear()
				dbCommandWrapper.AddParameter("OrderID", DbType.Int32, 0, ParameterDirection.Output, True, 0, 0, "OrderID", DataRowVersion.Default, Convert.DBNull)
				CreateParameters(dbCommandWrapper)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommandWrapper

    End Function

    Protected Shadows Function GetUpdateCommand(commandType As CommandType) As DBCommandWrapper
	
		Dim dbCommandWrapper As DBCommandWrapper

        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "daab_UpdateOrders"
				dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand)
		
				CreateParameters(dbCommandWrapper)
		
				' Add autokey parameters
				dbCommandWrapper.AddInParameter("OrderID", DbType.Int32, "OrderID", DataRowVersion.Current)

			Case CommandType.Text
				Me.Where.WhereClauseReset()
				For Each item As SchemaItem In Me.SchemaEntries
					If Not (item.IsAutoKey OrElse item.IsComputed)
						Me.Query.AddInsertColumn(item)
					End If
				Next

				Me.Where.WhereClauseReset()
				Me.Where.OrderID.Operator = WhereParameter.Operand.Equal
				dbCommandWrapper = Me.Query.GetUpdateCommandWrapper()

				dbCommandWrapper.Command.Parameters.Clear()
				CreateParameters(dbCommandWrapper)
				dbCommandWrapper.AddInParameter("OrderID", DbType.Int32, "OrderID", DataRowVersion.Current)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommandWrapper

    End Function

    Protected Shadows Function GetDeleteCommand(commandType As CommandType) As DBCommandWrapper
	
		Dim dbCommandWrapper As DBCommandWrapper

        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "daab_DeleteOrders"
				dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand)
		
				' Add primary key parameters
				dbCommandWrapper.AddInParameter("OrderID", DbType.Int32, "OrderID", DataRowVersion.Current)

			Case CommandType.Text
				Me.Where.WhereClauseReset()
				Me.Where.OrderID.Operator = WhereParameter.Operand.Equal
			dbCommandWrapper = Me.Query.GetDeleteCommandWrapper()

			dbCommandWrapper.Command.Parameters.Clear()
				dbCommandWrapper.AddInParameter("OrderID", DbType.Int32, "OrderID", DataRowVersion.Current)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommandWrapper

    End Function

    Private Sub CreateParameters(ByVal dbCommandWrapper As DBCommandWrapper)
		
		dbCommandWrapper.AddInParameter("CustomerID", DbType.StringFixedLength, "CustomerID", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("EmployeeID", DbType.Int32, "EmployeeID", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("OrderDate", DbType.DateTime, "OrderDate", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("RequiredDate", DbType.DateTime, "RequiredDate", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("ShippedDate", DbType.DateTime, "ShippedDate", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("ShipVia", DbType.Int32, "ShipVia", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("Freight", DbType.Currency, "Freight", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("ShipName", DbType.String, "ShipName", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("ShipAddress", DbType.String, "ShipAddress", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("ShipCity", DbType.String, "ShipCity", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("ShipRegion", DbType.String, "ShipRegion", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("ShipPostalCode", DbType.String, "ShipPostalCode", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("ShipCountry", DbType.String, "ShipCountry", DataRowVersion.Current)

    End Sub

#Region " Properties "

	Public Overridable Property OrderID() As Integer
        Get
			Return Me.GetInteger(OrdersSchema.OrderID.FieldName)
      End Get
        Set(ByVal Value As Integer)
			Me.SetInteger(OrdersSchema.OrderID.FieldName, Value)
      End Set
    End Property

	Public Overridable Property CustomerID() As String
        Get
			Return Me.GetString(OrdersSchema.CustomerID.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(OrdersSchema.CustomerID.FieldName, Value)
      End Set
    End Property

	Public Overridable Property EmployeeID() As Integer
        Get
			Return Me.GetInteger(OrdersSchema.EmployeeID.FieldName)
      End Get
        Set(ByVal Value As Integer)
			Me.SetInteger(OrdersSchema.EmployeeID.FieldName, Value)
      End Set
    End Property

	Public Overridable Property OrderDate() As DateTime
        Get
			Return Me.GetDateTime(OrdersSchema.OrderDate.FieldName)
      End Get
        Set(ByVal Value As DateTime)
			Me.SetDateTime(OrdersSchema.OrderDate.FieldName, Value)
      End Set
    End Property

	Public Overridable Property RequiredDate() As DateTime
        Get
			Return Me.GetDateTime(OrdersSchema.RequiredDate.FieldName)
      End Get
        Set(ByVal Value As DateTime)
			Me.SetDateTime(OrdersSchema.RequiredDate.FieldName, Value)
      End Set
    End Property

	Public Overridable Property ShippedDate() As DateTime
        Get
			Return Me.GetDateTime(OrdersSchema.ShippedDate.FieldName)
      End Get
        Set(ByVal Value As DateTime)
			Me.SetDateTime(OrdersSchema.ShippedDate.FieldName, Value)
      End Set
    End Property

	Public Overridable Property ShipVia() As Integer
        Get
			Return Me.GetInteger(OrdersSchema.ShipVia.FieldName)
      End Get
        Set(ByVal Value As Integer)
			Me.SetInteger(OrdersSchema.ShipVia.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Freight() As Decimal
        Get
			Return Me.GetDecimal(OrdersSchema.Freight.FieldName)
      End Get
        Set(ByVal Value As Decimal)
			Me.SetDecimal(OrdersSchema.Freight.FieldName, Value)
      End Set
    End Property

	Public Overridable Property ShipName() As String
        Get
			Return Me.GetString(OrdersSchema.ShipName.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(OrdersSchema.ShipName.FieldName, Value)
      End Set
    End Property

	Public Overridable Property ShipAddress() As String
        Get
			Return Me.GetString(OrdersSchema.ShipAddress.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(OrdersSchema.ShipAddress.FieldName, Value)
      End Set
    End Property

	Public Overridable Property ShipCity() As String
        Get
			Return Me.GetString(OrdersSchema.ShipCity.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(OrdersSchema.ShipCity.FieldName, Value)
      End Set
    End Property

	Public Overridable Property ShipRegion() As String
        Get
			Return Me.GetString(OrdersSchema.ShipRegion.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(OrdersSchema.ShipRegion.FieldName, Value)
      End Set
    End Property

	Public Overridable Property ShipPostalCode() As String
        Get
			Return Me.GetString(OrdersSchema.ShipPostalCode.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(OrdersSchema.ShipPostalCode.FieldName, Value)
      End Set
    End Property

	Public Overridable Property ShipCountry() As String
        Get
			Return Me.GetString(OrdersSchema.ShipCountry.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(OrdersSchema.ShipCountry.FieldName, Value)
      End Set
    End Property

    Public Overrides ReadOnly Property TableName() As String
        Get
            Return "Orders"
        End Get
    End Property

#End Region

#Region " String Properties "
		Public Overridable Property s_OrderID As String
			Get
				If Me.IsColumnNull(OrdersSchema.OrderID.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(OrdersSchema.OrderID.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(OrdersSchema.OrderID.FieldName)
				Else
					Me.OrderID = MyBase.SetIntegerAsString(OrdersSchema.OrderID.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CustomerID As String
			Get
				If Me.IsColumnNull(OrdersSchema.CustomerID.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(OrdersSchema.CustomerID.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(OrdersSchema.CustomerID.FieldName)
				Else
					Me.CustomerID = MyBase.SetStringAsString(OrdersSchema.CustomerID.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_EmployeeID As String
			Get
				If Me.IsColumnNull(OrdersSchema.EmployeeID.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(OrdersSchema.EmployeeID.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(OrdersSchema.EmployeeID.FieldName)
				Else
					Me.EmployeeID = MyBase.SetIntegerAsString(OrdersSchema.EmployeeID.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_OrderDate As String
			Get
				If Me.IsColumnNull(OrdersSchema.OrderDate.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetDateTimeAsString(OrdersSchema.OrderDate.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(OrdersSchema.OrderDate.FieldName)
				Else
					Me.OrderDate = MyBase.SetDateTimeAsString(OrdersSchema.OrderDate.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_RequiredDate As String
			Get
				If Me.IsColumnNull(OrdersSchema.RequiredDate.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetDateTimeAsString(OrdersSchema.RequiredDate.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(OrdersSchema.RequiredDate.FieldName)
				Else
					Me.RequiredDate = MyBase.SetDateTimeAsString(OrdersSchema.RequiredDate.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_ShippedDate As String
			Get
				If Me.IsColumnNull(OrdersSchema.ShippedDate.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetDateTimeAsString(OrdersSchema.ShippedDate.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(OrdersSchema.ShippedDate.FieldName)
				Else
					Me.ShippedDate = MyBase.SetDateTimeAsString(OrdersSchema.ShippedDate.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_ShipVia As String
			Get
				If Me.IsColumnNull(OrdersSchema.ShipVia.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(OrdersSchema.ShipVia.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(OrdersSchema.ShipVia.FieldName)
				Else
					Me.ShipVia = MyBase.SetIntegerAsString(OrdersSchema.ShipVia.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Freight As String
			Get
				If Me.IsColumnNull(OrdersSchema.Freight.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(OrdersSchema.Freight.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(OrdersSchema.Freight.FieldName)
				Else
					Me.Freight = MyBase.SetDecimalAsString(OrdersSchema.Freight.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_ShipName As String
			Get
				If Me.IsColumnNull(OrdersSchema.ShipName.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(OrdersSchema.ShipName.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(OrdersSchema.ShipName.FieldName)
				Else
					Me.ShipName = MyBase.SetStringAsString(OrdersSchema.ShipName.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_ShipAddress As String
			Get
				If Me.IsColumnNull(OrdersSchema.ShipAddress.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(OrdersSchema.ShipAddress.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(OrdersSchema.ShipAddress.FieldName)
				Else
					Me.ShipAddress = MyBase.SetStringAsString(OrdersSchema.ShipAddress.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_ShipCity As String
			Get
				If Me.IsColumnNull(OrdersSchema.ShipCity.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(OrdersSchema.ShipCity.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(OrdersSchema.ShipCity.FieldName)
				Else
					Me.ShipCity = MyBase.SetStringAsString(OrdersSchema.ShipCity.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_ShipRegion As String
			Get
				If Me.IsColumnNull(OrdersSchema.ShipRegion.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(OrdersSchema.ShipRegion.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(OrdersSchema.ShipRegion.FieldName)
				Else
					Me.ShipRegion = MyBase.SetStringAsString(OrdersSchema.ShipRegion.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_ShipPostalCode As String
			Get
				If Me.IsColumnNull(OrdersSchema.ShipPostalCode.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(OrdersSchema.ShipPostalCode.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(OrdersSchema.ShipPostalCode.FieldName)
				Else
					Me.ShipPostalCode = MyBase.SetStringAsString(OrdersSchema.ShipPostalCode.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_ShipCountry As String
			Get
				If Me.IsColumnNull(OrdersSchema.ShipCountry.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(OrdersSchema.ShipCountry.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(OrdersSchema.ShipCountry.FieldName)
				Else
					Me.ShipCountry = MyBase.SetStringAsString(OrdersSchema.ShipCountry.FieldName, Value)
				End If
			End Set
		End Property


#End Region

#Region " Where Clause "
    Public Class WhereClause

        Public Sub New(ByVal entity As EasyObject)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffWhereParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffWhereParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region " TearOff's "
		Public class TearOffWhereParameter
		
			Private _clause as WhereClause
			
			Public Sub New(ByVal clause As WhereClause)
				Me._clause = clause
			End Sub

			Public ReadOnly Property OrderID() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(OrdersSchema.OrderID)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property CustomerID() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(OrdersSchema.CustomerID)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property EmployeeID() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(OrdersSchema.EmployeeID)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property OrderDate() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(OrdersSchema.OrderDate)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property RequiredDate() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(OrdersSchema.RequiredDate)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property ShippedDate() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(OrdersSchema.ShippedDate)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property ShipVia() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(OrdersSchema.ShipVia)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Freight() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(OrdersSchema.Freight)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property ShipName() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(OrdersSchema.ShipName)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property ShipAddress() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(OrdersSchema.ShipAddress)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property ShipCity() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(OrdersSchema.ShipCity)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property ShipRegion() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(OrdersSchema.ShipRegion)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property ShipPostalCode() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(OrdersSchema.ShipPostalCode)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property ShipCountry() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(OrdersSchema.ShipCountry)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

	End Class
	
	#End Region	

		Public ReadOnly Property OrderID() As WhereParameter 
			Get
				If _OrderID_W Is Nothing Then
					_OrderID_W = TearOff.OrderID
				End If
				Return _OrderID_W
			End Get
		End Property

		Public ReadOnly Property CustomerID() As WhereParameter 
			Get
				If _CustomerID_W Is Nothing Then
					_CustomerID_W = TearOff.CustomerID
				End If
				Return _CustomerID_W
			End Get
		End Property

		Public ReadOnly Property EmployeeID() As WhereParameter 
			Get
				If _EmployeeID_W Is Nothing Then
					_EmployeeID_W = TearOff.EmployeeID
				End If
				Return _EmployeeID_W
			End Get
		End Property

		Public ReadOnly Property OrderDate() As WhereParameter 
			Get
				If _OrderDate_W Is Nothing Then
					_OrderDate_W = TearOff.OrderDate
				End If
				Return _OrderDate_W
			End Get
		End Property

		Public ReadOnly Property RequiredDate() As WhereParameter 
			Get
				If _RequiredDate_W Is Nothing Then
					_RequiredDate_W = TearOff.RequiredDate
				End If
				Return _RequiredDate_W
			End Get
		End Property

		Public ReadOnly Property ShippedDate() As WhereParameter 
			Get
				If _ShippedDate_W Is Nothing Then
					_ShippedDate_W = TearOff.ShippedDate
				End If
				Return _ShippedDate_W
			End Get
		End Property

		Public ReadOnly Property ShipVia() As WhereParameter 
			Get
				If _ShipVia_W Is Nothing Then
					_ShipVia_W = TearOff.ShipVia
				End If
				Return _ShipVia_W
			End Get
		End Property

		Public ReadOnly Property Freight() As WhereParameter 
			Get
				If _Freight_W Is Nothing Then
					_Freight_W = TearOff.Freight
				End If
				Return _Freight_W
			End Get
		End Property

		Public ReadOnly Property ShipName() As WhereParameter 
			Get
				If _ShipName_W Is Nothing Then
					_ShipName_W = TearOff.ShipName
				End If
				Return _ShipName_W
			End Get
		End Property

		Public ReadOnly Property ShipAddress() As WhereParameter 
			Get
				If _ShipAddress_W Is Nothing Then
					_ShipAddress_W = TearOff.ShipAddress
				End If
				Return _ShipAddress_W
			End Get
		End Property

		Public ReadOnly Property ShipCity() As WhereParameter 
			Get
				If _ShipCity_W Is Nothing Then
					_ShipCity_W = TearOff.ShipCity
				End If
				Return _ShipCity_W
			End Get
		End Property

		Public ReadOnly Property ShipRegion() As WhereParameter 
			Get
				If _ShipRegion_W Is Nothing Then
					_ShipRegion_W = TearOff.ShipRegion
				End If
				Return _ShipRegion_W
			End Get
		End Property

		Public ReadOnly Property ShipPostalCode() As WhereParameter 
			Get
				If _ShipPostalCode_W Is Nothing Then
					_ShipPostalCode_W = TearOff.ShipPostalCode
				End If
				Return _ShipPostalCode_W
			End Get
		End Property

		Public ReadOnly Property ShipCountry() As WhereParameter 
			Get
				If _ShipCountry_W Is Nothing Then
					_ShipCountry_W = TearOff.ShipCountry
				End If
				Return _ShipCountry_W
			End Get
		End Property

		Private _OrderID_W As WhereParameter = Nothing
		Private _CustomerID_W As WhereParameter = Nothing
		Private _EmployeeID_W As WhereParameter = Nothing
		Private _OrderDate_W As WhereParameter = Nothing
		Private _RequiredDate_W As WhereParameter = Nothing
		Private _ShippedDate_W As WhereParameter = Nothing
		Private _ShipVia_W As WhereParameter = Nothing
		Private _Freight_W As WhereParameter = Nothing
		Private _ShipName_W As WhereParameter = Nothing
		Private _ShipAddress_W As WhereParameter = Nothing
		Private _ShipCity_W As WhereParameter = Nothing
		Private _ShipRegion_W As WhereParameter = Nothing
		Private _ShipPostalCode_W As WhereParameter = Nothing
		Private _ShipCountry_W As WhereParameter = Nothing

		Public Sub WhereClauseReset()

		_OrderID_W = Nothing
		_CustomerID_W = Nothing
		_EmployeeID_W = Nothing
		_OrderDate_W = Nothing
		_RequiredDate_W = Nothing
		_ShippedDate_W = Nothing
		_ShipVia_W = Nothing
		_Freight_W = Nothing
		_ShipName_W = Nothing
		_ShipAddress_W = Nothing
		_ShipCity_W = Nothing
		_ShipRegion_W = Nothing
		_ShipPostalCode_W = Nothing
		_ShipCountry_W = Nothing
			Me._entity.Query.FlushWhereParameters()

		End Sub
	
		Private _entity As EasyObject
		Private _tearOff As TearOffWhereParameter
    End Class	

	Public ReadOnly Property Where() As WhereClause
		Get
			If _whereClause Is Nothing Then
				_whereClause = New WhereClause(Me)
			End If
	
			Return _whereClause
		End Get
	End Property
	
	Private _whereClause As WhereClause = Nothing	
#End Region	

#Region " Aggregate Clause "
    Public Class AggregateClause

        Public Sub New(ByVal entity As EasyObject)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffAggregateParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffAggregateParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region " TearOff's "
		Public class TearOffAggregateParameter
		
			Private _clause as AggregateClause
			
			Public Sub New(ByVal clause As AggregateClause)
				Me._clause = clause
			End Sub

			Public ReadOnly Property OrderID() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(OrdersSchema.OrderID)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property CustomerID() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(OrdersSchema.CustomerID)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property EmployeeID() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(OrdersSchema.EmployeeID)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property OrderDate() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(OrdersSchema.OrderDate)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property RequiredDate() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(OrdersSchema.RequiredDate)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property ShippedDate() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(OrdersSchema.ShippedDate)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property ShipVia() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(OrdersSchema.ShipVia)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Freight() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(OrdersSchema.Freight)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property ShipName() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(OrdersSchema.ShipName)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property ShipAddress() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(OrdersSchema.ShipAddress)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property ShipCity() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(OrdersSchema.ShipCity)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property ShipRegion() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(OrdersSchema.ShipRegion)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property ShipPostalCode() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(OrdersSchema.ShipPostalCode)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property ShipCountry() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(OrdersSchema.ShipCountry)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

	End Class
	
	#End Region	

		Public ReadOnly Property OrderID() As AggregateParameter 
			Get
				If _OrderID_W Is Nothing Then
					_OrderID_W = TearOff.OrderID
				End If
				Return _OrderID_W
			End Get
		End Property

		Public ReadOnly Property CustomerID() As AggregateParameter 
			Get
				If _CustomerID_W Is Nothing Then
					_CustomerID_W = TearOff.CustomerID
				End If
				Return _CustomerID_W
			End Get
		End Property

		Public ReadOnly Property EmployeeID() As AggregateParameter 
			Get
				If _EmployeeID_W Is Nothing Then
					_EmployeeID_W = TearOff.EmployeeID
				End If
				Return _EmployeeID_W
			End Get
		End Property

		Public ReadOnly Property OrderDate() As AggregateParameter 
			Get
				If _OrderDate_W Is Nothing Then
					_OrderDate_W = TearOff.OrderDate
				End If
				Return _OrderDate_W
			End Get
		End Property

		Public ReadOnly Property RequiredDate() As AggregateParameter 
			Get
				If _RequiredDate_W Is Nothing Then
					_RequiredDate_W = TearOff.RequiredDate
				End If
				Return _RequiredDate_W
			End Get
		End Property

		Public ReadOnly Property ShippedDate() As AggregateParameter 
			Get
				If _ShippedDate_W Is Nothing Then
					_ShippedDate_W = TearOff.ShippedDate
				End If
				Return _ShippedDate_W
			End Get
		End Property

		Public ReadOnly Property ShipVia() As AggregateParameter 
			Get
				If _ShipVia_W Is Nothing Then
					_ShipVia_W = TearOff.ShipVia
				End If
				Return _ShipVia_W
			End Get
		End Property

		Public ReadOnly Property Freight() As AggregateParameter 
			Get
				If _Freight_W Is Nothing Then
					_Freight_W = TearOff.Freight
				End If
				Return _Freight_W
			End Get
		End Property

		Public ReadOnly Property ShipName() As AggregateParameter 
			Get
				If _ShipName_W Is Nothing Then
					_ShipName_W = TearOff.ShipName
				End If
				Return _ShipName_W
			End Get
		End Property

		Public ReadOnly Property ShipAddress() As AggregateParameter 
			Get
				If _ShipAddress_W Is Nothing Then
					_ShipAddress_W = TearOff.ShipAddress
				End If
				Return _ShipAddress_W
			End Get
		End Property

		Public ReadOnly Property ShipCity() As AggregateParameter 
			Get
				If _ShipCity_W Is Nothing Then
					_ShipCity_W = TearOff.ShipCity
				End If
				Return _ShipCity_W
			End Get
		End Property

		Public ReadOnly Property ShipRegion() As AggregateParameter 
			Get
				If _ShipRegion_W Is Nothing Then
					_ShipRegion_W = TearOff.ShipRegion
				End If
				Return _ShipRegion_W
			End Get
		End Property

		Public ReadOnly Property ShipPostalCode() As AggregateParameter 
			Get
				If _ShipPostalCode_W Is Nothing Then
					_ShipPostalCode_W = TearOff.ShipPostalCode
				End If
				Return _ShipPostalCode_W
			End Get
		End Property

		Public ReadOnly Property ShipCountry() As AggregateParameter 
			Get
				If _ShipCountry_W Is Nothing Then
					_ShipCountry_W = TearOff.ShipCountry
				End If
				Return _ShipCountry_W
			End Get
		End Property

		Private _OrderID_W As AggregateParameter = Nothing
		Private _CustomerID_W As AggregateParameter = Nothing
		Private _EmployeeID_W As AggregateParameter = Nothing
		Private _OrderDate_W As AggregateParameter = Nothing
		Private _RequiredDate_W As AggregateParameter = Nothing
		Private _ShippedDate_W As AggregateParameter = Nothing
		Private _ShipVia_W As AggregateParameter = Nothing
		Private _Freight_W As AggregateParameter = Nothing
		Private _ShipName_W As AggregateParameter = Nothing
		Private _ShipAddress_W As AggregateParameter = Nothing
		Private _ShipCity_W As AggregateParameter = Nothing
		Private _ShipRegion_W As AggregateParameter = Nothing
		Private _ShipPostalCode_W As AggregateParameter = Nothing
		Private _ShipCountry_W As AggregateParameter = Nothing

		Public Sub AggregateClauseReset()

		_OrderID_W = Nothing
		_CustomerID_W = Nothing
		_EmployeeID_W = Nothing
		_OrderDate_W = Nothing
		_RequiredDate_W = Nothing
		_ShippedDate_W = Nothing
		_ShipVia_W = Nothing
		_Freight_W = Nothing
		_ShipName_W = Nothing
		_ShipAddress_W = Nothing
		_ShipCity_W = Nothing
		_ShipRegion_W = Nothing
		_ShipPostalCode_W = Nothing
		_ShipCountry_W = Nothing
			Me._entity.Query.FlushAggregateParameters()

		End Sub
	
		Private _entity As EasyObject
		Private _tearOff As TearOffAggregateParameter
    End Class	

	Public ReadOnly Property Aggregate() As AggregateClause
		Get
			If _aggregateClause Is Nothing Then
				_aggregateClause = New AggregateClause(Me)
			End If
	
			Return _aggregateClause
		End Get
	End Property
	
	Private _aggregateClause As AggregateClause = Nothing	
#End Region	

End Class


