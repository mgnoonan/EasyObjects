'===============================================================================
'  Generated From - VbNet_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject 
'      Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.1.4.0)

Imports System
Imports System.Data
Imports System.Configuration
Imports System.Collections
Imports System.Collections.Specialized
Imports System.Xml
Imports System.IO

Imports Microsoft.Practices.EnterpriseLibrary.Data
Imports NCI.EasyObjects


#Region " Schema "

Public Class DefaultValuesSchema
	Inherits NCI.EasyObjects.Schema

    Private Shared _entries As ArrayList
	Public Shared RefNumber As New SchemaItem("RefNumber", DbType.Decimal, True, False, False, True, False, False)
	Public Shared FirstName As New SchemaItem("FirstName", DbType.AnsiString, SchemaItemJustify.None, 100, False, False, False, True)
	Public Shared Age As New SchemaItem("Age", DbType.Int32, False, False, False, False, False, True)
	Public Shared Salary As New SchemaItem("Salary", DbType.Decimal, False, False, False, False, False, True)
	Public Shared DOB As New SchemaItem("DOB", DbType.DateTime, False, False, False, False, False, True)
	Public Shared Val As New SchemaItem("Val", DbType.AnsiStringFixedLength, SchemaItemJustify.None, 1, True, False, False, False)

    Public Overrides ReadOnly Property SchemaEntries() As ArrayList
        Get
            If _entries Is Nothing Then
                _entries = New ArrayList()
				_entries.Add(DefaultValuesSchema.RefNumber)
				_entries.Add(DefaultValuesSchema.FirstName)
				_entries.Add(DefaultValuesSchema.Age)
				_entries.Add(DefaultValuesSchema.Salary)
				_entries.Add(DefaultValuesSchema.DOB)
				_entries.Add(DefaultValuesSchema.Val)

            End If
            Return _entries
        End Get
    End Property

End Class

#End Region

Public MustInherit Class _DefaultValues
    Inherits EasyObject

    Sub New()
        Dim _schema As New DefaultValuesSchema()
        Me.SchemaEntries = _schema.SchemaEntries
		Me.SchemaGlobal = "dbo"
    End Sub

	Public Overrides Sub FlushData()
		Me._whereClause = Nothing
		Me._aggregateClause = Nothing
		MyBase.FlushData()
	End Sub
		
	''' <summary>
	''' Loads the business object with info from the database, based on the requested primary key.
	''' </summary>
	''' <param name="RefNumber"></param>
	''' <returns>A Boolean indicating success or failure of the query</returns>
	Public Function LoadByPrimaryKey(ByVal RefNumber As Decimal) As Boolean
		
		Select Case Me.DefaultCommandType
			Case CommandType.StoredProcedure
				Dim parameters As ListDictionary = New ListDictionary

				' Add in parameters
				parameters.Add(DefaultValuesSchema.RefNumber.FieldName, RefNumber)

				Return MyBase.LoadFromSql(Me.SchemaStoredProcedureWithSeparator & "daab_GetDefaultValues", parameters, CommandType.StoredProcedure)
				
			Case CommandType.Text
				Me.Where.RefNumber.Value = RefNumber
				Return Me.Query.Load()

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select
		
	End Function

    ''' <summary>
    ''' Loads all records from the table.
    ''' </summary>
    ''' <returns>A Boolean indicating success or failure of the query</returns>
    Public Function LoadAll() As Boolean
	
		Select Case Me.DefaultCommandType
		
			Case CommandType.StoredProcedure
				Dim parameters As ListDictionary = Nothing
				Return MyBase.LoadFromSql(Me.SchemaStoredProcedureWithSeparator & "daab_GetAllDefaultValues", parameters, CommandType.StoredProcedure)
				
			Case CommandType.Text
				Return Me.Query.Load()
			
			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

    End Function

    ''' <summary>
    ''' Adds a new record to the internal table.
    ''' </summary>
	Public Overrides Sub AddNew()
		MyBase.AddNew()

	End Sub

    Protected Shadows Function GetInsertCommand(commandType As CommandType) As DBCommandWrapper
	
		Dim dbCommandWrapper As DBCommandWrapper
		
        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "daab_AddDefaultValues"
				dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand)
		
				CreateParameters(dbCommandWrapper)
				
				' Add autokey parameters
				dbCommandWrapper.AddParameter("RefNumber", DbType.Decimal, 0, ParameterDirection.Output, True, 0, 0, "RefNumber", DataRowVersion.Default, Convert.DBNull)
				
			Case CommandType.Text
				Me.Where.WhereClauseReset()
				For Each item As SchemaItem In Me.SchemaEntries
					If Not (item.IsAutoKey OrElse item.IsComputed)
						Me.Query.AddInsertColumn(item)
					End If
				Next
				dbCommandWrapper = Me.Query.GetInsertCommandWrapper()

				dbCommandWrapper.Command.Parameters.Clear()
				dbCommandWrapper.AddParameter("RefNumber", DbType.Decimal, 0, ParameterDirection.Output, True, 0, 0, "RefNumber", DataRowVersion.Default, Convert.DBNull)
				CreateParameters(dbCommandWrapper)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommandWrapper

    End Function

    Protected Shadows Function GetUpdateCommand(commandType As CommandType) As DBCommandWrapper
	
		Dim dbCommandWrapper As DBCommandWrapper

        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "daab_UpdateDefaultValues"
				dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand)
		
				CreateParameters(dbCommandWrapper)
		
				' Add autokey parameters
				dbCommandWrapper.AddInParameter("RefNumber", DbType.Decimal, "RefNumber", DataRowVersion.Current)

			Case CommandType.Text
				Me.Where.WhereClauseReset()
				For Each item As SchemaItem In Me.SchemaEntries
					If Not (item.IsAutoKey OrElse item.IsComputed)
						Me.Query.AddInsertColumn(item)
					End If
				Next

				Me.Where.WhereClauseReset()
				Me.Where.RefNumber.Operator = WhereParameter.Operand.Equal
				dbCommandWrapper = Me.Query.GetUpdateCommandWrapper()

				dbCommandWrapper.Command.Parameters.Clear()
				CreateParameters(dbCommandWrapper)
				dbCommandWrapper.AddInParameter("RefNumber", DbType.Decimal, "RefNumber", DataRowVersion.Current)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommandWrapper

    End Function

    Protected Shadows Function GetDeleteCommand(commandType As CommandType) As DBCommandWrapper
	
		Dim dbCommandWrapper As DBCommandWrapper

        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "daab_DeleteDefaultValues"
				dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand)
		
				' Add primary key parameters
				dbCommandWrapper.AddInParameter("RefNumber", DbType.Decimal, "RefNumber", DataRowVersion.Current)

			Case CommandType.Text
				Me.Where.WhereClauseReset()
				Me.Where.RefNumber.Operator = WhereParameter.Operand.Equal
			dbCommandWrapper = Me.Query.GetDeleteCommandWrapper()

			dbCommandWrapper.Command.Parameters.Clear()
				dbCommandWrapper.AddInParameter("RefNumber", DbType.Decimal, "RefNumber", DataRowVersion.Current)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommandWrapper

    End Function

    Private Sub CreateParameters(ByVal dbCommandWrapper As DBCommandWrapper)
		
		dbCommandWrapper.AddInParameter("FirstName", DbType.AnsiString, "FirstName", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("Age", DbType.Int32, "Age", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("Salary", DbType.Decimal, "Salary", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("DOB", DbType.DateTime, "DOB", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("Val", DbType.AnsiStringFixedLength, "Val", DataRowVersion.Current)

    End Sub

#Region " Properties "

	Public Overridable Property RefNumber() As Decimal
        Get
			Return Me.GetDecimal(DefaultValuesSchema.RefNumber.FieldName)
      End Get
        Set(ByVal Value As Decimal)
			Me.SetDecimal(DefaultValuesSchema.RefNumber.FieldName, Value)
      End Set
    End Property

	Public Overridable Property FirstName() As String
        Get
			Return Me.GetString(DefaultValuesSchema.FirstName.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(DefaultValuesSchema.FirstName.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Age() As Integer
        Get
			Return Me.GetInteger(DefaultValuesSchema.Age.FieldName)
      End Get
        Set(ByVal Value As Integer)
			Me.SetInteger(DefaultValuesSchema.Age.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Salary() As Decimal
        Get
			Return Me.GetDecimal(DefaultValuesSchema.Salary.FieldName)
      End Get
        Set(ByVal Value As Decimal)
			Me.SetDecimal(DefaultValuesSchema.Salary.FieldName, Value)
      End Set
    End Property

	Public Overridable Property DOB() As DateTime
        Get
			Return Me.GetDateTime(DefaultValuesSchema.DOB.FieldName)
      End Get
        Set(ByVal Value As DateTime)
			Me.SetDateTime(DefaultValuesSchema.DOB.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Val() As String
        Get
			Return Me.GetString(DefaultValuesSchema.Val.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(DefaultValuesSchema.Val.FieldName, Value)
      End Set
    End Property

    Public Overrides ReadOnly Property TableName() As String
        Get
            Return "DefaultValues"
        End Get
    End Property

#End Region

#Region " String Properties "
		Public Overridable Property s_RefNumber As String
			Get
				If Me.IsColumnNull(DefaultValuesSchema.RefNumber.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(DefaultValuesSchema.RefNumber.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(DefaultValuesSchema.RefNumber.FieldName)
				Else
					Me.RefNumber = MyBase.SetDecimalAsString(DefaultValuesSchema.RefNumber.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_FirstName As String
			Get
				If Me.IsColumnNull(DefaultValuesSchema.FirstName.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(DefaultValuesSchema.FirstName.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(DefaultValuesSchema.FirstName.FieldName)
				Else
					Me.FirstName = MyBase.SetStringAsString(DefaultValuesSchema.FirstName.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Age As String
			Get
				If Me.IsColumnNull(DefaultValuesSchema.Age.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(DefaultValuesSchema.Age.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(DefaultValuesSchema.Age.FieldName)
				Else
					Me.Age = MyBase.SetIntegerAsString(DefaultValuesSchema.Age.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Salary As String
			Get
				If Me.IsColumnNull(DefaultValuesSchema.Salary.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(DefaultValuesSchema.Salary.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(DefaultValuesSchema.Salary.FieldName)
				Else
					Me.Salary = MyBase.SetDecimalAsString(DefaultValuesSchema.Salary.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_DOB As String
			Get
				If Me.IsColumnNull(DefaultValuesSchema.DOB.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetDateTimeAsString(DefaultValuesSchema.DOB.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(DefaultValuesSchema.DOB.FieldName)
				Else
					Me.DOB = MyBase.SetDateTimeAsString(DefaultValuesSchema.DOB.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Val As String
			Get
				If Me.IsColumnNull(DefaultValuesSchema.Val.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(DefaultValuesSchema.Val.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(DefaultValuesSchema.Val.FieldName)
				Else
					Me.Val = MyBase.SetStringAsString(DefaultValuesSchema.Val.FieldName, Value)
				End If
			End Set
		End Property


#End Region

#Region " Where Clause "
    Public Class WhereClause

        Public Sub New(ByVal entity As EasyObject)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffWhereParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffWhereParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region " TearOff's "
		Public class TearOffWhereParameter
		
			Private _clause as WhereClause
			
			Public Sub New(ByVal clause As WhereClause)
				Me._clause = clause
			End Sub

			Public ReadOnly Property RefNumber() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(DefaultValuesSchema.RefNumber)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property FirstName() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(DefaultValuesSchema.FirstName)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Age() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(DefaultValuesSchema.Age)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Salary() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(DefaultValuesSchema.Salary)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property DOB() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(DefaultValuesSchema.DOB)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Val() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(DefaultValuesSchema.Val)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

	End Class
	
	#End Region	

		Public ReadOnly Property RefNumber() As WhereParameter 
			Get
				If _RefNumber_W Is Nothing Then
					_RefNumber_W = TearOff.RefNumber
				End If
				Return _RefNumber_W
			End Get
		End Property

		Public ReadOnly Property FirstName() As WhereParameter 
			Get
				If _FirstName_W Is Nothing Then
					_FirstName_W = TearOff.FirstName
				End If
				Return _FirstName_W
			End Get
		End Property

		Public ReadOnly Property Age() As WhereParameter 
			Get
				If _Age_W Is Nothing Then
					_Age_W = TearOff.Age
				End If
				Return _Age_W
			End Get
		End Property

		Public ReadOnly Property Salary() As WhereParameter 
			Get
				If _Salary_W Is Nothing Then
					_Salary_W = TearOff.Salary
				End If
				Return _Salary_W
			End Get
		End Property

		Public ReadOnly Property DOB() As WhereParameter 
			Get
				If _DOB_W Is Nothing Then
					_DOB_W = TearOff.DOB
				End If
				Return _DOB_W
			End Get
		End Property

		Public ReadOnly Property Val() As WhereParameter 
			Get
				If _Val_W Is Nothing Then
					_Val_W = TearOff.Val
				End If
				Return _Val_W
			End Get
		End Property

		Private _RefNumber_W As WhereParameter = Nothing
		Private _FirstName_W As WhereParameter = Nothing
		Private _Age_W As WhereParameter = Nothing
		Private _Salary_W As WhereParameter = Nothing
		Private _DOB_W As WhereParameter = Nothing
		Private _Val_W As WhereParameter = Nothing

		Public Sub WhereClauseReset()

		_RefNumber_W = Nothing
		_FirstName_W = Nothing
		_Age_W = Nothing
		_Salary_W = Nothing
		_DOB_W = Nothing
		_Val_W = Nothing
			Me._entity.Query.FlushWhereParameters()

		End Sub
	
		Private _entity As EasyObject
		Private _tearOff As TearOffWhereParameter
    End Class	

	Public ReadOnly Property Where() As WhereClause
		Get
			If _whereClause Is Nothing Then
				_whereClause = New WhereClause(Me)
			End If
	
			Return _whereClause
		End Get
	End Property
	
	Private _whereClause As WhereClause = Nothing	
#End Region	

#Region " Aggregate Clause "
    Public Class AggregateClause

        Public Sub New(ByVal entity As EasyObject)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffAggregateParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffAggregateParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region " TearOff's "
		Public class TearOffAggregateParameter
		
			Private _clause as AggregateClause
			
			Public Sub New(ByVal clause As AggregateClause)
				Me._clause = clause
			End Sub

			Public ReadOnly Property RefNumber() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(DefaultValuesSchema.RefNumber)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property FirstName() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(DefaultValuesSchema.FirstName)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Age() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(DefaultValuesSchema.Age)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Salary() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(DefaultValuesSchema.Salary)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property DOB() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(DefaultValuesSchema.DOB)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Val() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(DefaultValuesSchema.Val)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

	End Class
	
	#End Region	

		Public ReadOnly Property RefNumber() As AggregateParameter 
			Get
				If _RefNumber_W Is Nothing Then
					_RefNumber_W = TearOff.RefNumber
				End If
				Return _RefNumber_W
			End Get
		End Property

		Public ReadOnly Property FirstName() As AggregateParameter 
			Get
				If _FirstName_W Is Nothing Then
					_FirstName_W = TearOff.FirstName
				End If
				Return _FirstName_W
			End Get
		End Property

		Public ReadOnly Property Age() As AggregateParameter 
			Get
				If _Age_W Is Nothing Then
					_Age_W = TearOff.Age
				End If
				Return _Age_W
			End Get
		End Property

		Public ReadOnly Property Salary() As AggregateParameter 
			Get
				If _Salary_W Is Nothing Then
					_Salary_W = TearOff.Salary
				End If
				Return _Salary_W
			End Get
		End Property

		Public ReadOnly Property DOB() As AggregateParameter 
			Get
				If _DOB_W Is Nothing Then
					_DOB_W = TearOff.DOB
				End If
				Return _DOB_W
			End Get
		End Property

		Public ReadOnly Property Val() As AggregateParameter 
			Get
				If _Val_W Is Nothing Then
					_Val_W = TearOff.Val
				End If
				Return _Val_W
			End Get
		End Property

		Private _RefNumber_W As AggregateParameter = Nothing
		Private _FirstName_W As AggregateParameter = Nothing
		Private _Age_W As AggregateParameter = Nothing
		Private _Salary_W As AggregateParameter = Nothing
		Private _DOB_W As AggregateParameter = Nothing
		Private _Val_W As AggregateParameter = Nothing

		Public Sub AggregateClauseReset()

		_RefNumber_W = Nothing
		_FirstName_W = Nothing
		_Age_W = Nothing
		_Salary_W = Nothing
		_DOB_W = Nothing
		_Val_W = Nothing
			Me._entity.Query.FlushAggregateParameters()

		End Sub
	
		Private _entity As EasyObject
		Private _tearOff As TearOffAggregateParameter
    End Class	

	Public ReadOnly Property Aggregate() As AggregateClause
		Get
			If _aggregateClause Is Nothing Then
				_aggregateClause = New AggregateClause(Me)
			End If
	
			Return _aggregateClause
		End Get
	End Property
	
	Private _aggregateClause As AggregateClause = Nothing	
#End Region	

End Class


