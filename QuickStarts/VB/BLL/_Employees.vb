'===============================================================================
'  Generated From - VbNet_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject 
'      Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.1.5.1)

Option Strict On

Imports System
Imports System.Data
Imports System.Data.Common
Imports System.Configuration
Imports System.Collections
Imports System.Collections.Specialized
Imports System.Xml
Imports System.IO

Imports Microsoft.Practices.EnterpriseLibrary.Data
Imports NCI.EasyObjects


#Region " Schema "

Public Class EmployeesSchema
	Inherits NCI.EasyObjects.Schema

    Private Shared _entries As ArrayList
	Public Shared EmployeeID As New SchemaItem("EmployeeID", DbType.Int32, True, False, False, True, True, False)
	Public Shared LastName As New SchemaItem("LastName", DbType.String, SchemaItemJustify.None, 20, False, False, False, False)
	Public Shared FirstName As New SchemaItem("FirstName", DbType.String, SchemaItemJustify.None, 10, False, False, False, False)
	Public Shared Title As New SchemaItem("Title", DbType.String, SchemaItemJustify.None, 30, True, False, False, False)
	Public Shared TitleOfCourtesy As New SchemaItem("TitleOfCourtesy", DbType.String, SchemaItemJustify.None, 25, True, False, False, False)
	Public Shared BirthDate As New SchemaItem("BirthDate", DbType.DateTime, False, True, False, False, False, False)
	Public Shared HireDate As New SchemaItem("HireDate", DbType.DateTime, False, True, False, False, False, False)
	Public Shared Address As New SchemaItem("Address", DbType.String, SchemaItemJustify.None, 60, True, False, False, False)
	Public Shared City As New SchemaItem("City", DbType.String, SchemaItemJustify.None, 15, True, False, False, False)
	Public Shared Region As New SchemaItem("Region", DbType.String, SchemaItemJustify.None, 15, True, False, False, False)
	Public Shared PostalCode As New SchemaItem("PostalCode", DbType.String, SchemaItemJustify.None, 10, True, False, False, False)
	Public Shared Country As New SchemaItem("Country", DbType.String, SchemaItemJustify.None, 15, True, False, False, False)
	Public Shared HomePhone As New SchemaItem("HomePhone", DbType.String, SchemaItemJustify.None, 24, True, False, False, False)
	Public Shared Extension As New SchemaItem("Extension", DbType.String, SchemaItemJustify.None, 4, True, False, False, False)
	Public Shared Photo As New SchemaItem("Photo", DbType.Binary, False, True, False, False, False, False)
	Public Shared Notes As New SchemaItem("Notes", DbType.String, SchemaItemJustify.None, 1073741823, True, False, False, False)
	Public Shared ReportsTo As New SchemaItem("ReportsTo", DbType.Int32, False, True, False, False, True, False)
	Public Shared PhotoPath As New SchemaItem("PhotoPath", DbType.String, SchemaItemJustify.None, 255, True, False, False, False)

    Public Overrides ReadOnly Property SchemaEntries() As ArrayList
        Get
            If _entries Is Nothing Then
                _entries = New ArrayList()
				_entries.Add(EmployeesSchema.EmployeeID)
				_entries.Add(EmployeesSchema.LastName)
				_entries.Add(EmployeesSchema.FirstName)
				_entries.Add(EmployeesSchema.Title)
				_entries.Add(EmployeesSchema.TitleOfCourtesy)
				_entries.Add(EmployeesSchema.BirthDate)
				_entries.Add(EmployeesSchema.HireDate)
				_entries.Add(EmployeesSchema.Address)
				_entries.Add(EmployeesSchema.City)
				_entries.Add(EmployeesSchema.Region)
				_entries.Add(EmployeesSchema.PostalCode)
				_entries.Add(EmployeesSchema.Country)
				_entries.Add(EmployeesSchema.HomePhone)
				_entries.Add(EmployeesSchema.Extension)
				_entries.Add(EmployeesSchema.Photo)
				_entries.Add(EmployeesSchema.Notes)
				_entries.Add(EmployeesSchema.ReportsTo)
				_entries.Add(EmployeesSchema.PhotoPath)

            End If
            Return _entries
        End Get
    End Property

End Class

#End Region

Public MustInherit Class _Employees
    Inherits EasyObject

    Sub New()
        Dim _schema As New EmployeesSchema()
        Me.SchemaEntries = _schema.SchemaEntries
		Me.SchemaGlobal = "dbo"
    End Sub

	Public Overrides Sub FlushData()
		Me._whereClause = Nothing
		Me._aggregateClause = Nothing
		MyBase.FlushData()
	End Sub
		
	''' <summary>
	''' Loads the business object with info from the database, based on the requested primary key.
	''' </summary>
	''' <param name="EmployeeID"></param>
	''' <returns>A Boolean indicating success or failure of the query</returns>
	Public Function LoadByPrimaryKey(ByVal EmployeeID As Integer) As Boolean
		
		Select Case Me.DefaultCommandType
			Case CommandType.StoredProcedure
				Dim parameters As ListDictionary = New ListDictionary

				' Add in parameters
				parameters.Add(EmployeesSchema.EmployeeID.FieldName, EmployeeID)

				Return MyBase.LoadFromSql(Me.SchemaStoredProcedureWithSeparator & "daab_GetEmployees", parameters, CommandType.StoredProcedure)
				
			Case CommandType.Text
				Me.Where.EmployeeID.Value = EmployeeID
				Return Me.Query.Load()

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select
		
	End Function

    ''' <summary>
    ''' Loads all records from the table.
    ''' </summary>
    ''' <returns>A Boolean indicating success or failure of the query</returns>
    Public Function LoadAll() As Boolean
	
		Select Case Me.DefaultCommandType
		
			Case CommandType.StoredProcedure
				Dim parameters As ListDictionary = Nothing
				Return MyBase.LoadFromSql(Me.SchemaStoredProcedureWithSeparator & "daab_GetAllEmployees", parameters, CommandType.StoredProcedure)
				
			Case CommandType.Text
				Return Me.Query.Load()
			
			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

    End Function

    ''' <summary>
    ''' Adds a new record to the internal table.
    ''' </summary>
	Public Overrides Sub AddNew()
		MyBase.AddNew()

	End Sub

    Protected Shadows Function GetInsertCommand(commandType As CommandType) As DbCommand
	
		Dim dbCommand As DbCommand
		
        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "daab_AddEmployees"
				dbCommand = db.GetStoredProcCommand(sqlCommand)
		
				CreateParameters(db, dbCommand)
				
				' Add autokey parameters
				db.AddParameter(dbCommand, "EmployeeID", DbType.Int32, 0, ParameterDirection.Output, True, 0, 0, "EmployeeID", DataRowVersion.Default, Convert.DBNull)
				
			Case CommandType.Text
				Me.Where.WhereClauseReset()
				For Each item As SchemaItem In Me.SchemaEntries
					If Not (item.IsAutoKey OrElse item.IsComputed)
						Me.Query.AddInsertColumn(item)
					End If
				Next
				dbCommand = Me.Query.GetInsertCommandWrapper()

				dbCommand.Parameters.Clear()
				db.AddParameter(dbCommand, "EmployeeID", DbType.Int32, 0, ParameterDirection.Output, True, 0, 0, "EmployeeID", DataRowVersion.Default, Convert.DBNull)
				CreateParameters(db, dbCommand)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommand

    End Function

    Protected Shadows Function GetUpdateCommand(commandType As CommandType) As DbCommand
	
		Dim dbCommand As DbCommand

        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "daab_UpdateEmployees"
				dbCommand = db.GetStoredProcCommand(sqlCommand)
		
				CreateParameters(db, dbCommand)
		
				' Add autokey parameters
				db.AddInParameter(dbCommand, "EmployeeID", DbType.Int32, "EmployeeID", DataRowVersion.Current)

			Case CommandType.Text
				Me.Where.WhereClauseReset()
				For Each item As SchemaItem In Me.SchemaEntries
					If Not (item.IsAutoKey OrElse item.IsComputed)
						Me.Query.AddInsertColumn(item)
					End If
				Next

				Me.Where.WhereClauseReset()
				Me.Where.EmployeeID.Operator = WhereParameter.Operand.Equal
				dbCommand = Me.Query.GetUpdateCommandWrapper()

				dbCommand.Parameters.Clear()
				CreateParameters(db, dbCommand)
				db.AddInParameter(dbCommand, "EmployeeID", DbType.Int32, "EmployeeID", DataRowVersion.Current)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommand

    End Function

    Protected Shadows Function GetDeleteCommand(commandType As CommandType) As DbCommand
	
		Dim dbCommand As DbCommand

        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "daab_DeleteEmployees"
				dbCommand = db.GetStoredProcCommand(sqlCommand)
		
				' Add primary key parameters
				db.AddInParameter(dbCommand, "EmployeeID", DbType.Int32, "EmployeeID", DataRowVersion.Current)

			Case CommandType.Text
				Me.Where.WhereClauseReset()
				Me.Where.EmployeeID.Operator = WhereParameter.Operand.Equal
			dbCommand = Me.Query.GetDeleteCommandWrapper()

			dbCommand.Parameters.Clear()
				db.AddInParameter(dbCommand, "EmployeeID", DbType.Int32, "EmployeeID", DataRowVersion.Current)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommand

    End Function

    Private Sub CreateParameters(ByVal db As Database, ByVal dbCommand As DbCommand)
		
		db.AddInParameter(dbCommand, "LastName", DbType.String, "LastName", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "FirstName", DbType.String, "FirstName", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "Title", DbType.String, "Title", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "TitleOfCourtesy", DbType.String, "TitleOfCourtesy", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "BirthDate", DbType.DateTime, "BirthDate", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "HireDate", DbType.DateTime, "HireDate", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "Address", DbType.String, "Address", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "City", DbType.String, "City", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "Region", DbType.String, "Region", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "PostalCode", DbType.String, "PostalCode", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "Country", DbType.String, "Country", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "HomePhone", DbType.String, "HomePhone", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "Extension", DbType.String, "Extension", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "Photo", DbType.Binary, "Photo", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "Notes", DbType.String, "Notes", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "ReportsTo", DbType.Int32, "ReportsTo", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "PhotoPath", DbType.String, "PhotoPath", DataRowVersion.Current)

    End Sub

#Region " Properties "

	Public Overridable Property EmployeeID() As Integer
        Get
			Return Me.GetInteger(EmployeesSchema.EmployeeID.FieldName)
      End Get
        Set(ByVal Value As Integer)
			Me.SetInteger(EmployeesSchema.EmployeeID.FieldName, Value)
      End Set
    End Property

	Public Overridable Property LastName() As String
        Get
			Return Me.GetString(EmployeesSchema.LastName.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(EmployeesSchema.LastName.FieldName, Value)
      End Set
    End Property

	Public Overridable Property FirstName() As String
        Get
			Return Me.GetString(EmployeesSchema.FirstName.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(EmployeesSchema.FirstName.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Title() As String
        Get
			Return Me.GetString(EmployeesSchema.Title.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(EmployeesSchema.Title.FieldName, Value)
      End Set
    End Property

	Public Overridable Property TitleOfCourtesy() As String
        Get
			Return Me.GetString(EmployeesSchema.TitleOfCourtesy.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(EmployeesSchema.TitleOfCourtesy.FieldName, Value)
      End Set
    End Property

	Public Overridable Property BirthDate() As DateTime
        Get
			Return Me.GetDateTime(EmployeesSchema.BirthDate.FieldName)
      End Get
        Set(ByVal Value As DateTime)
			Me.SetDateTime(EmployeesSchema.BirthDate.FieldName, Value)
      End Set
    End Property

	Public Overridable Property HireDate() As DateTime
        Get
			Return Me.GetDateTime(EmployeesSchema.HireDate.FieldName)
      End Get
        Set(ByVal Value As DateTime)
			Me.SetDateTime(EmployeesSchema.HireDate.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Address() As String
        Get
			Return Me.GetString(EmployeesSchema.Address.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(EmployeesSchema.Address.FieldName, Value)
      End Set
    End Property

	Public Overridable Property City() As String
        Get
			Return Me.GetString(EmployeesSchema.City.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(EmployeesSchema.City.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Region() As String
        Get
			Return Me.GetString(EmployeesSchema.Region.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(EmployeesSchema.Region.FieldName, Value)
      End Set
    End Property

	Public Overridable Property PostalCode() As String
        Get
			Return Me.GetString(EmployeesSchema.PostalCode.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(EmployeesSchema.PostalCode.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Country() As String
        Get
			Return Me.GetString(EmployeesSchema.Country.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(EmployeesSchema.Country.FieldName, Value)
      End Set
    End Property

	Public Overridable Property HomePhone() As String
        Get
			Return Me.GetString(EmployeesSchema.HomePhone.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(EmployeesSchema.HomePhone.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Extension() As String
        Get
			Return Me.GetString(EmployeesSchema.Extension.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(EmployeesSchema.Extension.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Photo() As Byte()
        Get
			Return Me.GetByteArray(EmployeesSchema.Photo.FieldName)
      End Get
        Set(ByVal Value As Byte())
			Me.SetByteArray(EmployeesSchema.Photo.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Notes() As String
        Get
			Return Me.GetString(EmployeesSchema.Notes.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(EmployeesSchema.Notes.FieldName, Value)
      End Set
    End Property

	Public Overridable Property ReportsTo() As Integer
        Get
			Return Me.GetInteger(EmployeesSchema.ReportsTo.FieldName)
      End Get
        Set(ByVal Value As Integer)
			Me.SetInteger(EmployeesSchema.ReportsTo.FieldName, Value)
      End Set
    End Property

	Public Overridable Property PhotoPath() As String
        Get
			Return Me.GetString(EmployeesSchema.PhotoPath.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(EmployeesSchema.PhotoPath.FieldName, Value)
      End Set
    End Property

    Public Overrides ReadOnly Property TableName() As String
        Get
            Return "Employees"
        End Get
    End Property

#End Region

#Region " String Properties "
		Public Overridable Property s_EmployeeID As String
			Get
				If Me.IsColumnNull(EmployeesSchema.EmployeeID.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(EmployeesSchema.EmployeeID.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeesSchema.EmployeeID.FieldName)
				Else
					Me.EmployeeID = MyBase.SetIntegerAsString(EmployeesSchema.EmployeeID.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_LastName As String
			Get
				If Me.IsColumnNull(EmployeesSchema.LastName.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(EmployeesSchema.LastName.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeesSchema.LastName.FieldName)
				Else
					Me.LastName = MyBase.SetStringAsString(EmployeesSchema.LastName.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_FirstName As String
			Get
				If Me.IsColumnNull(EmployeesSchema.FirstName.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(EmployeesSchema.FirstName.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeesSchema.FirstName.FieldName)
				Else
					Me.FirstName = MyBase.SetStringAsString(EmployeesSchema.FirstName.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Title As String
			Get
				If Me.IsColumnNull(EmployeesSchema.Title.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(EmployeesSchema.Title.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeesSchema.Title.FieldName)
				Else
					Me.Title = MyBase.SetStringAsString(EmployeesSchema.Title.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_TitleOfCourtesy As String
			Get
				If Me.IsColumnNull(EmployeesSchema.TitleOfCourtesy.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(EmployeesSchema.TitleOfCourtesy.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeesSchema.TitleOfCourtesy.FieldName)
				Else
					Me.TitleOfCourtesy = MyBase.SetStringAsString(EmployeesSchema.TitleOfCourtesy.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_BirthDate As String
			Get
				If Me.IsColumnNull(EmployeesSchema.BirthDate.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetDateTimeAsString(EmployeesSchema.BirthDate.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeesSchema.BirthDate.FieldName)
				Else
					Me.BirthDate = MyBase.SetDateTimeAsString(EmployeesSchema.BirthDate.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_HireDate As String
			Get
				If Me.IsColumnNull(EmployeesSchema.HireDate.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetDateTimeAsString(EmployeesSchema.HireDate.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeesSchema.HireDate.FieldName)
				Else
					Me.HireDate = MyBase.SetDateTimeAsString(EmployeesSchema.HireDate.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Address As String
			Get
				If Me.IsColumnNull(EmployeesSchema.Address.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(EmployeesSchema.Address.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeesSchema.Address.FieldName)
				Else
					Me.Address = MyBase.SetStringAsString(EmployeesSchema.Address.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_City As String
			Get
				If Me.IsColumnNull(EmployeesSchema.City.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(EmployeesSchema.City.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeesSchema.City.FieldName)
				Else
					Me.City = MyBase.SetStringAsString(EmployeesSchema.City.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Region As String
			Get
				If Me.IsColumnNull(EmployeesSchema.Region.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(EmployeesSchema.Region.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeesSchema.Region.FieldName)
				Else
					Me.Region = MyBase.SetStringAsString(EmployeesSchema.Region.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_PostalCode As String
			Get
				If Me.IsColumnNull(EmployeesSchema.PostalCode.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(EmployeesSchema.PostalCode.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeesSchema.PostalCode.FieldName)
				Else
					Me.PostalCode = MyBase.SetStringAsString(EmployeesSchema.PostalCode.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Country As String
			Get
				If Me.IsColumnNull(EmployeesSchema.Country.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(EmployeesSchema.Country.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeesSchema.Country.FieldName)
				Else
					Me.Country = MyBase.SetStringAsString(EmployeesSchema.Country.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_HomePhone As String
			Get
				If Me.IsColumnNull(EmployeesSchema.HomePhone.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(EmployeesSchema.HomePhone.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeesSchema.HomePhone.FieldName)
				Else
					Me.HomePhone = MyBase.SetStringAsString(EmployeesSchema.HomePhone.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Extension As String
			Get
				If Me.IsColumnNull(EmployeesSchema.Extension.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(EmployeesSchema.Extension.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeesSchema.Extension.FieldName)
				Else
					Me.Extension = MyBase.SetStringAsString(EmployeesSchema.Extension.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Notes As String
			Get
				If Me.IsColumnNull(EmployeesSchema.Notes.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(EmployeesSchema.Notes.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeesSchema.Notes.FieldName)
				Else
					Me.Notes = MyBase.SetStringAsString(EmployeesSchema.Notes.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_ReportsTo As String
			Get
				If Me.IsColumnNull(EmployeesSchema.ReportsTo.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(EmployeesSchema.ReportsTo.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeesSchema.ReportsTo.FieldName)
				Else
					Me.ReportsTo = MyBase.SetIntegerAsString(EmployeesSchema.ReportsTo.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_PhotoPath As String
			Get
				If Me.IsColumnNull(EmployeesSchema.PhotoPath.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(EmployeesSchema.PhotoPath.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeesSchema.PhotoPath.FieldName)
				Else
					Me.PhotoPath = MyBase.SetStringAsString(EmployeesSchema.PhotoPath.FieldName, Value)
				End If
			End Set
		End Property


#End Region

#Region " Where Clause "
    Public Class WhereClause

        Public Sub New(ByVal entity As EasyObject)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffWhereParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffWhereParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region " TearOff's "
		Public class TearOffWhereParameter
		
			Private _clause as WhereClause
			
			Public Sub New(ByVal clause As WhereClause)
				Me._clause = clause
			End Sub

			Public ReadOnly Property EmployeeID() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeesSchema.EmployeeID)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property LastName() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeesSchema.LastName)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property FirstName() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeesSchema.FirstName)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Title() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeesSchema.Title)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property TitleOfCourtesy() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeesSchema.TitleOfCourtesy)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property BirthDate() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeesSchema.BirthDate)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property HireDate() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeesSchema.HireDate)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Address() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeesSchema.Address)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property City() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeesSchema.City)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Region() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeesSchema.Region)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property PostalCode() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeesSchema.PostalCode)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Country() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeesSchema.Country)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property HomePhone() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeesSchema.HomePhone)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Extension() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeesSchema.Extension)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Photo() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeesSchema.Photo)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Notes() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeesSchema.Notes)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property ReportsTo() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeesSchema.ReportsTo)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property PhotoPath() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeesSchema.PhotoPath)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

	End Class
	
	#End Region	

		Public ReadOnly Property EmployeeID() As WhereParameter 
			Get
				If _EmployeeID_W Is Nothing Then
					_EmployeeID_W = TearOff.EmployeeID
				End If
				Return _EmployeeID_W
			End Get
		End Property

		Public ReadOnly Property LastName() As WhereParameter 
			Get
				If _LastName_W Is Nothing Then
					_LastName_W = TearOff.LastName
				End If
				Return _LastName_W
			End Get
		End Property

		Public ReadOnly Property FirstName() As WhereParameter 
			Get
				If _FirstName_W Is Nothing Then
					_FirstName_W = TearOff.FirstName
				End If
				Return _FirstName_W
			End Get
		End Property

		Public ReadOnly Property Title() As WhereParameter 
			Get
				If _Title_W Is Nothing Then
					_Title_W = TearOff.Title
				End If
				Return _Title_W
			End Get
		End Property

		Public ReadOnly Property TitleOfCourtesy() As WhereParameter 
			Get
				If _TitleOfCourtesy_W Is Nothing Then
					_TitleOfCourtesy_W = TearOff.TitleOfCourtesy
				End If
				Return _TitleOfCourtesy_W
			End Get
		End Property

		Public ReadOnly Property BirthDate() As WhereParameter 
			Get
				If _BirthDate_W Is Nothing Then
					_BirthDate_W = TearOff.BirthDate
				End If
				Return _BirthDate_W
			End Get
		End Property

		Public ReadOnly Property HireDate() As WhereParameter 
			Get
				If _HireDate_W Is Nothing Then
					_HireDate_W = TearOff.HireDate
				End If
				Return _HireDate_W
			End Get
		End Property

		Public ReadOnly Property Address() As WhereParameter 
			Get
				If _Address_W Is Nothing Then
					_Address_W = TearOff.Address
				End If
				Return _Address_W
			End Get
		End Property

		Public ReadOnly Property City() As WhereParameter 
			Get
				If _City_W Is Nothing Then
					_City_W = TearOff.City
				End If
				Return _City_W
			End Get
		End Property

		Public ReadOnly Property Region() As WhereParameter 
			Get
				If _Region_W Is Nothing Then
					_Region_W = TearOff.Region
				End If
				Return _Region_W
			End Get
		End Property

		Public ReadOnly Property PostalCode() As WhereParameter 
			Get
				If _PostalCode_W Is Nothing Then
					_PostalCode_W = TearOff.PostalCode
				End If
				Return _PostalCode_W
			End Get
		End Property

		Public ReadOnly Property Country() As WhereParameter 
			Get
				If _Country_W Is Nothing Then
					_Country_W = TearOff.Country
				End If
				Return _Country_W
			End Get
		End Property

		Public ReadOnly Property HomePhone() As WhereParameter 
			Get
				If _HomePhone_W Is Nothing Then
					_HomePhone_W = TearOff.HomePhone
				End If
				Return _HomePhone_W
			End Get
		End Property

		Public ReadOnly Property Extension() As WhereParameter 
			Get
				If _Extension_W Is Nothing Then
					_Extension_W = TearOff.Extension
				End If
				Return _Extension_W
			End Get
		End Property

		Public ReadOnly Property Photo() As WhereParameter 
			Get
				If _Photo_W Is Nothing Then
					_Photo_W = TearOff.Photo
				End If
				Return _Photo_W
			End Get
		End Property

		Public ReadOnly Property Notes() As WhereParameter 
			Get
				If _Notes_W Is Nothing Then
					_Notes_W = TearOff.Notes
				End If
				Return _Notes_W
			End Get
		End Property

		Public ReadOnly Property ReportsTo() As WhereParameter 
			Get
				If _ReportsTo_W Is Nothing Then
					_ReportsTo_W = TearOff.ReportsTo
				End If
				Return _ReportsTo_W
			End Get
		End Property

		Public ReadOnly Property PhotoPath() As WhereParameter 
			Get
				If _PhotoPath_W Is Nothing Then
					_PhotoPath_W = TearOff.PhotoPath
				End If
				Return _PhotoPath_W
			End Get
		End Property

		Private _EmployeeID_W As WhereParameter = Nothing
		Private _LastName_W As WhereParameter = Nothing
		Private _FirstName_W As WhereParameter = Nothing
		Private _Title_W As WhereParameter = Nothing
		Private _TitleOfCourtesy_W As WhereParameter = Nothing
		Private _BirthDate_W As WhereParameter = Nothing
		Private _HireDate_W As WhereParameter = Nothing
		Private _Address_W As WhereParameter = Nothing
		Private _City_W As WhereParameter = Nothing
		Private _Region_W As WhereParameter = Nothing
		Private _PostalCode_W As WhereParameter = Nothing
		Private _Country_W As WhereParameter = Nothing
		Private _HomePhone_W As WhereParameter = Nothing
		Private _Extension_W As WhereParameter = Nothing
		Private _Photo_W As WhereParameter = Nothing
		Private _Notes_W As WhereParameter = Nothing
		Private _ReportsTo_W As WhereParameter = Nothing
		Private _PhotoPath_W As WhereParameter = Nothing

		Public Sub WhereClauseReset()

		_EmployeeID_W = Nothing
		_LastName_W = Nothing
		_FirstName_W = Nothing
		_Title_W = Nothing
		_TitleOfCourtesy_W = Nothing
		_BirthDate_W = Nothing
		_HireDate_W = Nothing
		_Address_W = Nothing
		_City_W = Nothing
		_Region_W = Nothing
		_PostalCode_W = Nothing
		_Country_W = Nothing
		_HomePhone_W = Nothing
		_Extension_W = Nothing
		_Photo_W = Nothing
		_Notes_W = Nothing
		_ReportsTo_W = Nothing
		_PhotoPath_W = Nothing
			Me._entity.Query.FlushWhereParameters()

		End Sub
	
		Private _entity As EasyObject
		Private _tearOff As TearOffWhereParameter
    End Class	

	Public ReadOnly Property Where() As WhereClause
		Get
			If _whereClause Is Nothing Then
				_whereClause = New WhereClause(Me)
			End If
	
			Return _whereClause
		End Get
	End Property
	
	Private _whereClause As WhereClause = Nothing	
#End Region	

#Region " Aggregate Clause "
    Public Class AggregateClause

        Public Sub New(ByVal entity As EasyObject)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffAggregateParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffAggregateParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region " TearOff's "
		Public class TearOffAggregateParameter
		
			Private _clause as AggregateClause
			
			Public Sub New(ByVal clause As AggregateClause)
				Me._clause = clause
			End Sub

			Public ReadOnly Property EmployeeID() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeesSchema.EmployeeID)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property LastName() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeesSchema.LastName)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property FirstName() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeesSchema.FirstName)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Title() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeesSchema.Title)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property TitleOfCourtesy() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeesSchema.TitleOfCourtesy)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property BirthDate() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeesSchema.BirthDate)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property HireDate() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeesSchema.HireDate)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Address() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeesSchema.Address)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property City() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeesSchema.City)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Region() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeesSchema.Region)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property PostalCode() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeesSchema.PostalCode)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Country() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeesSchema.Country)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property HomePhone() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeesSchema.HomePhone)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Extension() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeesSchema.Extension)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Photo() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeesSchema.Photo)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Notes() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeesSchema.Notes)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property ReportsTo() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeesSchema.ReportsTo)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property PhotoPath() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeesSchema.PhotoPath)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

	End Class
	
	#End Region	

		Public ReadOnly Property EmployeeID() As AggregateParameter 
			Get
				If _EmployeeID_W Is Nothing Then
					_EmployeeID_W = TearOff.EmployeeID
				End If
				Return _EmployeeID_W
			End Get
		End Property

		Public ReadOnly Property LastName() As AggregateParameter 
			Get
				If _LastName_W Is Nothing Then
					_LastName_W = TearOff.LastName
				End If
				Return _LastName_W
			End Get
		End Property

		Public ReadOnly Property FirstName() As AggregateParameter 
			Get
				If _FirstName_W Is Nothing Then
					_FirstName_W = TearOff.FirstName
				End If
				Return _FirstName_W
			End Get
		End Property

		Public ReadOnly Property Title() As AggregateParameter 
			Get
				If _Title_W Is Nothing Then
					_Title_W = TearOff.Title
				End If
				Return _Title_W
			End Get
		End Property

		Public ReadOnly Property TitleOfCourtesy() As AggregateParameter 
			Get
				If _TitleOfCourtesy_W Is Nothing Then
					_TitleOfCourtesy_W = TearOff.TitleOfCourtesy
				End If
				Return _TitleOfCourtesy_W
			End Get
		End Property

		Public ReadOnly Property BirthDate() As AggregateParameter 
			Get
				If _BirthDate_W Is Nothing Then
					_BirthDate_W = TearOff.BirthDate
				End If
				Return _BirthDate_W
			End Get
		End Property

		Public ReadOnly Property HireDate() As AggregateParameter 
			Get
				If _HireDate_W Is Nothing Then
					_HireDate_W = TearOff.HireDate
				End If
				Return _HireDate_W
			End Get
		End Property

		Public ReadOnly Property Address() As AggregateParameter 
			Get
				If _Address_W Is Nothing Then
					_Address_W = TearOff.Address
				End If
				Return _Address_W
			End Get
		End Property

		Public ReadOnly Property City() As AggregateParameter 
			Get
				If _City_W Is Nothing Then
					_City_W = TearOff.City
				End If
				Return _City_W
			End Get
		End Property

		Public ReadOnly Property Region() As AggregateParameter 
			Get
				If _Region_W Is Nothing Then
					_Region_W = TearOff.Region
				End If
				Return _Region_W
			End Get
		End Property

		Public ReadOnly Property PostalCode() As AggregateParameter 
			Get
				If _PostalCode_W Is Nothing Then
					_PostalCode_W = TearOff.PostalCode
				End If
				Return _PostalCode_W
			End Get
		End Property

		Public ReadOnly Property Country() As AggregateParameter 
			Get
				If _Country_W Is Nothing Then
					_Country_W = TearOff.Country
				End If
				Return _Country_W
			End Get
		End Property

		Public ReadOnly Property HomePhone() As AggregateParameter 
			Get
				If _HomePhone_W Is Nothing Then
					_HomePhone_W = TearOff.HomePhone
				End If
				Return _HomePhone_W
			End Get
		End Property

		Public ReadOnly Property Extension() As AggregateParameter 
			Get
				If _Extension_W Is Nothing Then
					_Extension_W = TearOff.Extension
				End If
				Return _Extension_W
			End Get
		End Property

		Public ReadOnly Property Photo() As AggregateParameter 
			Get
				If _Photo_W Is Nothing Then
					_Photo_W = TearOff.Photo
				End If
				Return _Photo_W
			End Get
		End Property

		Public ReadOnly Property Notes() As AggregateParameter 
			Get
				If _Notes_W Is Nothing Then
					_Notes_W = TearOff.Notes
				End If
				Return _Notes_W
			End Get
		End Property

		Public ReadOnly Property ReportsTo() As AggregateParameter 
			Get
				If _ReportsTo_W Is Nothing Then
					_ReportsTo_W = TearOff.ReportsTo
				End If
				Return _ReportsTo_W
			End Get
		End Property

		Public ReadOnly Property PhotoPath() As AggregateParameter 
			Get
				If _PhotoPath_W Is Nothing Then
					_PhotoPath_W = TearOff.PhotoPath
				End If
				Return _PhotoPath_W
			End Get
		End Property

		Private _EmployeeID_W As AggregateParameter = Nothing
		Private _LastName_W As AggregateParameter = Nothing
		Private _FirstName_W As AggregateParameter = Nothing
		Private _Title_W As AggregateParameter = Nothing
		Private _TitleOfCourtesy_W As AggregateParameter = Nothing
		Private _BirthDate_W As AggregateParameter = Nothing
		Private _HireDate_W As AggregateParameter = Nothing
		Private _Address_W As AggregateParameter = Nothing
		Private _City_W As AggregateParameter = Nothing
		Private _Region_W As AggregateParameter = Nothing
		Private _PostalCode_W As AggregateParameter = Nothing
		Private _Country_W As AggregateParameter = Nothing
		Private _HomePhone_W As AggregateParameter = Nothing
		Private _Extension_W As AggregateParameter = Nothing
		Private _Photo_W As AggregateParameter = Nothing
		Private _Notes_W As AggregateParameter = Nothing
		Private _ReportsTo_W As AggregateParameter = Nothing
		Private _PhotoPath_W As AggregateParameter = Nothing

		Public Sub AggregateClauseReset()

		_EmployeeID_W = Nothing
		_LastName_W = Nothing
		_FirstName_W = Nothing
		_Title_W = Nothing
		_TitleOfCourtesy_W = Nothing
		_BirthDate_W = Nothing
		_HireDate_W = Nothing
		_Address_W = Nothing
		_City_W = Nothing
		_Region_W = Nothing
		_PostalCode_W = Nothing
		_Country_W = Nothing
		_HomePhone_W = Nothing
		_Extension_W = Nothing
		_Photo_W = Nothing
		_Notes_W = Nothing
		_ReportsTo_W = Nothing
		_PhotoPath_W = Nothing
			Me._entity.Query.FlushAggregateParameters()

		End Sub
	
		Private _entity As EasyObject
		Private _tearOff As TearOffAggregateParameter
    End Class	

	Public ReadOnly Property Aggregate() As AggregateClause
		Get
			If _aggregateClause Is Nothing Then
				_aggregateClause = New AggregateClause(Me)
			End If
	
			Return _aggregateClause
		End Get
	End Property
	
	Private _aggregateClause As AggregateClause = Nothing	
#End Region	

End Class


