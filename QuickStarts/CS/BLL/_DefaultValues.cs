/*
'===============================================================================
'  Generated From - CSharp_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.4.0)

using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace EasyObjectsQuickStart.BLL
{

	#region Schema

	public class DefaultValuesSchema : NCI.EasyObjects.Schema
	{
		private static ArrayList _entries;
		public static SchemaItem RefNumber = new SchemaItem("RefNumber", DbType.Decimal, true, false, false, true, false);
		public static SchemaItem FirstName = new SchemaItem("FirstName", DbType.AnsiString, SchemaItemJustify.None, 100, false, false, false);
		public static SchemaItem Age = new SchemaItem("Age", DbType.Int32, false, false, false, false, false);
		public static SchemaItem Salary = new SchemaItem("Salary", DbType.Decimal, false, false, false, false, false);
		public static SchemaItem DOB = new SchemaItem("DOB", DbType.DateTime, false, false, false, false, false);
		public static SchemaItem Val = new SchemaItem("Val", DbType.AnsiStringFixedLength, SchemaItemJustify.None, 1, true, false, false);

		public override ArrayList SchemaEntries
		{
			get
			{
				if (_entries == null )
				{
					_entries = new ArrayList();
					_entries.Add(DefaultValuesSchema.RefNumber);
					_entries.Add(DefaultValuesSchema.FirstName);
					_entries.Add(DefaultValuesSchema.Age);
					_entries.Add(DefaultValuesSchema.Salary);
					_entries.Add(DefaultValuesSchema.DOB);
					_entries.Add(DefaultValuesSchema.Val);
				}
				return _entries;
			}
		}
	}
	#endregion

	public abstract class _DefaultValues : EasyObject
	{

		public _DefaultValues()
		{
			DefaultValuesSchema _schema = new DefaultValuesSchema();
			this.SchemaEntries = _schema.SchemaEntries;
			this.SchemaGlobal = "dbo";
		}

		/// <summary>
		/// Loads the business object with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="RefNumber"></param>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadByPrimaryKey(decimal RefNumber)
		{
			ListDictionary parameters = new ListDictionary();

			// Add in parameters
			parameters.Add(DefaultValuesSchema.RefNumber.FieldName, RefNumber);

			return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetDefaultValues", parameters, CommandType.StoredProcedure);
		}
	
		/// <summary>
		/// Loads all records from the table.
		/// </summary>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadAll()
		{
			ListDictionary parameters = null;
	
			return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetAllDefaultValues", parameters, CommandType.StoredProcedure);
		}

		/// <summary>
		/// Adds a new record to the internal table.
		/// </summary>
		public override void AddNew()
		{
			base.AddNew();
		}

		protected override DBCommandWrapper GetInsertCommand()
		{	
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();
	
			string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_AddDefaultValues";
			DBCommandWrapper dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand);
	
			CreateParameters(dbCommandWrapper);
			
			// Add autokey parameters
			dbCommandWrapper.AddParameter("RefNumber", DbType.Decimal, 0, ParameterDirection.Output, true, 0, 0, "RefNumber", DataRowVersion.Default, Convert.DBNull);

			return dbCommandWrapper;
		}

		protected override DBCommandWrapper GetUpdateCommand()
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();
	
			string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_UpdateDefaultValues";
			DBCommandWrapper dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand);
	
			CreateParameters(dbCommandWrapper);
	
			// Add autokey parameters
			dbCommandWrapper.AddInParameter("RefNumber", DbType.Decimal, "RefNumber", DataRowVersion.Current);

			return dbCommandWrapper;
		}

		protected override DBCommandWrapper GetDeleteCommand()
		{	
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();
	
			string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_DeleteDefaultValues";
			DBCommandWrapper dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand);
	
			// Add primary key parameters
			dbCommandWrapper.AddInParameter("RefNumber", DbType.Decimal, "RefNumber", DataRowVersion.Current);

			return dbCommandWrapper;
		}

		private void CreateParameters(DBCommandWrapper dbCommandWrapper)
		{
			dbCommandWrapper.AddInParameter("FirstName", DbType.AnsiString, "FirstName", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("Age", DbType.Int32, "Age", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("Salary", DbType.Decimal, "Salary", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("DOB", DbType.DateTime, "DOB", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("Val", DbType.AnsiStringFixedLength, "Val", DataRowVersion.Current);
		}
		
		#region Properties
		public virtual decimal RefNumber
		{
			get
			{
				return this.GetDecimal(DefaultValuesSchema.RefNumber.FieldName);
	    	}
			set
			{
				this.SetDecimal(DefaultValuesSchema.RefNumber.FieldName, value);
			}
		}
		public virtual string FirstName
		{
			get
			{
				return this.GetString(DefaultValuesSchema.FirstName.FieldName);
	    	}
			set
			{
				this.SetString(DefaultValuesSchema.FirstName.FieldName, value);
			}
		}
		public virtual int Age
		{
			get
			{
				return this.GetInteger(DefaultValuesSchema.Age.FieldName);
	    	}
			set
			{
				this.SetInteger(DefaultValuesSchema.Age.FieldName, value);
			}
		}
		public virtual decimal Salary
		{
			get
			{
				return this.GetDecimal(DefaultValuesSchema.Salary.FieldName);
	    	}
			set
			{
				this.SetDecimal(DefaultValuesSchema.Salary.FieldName, value);
			}
		}
		public virtual DateTime DOB
		{
			get
			{
				return this.GetDateTime(DefaultValuesSchema.DOB.FieldName);
	    	}
			set
			{
				this.SetDateTime(DefaultValuesSchema.DOB.FieldName, value);
			}
		}
		public virtual string Val
		{
			get
			{
				return this.GetString(DefaultValuesSchema.Val.FieldName);
	    	}
			set
			{
				this.SetString(DefaultValuesSchema.Val.FieldName, value);
			}
		}

		public override string TableName
		{
			get { return "DefaultValues"; }
		}
		
		#endregion		
		
		#region String Properties
	
		public virtual string s_RefNumber
	    {
			get
	        {
				return this.IsColumnNull(DefaultValuesSchema.RefNumber.FieldName) ? string.Empty : base.GetDecimalAsString(DefaultValuesSchema.RefNumber.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(DefaultValuesSchema.RefNumber.FieldName);
				else
					this.RefNumber = base.SetDecimalAsString(DefaultValuesSchema.RefNumber.FieldName, value);
			}
		}

		public virtual string s_FirstName
	    {
			get
	        {
				return this.IsColumnNull(DefaultValuesSchema.FirstName.FieldName) ? string.Empty : base.GetStringAsString(DefaultValuesSchema.FirstName.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(DefaultValuesSchema.FirstName.FieldName);
				else
					this.FirstName = base.SetStringAsString(DefaultValuesSchema.FirstName.FieldName, value);
			}
		}

		public virtual string s_Age
	    {
			get
	        {
				return this.IsColumnNull(DefaultValuesSchema.Age.FieldName) ? string.Empty : base.GetIntegerAsString(DefaultValuesSchema.Age.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(DefaultValuesSchema.Age.FieldName);
				else
					this.Age = base.SetIntegerAsString(DefaultValuesSchema.Age.FieldName, value);
			}
		}

		public virtual string s_Salary
	    {
			get
	        {
				return this.IsColumnNull(DefaultValuesSchema.Salary.FieldName) ? string.Empty : base.GetDecimalAsString(DefaultValuesSchema.Salary.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(DefaultValuesSchema.Salary.FieldName);
				else
					this.Salary = base.SetDecimalAsString(DefaultValuesSchema.Salary.FieldName, value);
			}
		}

		public virtual string s_DOB
	    {
			get
	        {
				return this.IsColumnNull(DefaultValuesSchema.DOB.FieldName) ? string.Empty : base.GetDateTimeAsString(DefaultValuesSchema.DOB.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(DefaultValuesSchema.DOB.FieldName);
				else
					this.DOB = base.SetDateTimeAsString(DefaultValuesSchema.DOB.FieldName, value);
			}
		}

		public virtual string s_Val
	    {
			get
	        {
				return this.IsColumnNull(DefaultValuesSchema.Val.FieldName) ? string.Empty : base.GetStringAsString(DefaultValuesSchema.Val.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(DefaultValuesSchema.Val.FieldName);
				else
					this.Val = base.SetStringAsString(DefaultValuesSchema.Val.FieldName, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter RefNumber
				{
					get
					{
							WhereParameter wp = new WhereParameter(DefaultValuesSchema.RefNumber);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter FirstName
				{
					get
					{
							WhereParameter wp = new WhereParameter(DefaultValuesSchema.FirstName);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Age
				{
					get
					{
							WhereParameter wp = new WhereParameter(DefaultValuesSchema.Age);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Salary
				{
					get
					{
							WhereParameter wp = new WhereParameter(DefaultValuesSchema.Salary);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter DOB
				{
					get
					{
							WhereParameter wp = new WhereParameter(DefaultValuesSchema.DOB);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Val
				{
					get
					{
							WhereParameter wp = new WhereParameter(DefaultValuesSchema.Val);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter RefNumber
		    {
				get
		        {
					if(_RefNumber_W == null)
	        	    {
						_RefNumber_W = TearOff.RefNumber;
					}
					return _RefNumber_W;
				}
			}

			public WhereParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public WhereParameter Age
		    {
				get
		        {
					if(_Age_W == null)
	        	    {
						_Age_W = TearOff.Age;
					}
					return _Age_W;
				}
			}

			public WhereParameter Salary
		    {
				get
		        {
					if(_Salary_W == null)
	        	    {
						_Salary_W = TearOff.Salary;
					}
					return _Salary_W;
				}
			}

			public WhereParameter DOB
		    {
				get
		        {
					if(_DOB_W == null)
	        	    {
						_DOB_W = TearOff.DOB;
					}
					return _DOB_W;
				}
			}

			public WhereParameter Val
		    {
				get
		        {
					if(_Val_W == null)
	        	    {
						_Val_W = TearOff.Val;
					}
					return _Val_W;
				}
			}

			private WhereParameter _RefNumber_W = null;
			private WhereParameter _FirstName_W = null;
			private WhereParameter _Age_W = null;
			private WhereParameter _Salary_W = null;
			private WhereParameter _DOB_W = null;
			private WhereParameter _Val_W = null;

			public void WhereClauseReset()
			{
				_RefNumber_W = null;
				_FirstName_W = null;
				_Age_W = null;
				_Salary_W = null;
				_DOB_W = null;
				_Val_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private EasyObject _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	}
}
