/*
'===============================================================================
'  Generated From - CSharp_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.2)

using System;
using System.Data;
using System.Data.Common;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace EasyObjectsQuickStart.BLL
{

	#region Schema

	public class RegionSchema : NCI.EasyObjects.Schema
	{
		private static ArrayList _entries;
		public static SchemaItem RegionID = new SchemaItem("RegionID", DbType.Int32, false, false, false, true, true, false);
		public static SchemaItem RegionDescription = new SchemaItem("RegionDescription", DbType.StringFixedLength, SchemaItemJustify.None, 50, false, false, false, false);

		public override ArrayList SchemaEntries
		{
			get
			{
				if (_entries == null )
				{
					_entries = new ArrayList();
					_entries.Add(RegionSchema.RegionID);
					_entries.Add(RegionSchema.RegionDescription);
				}
				return _entries;
			}
		}
		
		public static bool HasAutoKey 
		{
			get { return false;	}
		}

		public static bool HasRowID 
		{
			get { return false;	}
		}
	}
	#endregion

	public abstract class _Region : EasyObject
	{

		public _Region()
		{
			RegionSchema _schema = new RegionSchema();
			this.SchemaEntries = _schema.SchemaEntries;
			this.SchemaGlobal = "dbo";
		}
		
		public override void FlushData() 	 
		{ 	 
			this._whereClause = null; 	 
			this._aggregateClause = null; 	 
			base.FlushData(); 	 
		}
			   
		/// <summary>
		/// Loads the business object with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="RegionID"></param>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadByPrimaryKey(int RegionID)
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					ListDictionary parameters = new ListDictionary();

					// Add in parameters
					parameters.Add(RegionSchema.RegionID.FieldName, RegionID);

					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetRegion", parameters, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.RegionID.Value = RegionID;
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}
	
		/// <summary>
		/// Loads all records from the table.
		/// </summary>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadAll()
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetAllRegion", null, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		/// <summary>
		/// Adds a new record to the internal table.
		/// </summary>
		public override void AddNew()
		{
			base.AddNew();
			this.ApplyDefaults();
		}

		/// <summary>
		/// Apply any default values to columns
		/// </summary>
		protected override void ApplyDefaults()
		{
		}

		protected override DbCommand GetInsertCommand(CommandType commandType)
		{	
			DbCommand dbCommand;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_AddRegion";
					dbCommand = db.GetStoredProcCommand(sqlCommand);

					CreateParameters(db, dbCommand);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!item.IsComputed)
						{
							if ((item.IsAutoKey && this.IdentityInsert) || !item.IsAutoKey)
							{
								this.Query.AddInsertColumn(item);
							}
						}
					}
					dbCommand = this.Query.GetInsertCommandWrapper();

					dbCommand.Parameters.Clear();
					if (this.IdentityInsert)
					{
					}
					else
					{
					}
					CreateParameters(db, dbCommand);

					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DbCommand GetUpdateCommand(CommandType commandType)
		{
            DbCommand dbCommand;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_UpdateRegion";
					dbCommand = db.GetStoredProcCommand(sqlCommand);

					CreateParameters(db, dbCommand);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!(item.IsAutoKey || item.IsComputed))
						{
							this.Query.AddUpdateColumn(item);
						}
					}

					this.Where.WhereClauseReset();
					this.Where.RegionID.Operator = WhereParameter.Operand.Equal;
					dbCommand = this.Query.GetUpdateCommandWrapper();

					dbCommand.Parameters.Clear();
					CreateParameters(db, dbCommand);
					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DbCommand GetDeleteCommand(CommandType commandType)
		{
            DbCommand dbCommand;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_DeleteRegion";
					dbCommand = db.GetStoredProcCommand(sqlCommand);
					db.AddInParameter(dbCommand, "RegionID", DbType.Int32, "RegionID", DataRowVersion.Current);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.RegionID.Operator = WhereParameter.Operand.Equal;
					dbCommand = this.Query.GetDeleteCommandWrapper();

					dbCommand.Parameters.Clear();
					db.AddInParameter(dbCommand, "RegionID", DbType.Int32, "RegionID", DataRowVersion.Current);
					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		private void CreateParameters(Database db, DbCommand dbCommand)
		{
			db.AddInParameter(dbCommand, "RegionID", DbType.Int32, "RegionID", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "RegionDescription", DbType.StringFixedLength, "RegionDescription", DataRowVersion.Current);
		}
		
		#region Properties
		public virtual int RegionID
		{
			get
			{
				return this.GetInteger(RegionSchema.RegionID.FieldName);
	    	}
			set
			{
				this.SetInteger(RegionSchema.RegionID.FieldName, value);
			}
		}
		public virtual string RegionDescription
		{
			get
			{
				return this.GetString(RegionSchema.RegionDescription.FieldName);
	    	}
			set
			{
				this.SetString(RegionSchema.RegionDescription.FieldName, value);
			}
		}

		public override string TableName
		{
			get { return "Region"; }
		}
		
		#endregion		
		
		#region String Properties
		public virtual string s_RegionID
		{
			get
			{
			    return this.IsColumnNull(RegionSchema.RegionID.FieldName) ? string.Empty : base.GetIntegerAsString(RegionSchema.RegionID.FieldName);
			}
			set
			{
			    if(string.Empty == value)
			        this.SetColumnNull(RegionSchema.RegionID.FieldName);
			    else
			        this.RegionID = base.SetIntegerAsString(RegionSchema.RegionID.FieldName, value);
			}
		}
		public virtual string s_RegionDescription
		{
			get
			{
			    return this.IsColumnNull(RegionSchema.RegionDescription.FieldName) ? string.Empty : base.GetStringAsString(RegionSchema.RegionDescription.FieldName);
			}
			set
			{
			    if(string.Empty == value)
			        this.SetColumnNull(RegionSchema.RegionDescription.FieldName);
			    else
			        this.RegionDescription = base.SetStringAsString(RegionSchema.RegionDescription.FieldName, value);
			}
		}
		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter RegionID
				{
					get
					{
							WhereParameter wp = new WhereParameter(RegionSchema.RegionID);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter RegionDescription
				{
					get
					{
							WhereParameter wp = new WhereParameter(RegionSchema.RegionDescription);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter RegionID
		    {
				get
		        {
					if(_RegionID_W == null)
	        	    {
						_RegionID_W = TearOff.RegionID;
					}
					return _RegionID_W;
				}
			}

			public WhereParameter RegionDescription
		    {
				get
		        {
					if(_RegionDescription_W == null)
	        	    {
						_RegionDescription_W = TearOff.RegionDescription;
					}
					return _RegionDescription_W;
				}
			}

			private WhereParameter _RegionID_W = null;
			private WhereParameter _RegionDescription_W = null;

			public void WhereClauseReset()
			{
				_RegionID_W = null;
				_RegionDescription_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private EasyObject _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter RegionID
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(RegionSchema.RegionID);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter RegionDescription
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(RegionSchema.RegionDescription);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter RegionID
		    {
				get
		        {
					if(_RegionID_W == null)
	        	    {
						_RegionID_W = TearOff.RegionID;
					}
					return _RegionID_W;
				}
			}

			public AggregateParameter RegionDescription
		    {
				get
		        {
					if(_RegionDescription_W == null)
	        	    {
						_RegionDescription_W = TearOff.RegionDescription;
					}
					return _RegionDescription_W;
				}
			}

			private AggregateParameter _RegionID_W = null;
			private AggregateParameter _RegionDescription_W = null;

			public void AggregateClauseReset()
			{
				_RegionID_W = null;
				_RegionDescription_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private EasyObject _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	}
}
