/*
'===============================================================================
'  Generated From - CSharp_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.2)

using System;
using System.Data;
using System.Data.Common;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace EasyObjectsQuickStart.BLL
{

	#region Schema

	public class OrdersSchema : NCI.EasyObjects.Schema
	{
		private static ArrayList _entries;
		public static SchemaItem OrderID = new SchemaItem("OrderID", DbType.Int32, true, false, false, true, true, false);
		public static SchemaItem CustomerID = new SchemaItem("CustomerID", DbType.StringFixedLength, SchemaItemJustify.None, 5, true, false, true, false);
		public static SchemaItem EmployeeID = new SchemaItem("EmployeeID", DbType.Int32, false, true, false, false, true, false);
		public static SchemaItem OrderDate = new SchemaItem("OrderDate", DbType.DateTime, false, true, false, false, false, false);
		public static SchemaItem RequiredDate = new SchemaItem("RequiredDate", DbType.DateTime, false, true, false, false, false, false);
		public static SchemaItem ShippedDate = new SchemaItem("ShippedDate", DbType.DateTime, false, true, false, false, false, false);
		public static SchemaItem ShipVia = new SchemaItem("ShipVia", DbType.Int32, false, true, false, false, true, false);
		public static SchemaItem Freight = new SchemaItem("Freight", DbType.Currency, false, true, false, false, false, true);
		public static SchemaItem ShipName = new SchemaItem("ShipName", DbType.String, SchemaItemJustify.None, 40, true, false, false, false);
		public static SchemaItem ShipAddress = new SchemaItem("ShipAddress", DbType.String, SchemaItemJustify.None, 60, true, false, false, false);
		public static SchemaItem ShipCity = new SchemaItem("ShipCity", DbType.String, SchemaItemJustify.None, 15, true, false, false, false);
		public static SchemaItem ShipRegion = new SchemaItem("ShipRegion", DbType.String, SchemaItemJustify.None, 15, true, false, false, false);
		public static SchemaItem ShipPostalCode = new SchemaItem("ShipPostalCode", DbType.String, SchemaItemJustify.None, 10, true, false, false, false);
		public static SchemaItem ShipCountry = new SchemaItem("ShipCountry", DbType.String, SchemaItemJustify.None, 15, true, false, false, false);

		public override ArrayList SchemaEntries
		{
			get
			{
				if (_entries == null )
				{
					_entries = new ArrayList();
					_entries.Add(OrdersSchema.OrderID);
					_entries.Add(OrdersSchema.CustomerID);
					_entries.Add(OrdersSchema.EmployeeID);
					_entries.Add(OrdersSchema.OrderDate);
					_entries.Add(OrdersSchema.RequiredDate);
					_entries.Add(OrdersSchema.ShippedDate);
					_entries.Add(OrdersSchema.ShipVia);
					_entries.Add(OrdersSchema.Freight);
					_entries.Add(OrdersSchema.ShipName);
					_entries.Add(OrdersSchema.ShipAddress);
					_entries.Add(OrdersSchema.ShipCity);
					_entries.Add(OrdersSchema.ShipRegion);
					_entries.Add(OrdersSchema.ShipPostalCode);
					_entries.Add(OrdersSchema.ShipCountry);
				}
				return _entries;
			}
		}
		
		public static bool HasAutoKey 
		{
			get { return true;	}
		}

		public static bool HasRowID 
		{
			get { return false;	}
		}
	}
	#endregion

	public abstract class _Orders : EasyObject
	{

		public _Orders()
		{
			OrdersSchema _schema = new OrdersSchema();
			this.SchemaEntries = _schema.SchemaEntries;
			this.SchemaGlobal = "dbo";
		}
		
		public override void FlushData() 	 
		{ 	 
			this._whereClause = null; 	 
			this._aggregateClause = null; 	 
			base.FlushData(); 	 
		}
			   
		/// <summary>
		/// Loads the business object with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="OrderID"></param>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadByPrimaryKey(int OrderID)
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					ListDictionary parameters = new ListDictionary();

					// Add in parameters
					parameters.Add(OrdersSchema.OrderID.FieldName, OrderID);

					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetOrders", parameters, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.OrderID.Value = OrderID;
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}
	
		/// <summary>
		/// Loads all records from the table.
		/// </summary>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadAll()
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetAllOrders", null, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		/// <summary>
		/// Adds a new record to the internal table.
		/// </summary>
		public override void AddNew()
		{
			base.AddNew();
			this.ApplyDefaults();
		}

		/// <summary>
		/// Apply any default values to columns
		/// </summary>
		protected override void ApplyDefaults()
		{
			this.Freight = 0;
		}

		protected override DbCommand GetInsertCommand(CommandType commandType)
		{	
			DbCommand dbCommand;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_AddOrders";
					dbCommand = db.GetStoredProcCommand(sqlCommand);

					db.AddParameter(dbCommand, "OrderID", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "OrderID", DataRowVersion.Default, Convert.DBNull);
					CreateParameters(db, dbCommand);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!item.IsComputed)
						{
							if ((item.IsAutoKey && this.IdentityInsert) || !item.IsAutoKey)
							{
								this.Query.AddInsertColumn(item);
							}
						}
					}
					dbCommand = this.Query.GetInsertCommandWrapper();

					dbCommand.Parameters.Clear();
					if (this.IdentityInsert)
					{
						db.AddInParameter(dbCommand, "OrderID", DbType.Int32, "OrderID", DataRowVersion.Default);
					}
					else
					{
						db.AddParameter(dbCommand, "OrderID", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "OrderID", DataRowVersion.Default, Convert.DBNull);
					}
					CreateParameters(db, dbCommand);

					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DbCommand GetUpdateCommand(CommandType commandType)
		{
            DbCommand dbCommand;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_UpdateOrders";
					dbCommand = db.GetStoredProcCommand(sqlCommand);

					db.AddInParameter(dbCommand, "OrderID", DbType.Int32, "OrderID", DataRowVersion.Current);
					CreateParameters(db, dbCommand);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!(item.IsAutoKey || item.IsComputed))
						{
							this.Query.AddUpdateColumn(item);
						}
					}

					this.Where.WhereClauseReset();
					this.Where.OrderID.Operator = WhereParameter.Operand.Equal;
					dbCommand = this.Query.GetUpdateCommandWrapper();

					dbCommand.Parameters.Clear();
					CreateParameters(db, dbCommand);
					db.AddInParameter(dbCommand, "OrderID", DbType.Int32, "OrderID", DataRowVersion.Current);
					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DbCommand GetDeleteCommand(CommandType commandType)
		{
            DbCommand dbCommand;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_DeleteOrders";
					dbCommand = db.GetStoredProcCommand(sqlCommand);
					db.AddInParameter(dbCommand, "OrderID", DbType.Int32, "OrderID", DataRowVersion.Current);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.OrderID.Operator = WhereParameter.Operand.Equal;
					dbCommand = this.Query.GetDeleteCommandWrapper();

					dbCommand.Parameters.Clear();
					db.AddInParameter(dbCommand, "OrderID", DbType.Int32, "OrderID", DataRowVersion.Current);
					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		private void CreateParameters(Database db, DbCommand dbCommand)
		{
			db.AddInParameter(dbCommand, "CustomerID", DbType.StringFixedLength, "CustomerID", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "EmployeeID", DbType.Int32, "EmployeeID", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "OrderDate", DbType.DateTime, "OrderDate", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "RequiredDate", DbType.DateTime, "RequiredDate", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "ShippedDate", DbType.DateTime, "ShippedDate", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "ShipVia", DbType.Int32, "ShipVia", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "Freight", DbType.Currency, "Freight", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "ShipName", DbType.String, "ShipName", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "ShipAddress", DbType.String, "ShipAddress", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "ShipCity", DbType.String, "ShipCity", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "ShipRegion", DbType.String, "ShipRegion", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "ShipPostalCode", DbType.String, "ShipPostalCode", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "ShipCountry", DbType.String, "ShipCountry", DataRowVersion.Current);
		}
		
		#region Properties
		public virtual int OrderID
		{
			get
			{
				return this.GetInteger(OrdersSchema.OrderID.FieldName);
	    	}
			set
			{
				this.SetInteger(OrdersSchema.OrderID.FieldName, value);
			}
		}
		public virtual string CustomerID
		{
			get
			{
				return this.GetString(OrdersSchema.CustomerID.FieldName);
	    	}
			set
			{
				this.SetString(OrdersSchema.CustomerID.FieldName, value);
			}
		}
		public virtual int EmployeeID
		{
			get
			{
				return this.GetInteger(OrdersSchema.EmployeeID.FieldName);
	    	}
			set
			{
				this.SetInteger(OrdersSchema.EmployeeID.FieldName, value);
			}
		}
		public virtual DateTime OrderDate
		{
			get
			{
				return this.GetDateTime(OrdersSchema.OrderDate.FieldName);
	    	}
			set
			{
				this.SetDateTime(OrdersSchema.OrderDate.FieldName, value);
			}
		}
		public virtual DateTime RequiredDate
		{
			get
			{
				return this.GetDateTime(OrdersSchema.RequiredDate.FieldName);
	    	}
			set
			{
				this.SetDateTime(OrdersSchema.RequiredDate.FieldName, value);
			}
		}
		public virtual DateTime ShippedDate
		{
			get
			{
				return this.GetDateTime(OrdersSchema.ShippedDate.FieldName);
	    	}
			set
			{
				this.SetDateTime(OrdersSchema.ShippedDate.FieldName, value);
			}
		}
		public virtual int ShipVia
		{
			get
			{
				return this.GetInteger(OrdersSchema.ShipVia.FieldName);
	    	}
			set
			{
				this.SetInteger(OrdersSchema.ShipVia.FieldName, value);
			}
		}
		public virtual decimal Freight
		{
			get
			{
				return this.GetDecimal(OrdersSchema.Freight.FieldName);
	    	}
			set
			{
				this.SetDecimal(OrdersSchema.Freight.FieldName, value);
			}
		}
		public virtual string ShipName
		{
			get
			{
				return this.GetString(OrdersSchema.ShipName.FieldName);
	    	}
			set
			{
				this.SetString(OrdersSchema.ShipName.FieldName, value);
			}
		}
		public virtual string ShipAddress
		{
			get
			{
				return this.GetString(OrdersSchema.ShipAddress.FieldName);
	    	}
			set
			{
				this.SetString(OrdersSchema.ShipAddress.FieldName, value);
			}
		}
		public virtual string ShipCity
		{
			get
			{
				return this.GetString(OrdersSchema.ShipCity.FieldName);
	    	}
			set
			{
				this.SetString(OrdersSchema.ShipCity.FieldName, value);
			}
		}
		public virtual string ShipRegion
		{
			get
			{
				return this.GetString(OrdersSchema.ShipRegion.FieldName);
	    	}
			set
			{
				this.SetString(OrdersSchema.ShipRegion.FieldName, value);
			}
		}
		public virtual string ShipPostalCode
		{
			get
			{
				return this.GetString(OrdersSchema.ShipPostalCode.FieldName);
	    	}
			set
			{
				this.SetString(OrdersSchema.ShipPostalCode.FieldName, value);
			}
		}
		public virtual string ShipCountry
		{
			get
			{
				return this.GetString(OrdersSchema.ShipCountry.FieldName);
	    	}
			set
			{
				this.SetString(OrdersSchema.ShipCountry.FieldName, value);
			}
		}

		public override string TableName
		{
			get { return "Orders"; }
		}
		
		#endregion		
		
		#region String Properties
		public virtual string s_OrderID
		{
			get
			{
			    return this.IsColumnNull(OrdersSchema.OrderID.FieldName) ? string.Empty : base.GetIntegerAsString(OrdersSchema.OrderID.FieldName);
			}
			set
			{
			    if(string.Empty == value)
			        this.SetColumnNull(OrdersSchema.OrderID.FieldName);
			    else
			        this.OrderID = base.SetIntegerAsString(OrdersSchema.OrderID.FieldName, value);
			}
		}
		public virtual string s_CustomerID
		{
			get
			{
			    return this.IsColumnNull(OrdersSchema.CustomerID.FieldName) ? string.Empty : base.GetStringAsString(OrdersSchema.CustomerID.FieldName);
			}
			set
			{
			    if(string.Empty == value)
			        this.SetColumnNull(OrdersSchema.CustomerID.FieldName);
			    else
			        this.CustomerID = base.SetStringAsString(OrdersSchema.CustomerID.FieldName, value);
			}
		}
		public virtual string s_EmployeeID
		{
			get
			{
			    return this.IsColumnNull(OrdersSchema.EmployeeID.FieldName) ? string.Empty : base.GetIntegerAsString(OrdersSchema.EmployeeID.FieldName);
			}
			set
			{
			    if(string.Empty == value)
			        this.SetColumnNull(OrdersSchema.EmployeeID.FieldName);
			    else
			        this.EmployeeID = base.SetIntegerAsString(OrdersSchema.EmployeeID.FieldName, value);
			}
		}
		public virtual string s_OrderDate
		{
			get
			{
			    return this.IsColumnNull(OrdersSchema.OrderDate.FieldName) ? string.Empty : base.GetDateTimeAsString(OrdersSchema.OrderDate.FieldName);
			}
			set
			{
			    if(string.Empty == value)
			        this.SetColumnNull(OrdersSchema.OrderDate.FieldName);
			    else
			        this.OrderDate = base.SetDateTimeAsString(OrdersSchema.OrderDate.FieldName, value);
			}
		}
		public virtual string s_RequiredDate
		{
			get
			{
			    return this.IsColumnNull(OrdersSchema.RequiredDate.FieldName) ? string.Empty : base.GetDateTimeAsString(OrdersSchema.RequiredDate.FieldName);
			}
			set
			{
			    if(string.Empty == value)
			        this.SetColumnNull(OrdersSchema.RequiredDate.FieldName);
			    else
			        this.RequiredDate = base.SetDateTimeAsString(OrdersSchema.RequiredDate.FieldName, value);
			}
		}
		public virtual string s_ShippedDate
		{
			get
			{
			    return this.IsColumnNull(OrdersSchema.ShippedDate.FieldName) ? string.Empty : base.GetDateTimeAsString(OrdersSchema.ShippedDate.FieldName);
			}
			set
			{
			    if(string.Empty == value)
			        this.SetColumnNull(OrdersSchema.ShippedDate.FieldName);
			    else
			        this.ShippedDate = base.SetDateTimeAsString(OrdersSchema.ShippedDate.FieldName, value);
			}
		}
		public virtual string s_ShipVia
		{
			get
			{
			    return this.IsColumnNull(OrdersSchema.ShipVia.FieldName) ? string.Empty : base.GetIntegerAsString(OrdersSchema.ShipVia.FieldName);
			}
			set
			{
			    if(string.Empty == value)
			        this.SetColumnNull(OrdersSchema.ShipVia.FieldName);
			    else
			        this.ShipVia = base.SetIntegerAsString(OrdersSchema.ShipVia.FieldName, value);
			}
		}
		public virtual string s_Freight
		{
			get
			{
			    return this.IsColumnNull(OrdersSchema.Freight.FieldName) ? string.Empty : base.GetDecimalAsString(OrdersSchema.Freight.FieldName);
			}
			set
			{
			    if(string.Empty == value)
			        this.SetColumnNull(OrdersSchema.Freight.FieldName);
			    else
			        this.Freight = base.SetDecimalAsString(OrdersSchema.Freight.FieldName, value);
			}
		}
		public virtual string s_ShipName
		{
			get
			{
			    return this.IsColumnNull(OrdersSchema.ShipName.FieldName) ? string.Empty : base.GetStringAsString(OrdersSchema.ShipName.FieldName);
			}
			set
			{
			    if(string.Empty == value)
			        this.SetColumnNull(OrdersSchema.ShipName.FieldName);
			    else
			        this.ShipName = base.SetStringAsString(OrdersSchema.ShipName.FieldName, value);
			}
		}
		public virtual string s_ShipAddress
		{
			get
			{
			    return this.IsColumnNull(OrdersSchema.ShipAddress.FieldName) ? string.Empty : base.GetStringAsString(OrdersSchema.ShipAddress.FieldName);
			}
			set
			{
			    if(string.Empty == value)
			        this.SetColumnNull(OrdersSchema.ShipAddress.FieldName);
			    else
			        this.ShipAddress = base.SetStringAsString(OrdersSchema.ShipAddress.FieldName, value);
			}
		}
		public virtual string s_ShipCity
		{
			get
			{
			    return this.IsColumnNull(OrdersSchema.ShipCity.FieldName) ? string.Empty : base.GetStringAsString(OrdersSchema.ShipCity.FieldName);
			}
			set
			{
			    if(string.Empty == value)
			        this.SetColumnNull(OrdersSchema.ShipCity.FieldName);
			    else
			        this.ShipCity = base.SetStringAsString(OrdersSchema.ShipCity.FieldName, value);
			}
		}
		public virtual string s_ShipRegion
		{
			get
			{
			    return this.IsColumnNull(OrdersSchema.ShipRegion.FieldName) ? string.Empty : base.GetStringAsString(OrdersSchema.ShipRegion.FieldName);
			}
			set
			{
			    if(string.Empty == value)
			        this.SetColumnNull(OrdersSchema.ShipRegion.FieldName);
			    else
			        this.ShipRegion = base.SetStringAsString(OrdersSchema.ShipRegion.FieldName, value);
			}
		}
		public virtual string s_ShipPostalCode
		{
			get
			{
			    return this.IsColumnNull(OrdersSchema.ShipPostalCode.FieldName) ? string.Empty : base.GetStringAsString(OrdersSchema.ShipPostalCode.FieldName);
			}
			set
			{
			    if(string.Empty == value)
			        this.SetColumnNull(OrdersSchema.ShipPostalCode.FieldName);
			    else
			        this.ShipPostalCode = base.SetStringAsString(OrdersSchema.ShipPostalCode.FieldName, value);
			}
		}
		public virtual string s_ShipCountry
		{
			get
			{
			    return this.IsColumnNull(OrdersSchema.ShipCountry.FieldName) ? string.Empty : base.GetStringAsString(OrdersSchema.ShipCountry.FieldName);
			}
			set
			{
			    if(string.Empty == value)
			        this.SetColumnNull(OrdersSchema.ShipCountry.FieldName);
			    else
			        this.ShipCountry = base.SetStringAsString(OrdersSchema.ShipCountry.FieldName, value);
			}
		}
		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter OrderID
				{
					get
					{
							WhereParameter wp = new WhereParameter(OrdersSchema.OrderID);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter CustomerID
				{
					get
					{
							WhereParameter wp = new WhereParameter(OrdersSchema.CustomerID);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter EmployeeID
				{
					get
					{
							WhereParameter wp = new WhereParameter(OrdersSchema.EmployeeID);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter OrderDate
				{
					get
					{
							WhereParameter wp = new WhereParameter(OrdersSchema.OrderDate);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter RequiredDate
				{
					get
					{
							WhereParameter wp = new WhereParameter(OrdersSchema.RequiredDate);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter ShippedDate
				{
					get
					{
							WhereParameter wp = new WhereParameter(OrdersSchema.ShippedDate);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter ShipVia
				{
					get
					{
							WhereParameter wp = new WhereParameter(OrdersSchema.ShipVia);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Freight
				{
					get
					{
							WhereParameter wp = new WhereParameter(OrdersSchema.Freight);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter ShipName
				{
					get
					{
							WhereParameter wp = new WhereParameter(OrdersSchema.ShipName);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter ShipAddress
				{
					get
					{
							WhereParameter wp = new WhereParameter(OrdersSchema.ShipAddress);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter ShipCity
				{
					get
					{
							WhereParameter wp = new WhereParameter(OrdersSchema.ShipCity);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter ShipRegion
				{
					get
					{
							WhereParameter wp = new WhereParameter(OrdersSchema.ShipRegion);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter ShipPostalCode
				{
					get
					{
							WhereParameter wp = new WhereParameter(OrdersSchema.ShipPostalCode);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter ShipCountry
				{
					get
					{
							WhereParameter wp = new WhereParameter(OrdersSchema.ShipCountry);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter OrderID
		    {
				get
		        {
					if(_OrderID_W == null)
	        	    {
						_OrderID_W = TearOff.OrderID;
					}
					return _OrderID_W;
				}
			}

			public WhereParameter CustomerID
		    {
				get
		        {
					if(_CustomerID_W == null)
	        	    {
						_CustomerID_W = TearOff.CustomerID;
					}
					return _CustomerID_W;
				}
			}

			public WhereParameter EmployeeID
		    {
				get
		        {
					if(_EmployeeID_W == null)
	        	    {
						_EmployeeID_W = TearOff.EmployeeID;
					}
					return _EmployeeID_W;
				}
			}

			public WhereParameter OrderDate
		    {
				get
		        {
					if(_OrderDate_W == null)
	        	    {
						_OrderDate_W = TearOff.OrderDate;
					}
					return _OrderDate_W;
				}
			}

			public WhereParameter RequiredDate
		    {
				get
		        {
					if(_RequiredDate_W == null)
	        	    {
						_RequiredDate_W = TearOff.RequiredDate;
					}
					return _RequiredDate_W;
				}
			}

			public WhereParameter ShippedDate
		    {
				get
		        {
					if(_ShippedDate_W == null)
	        	    {
						_ShippedDate_W = TearOff.ShippedDate;
					}
					return _ShippedDate_W;
				}
			}

			public WhereParameter ShipVia
		    {
				get
		        {
					if(_ShipVia_W == null)
	        	    {
						_ShipVia_W = TearOff.ShipVia;
					}
					return _ShipVia_W;
				}
			}

			public WhereParameter Freight
		    {
				get
		        {
					if(_Freight_W == null)
	        	    {
						_Freight_W = TearOff.Freight;
					}
					return _Freight_W;
				}
			}

			public WhereParameter ShipName
		    {
				get
		        {
					if(_ShipName_W == null)
	        	    {
						_ShipName_W = TearOff.ShipName;
					}
					return _ShipName_W;
				}
			}

			public WhereParameter ShipAddress
		    {
				get
		        {
					if(_ShipAddress_W == null)
	        	    {
						_ShipAddress_W = TearOff.ShipAddress;
					}
					return _ShipAddress_W;
				}
			}

			public WhereParameter ShipCity
		    {
				get
		        {
					if(_ShipCity_W == null)
	        	    {
						_ShipCity_W = TearOff.ShipCity;
					}
					return _ShipCity_W;
				}
			}

			public WhereParameter ShipRegion
		    {
				get
		        {
					if(_ShipRegion_W == null)
	        	    {
						_ShipRegion_W = TearOff.ShipRegion;
					}
					return _ShipRegion_W;
				}
			}

			public WhereParameter ShipPostalCode
		    {
				get
		        {
					if(_ShipPostalCode_W == null)
	        	    {
						_ShipPostalCode_W = TearOff.ShipPostalCode;
					}
					return _ShipPostalCode_W;
				}
			}

			public WhereParameter ShipCountry
		    {
				get
		        {
					if(_ShipCountry_W == null)
	        	    {
						_ShipCountry_W = TearOff.ShipCountry;
					}
					return _ShipCountry_W;
				}
			}

			private WhereParameter _OrderID_W = null;
			private WhereParameter _CustomerID_W = null;
			private WhereParameter _EmployeeID_W = null;
			private WhereParameter _OrderDate_W = null;
			private WhereParameter _RequiredDate_W = null;
			private WhereParameter _ShippedDate_W = null;
			private WhereParameter _ShipVia_W = null;
			private WhereParameter _Freight_W = null;
			private WhereParameter _ShipName_W = null;
			private WhereParameter _ShipAddress_W = null;
			private WhereParameter _ShipCity_W = null;
			private WhereParameter _ShipRegion_W = null;
			private WhereParameter _ShipPostalCode_W = null;
			private WhereParameter _ShipCountry_W = null;

			public void WhereClauseReset()
			{
				_OrderID_W = null;
				_CustomerID_W = null;
				_EmployeeID_W = null;
				_OrderDate_W = null;
				_RequiredDate_W = null;
				_ShippedDate_W = null;
				_ShipVia_W = null;
				_Freight_W = null;
				_ShipName_W = null;
				_ShipAddress_W = null;
				_ShipCity_W = null;
				_ShipRegion_W = null;
				_ShipPostalCode_W = null;
				_ShipCountry_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private EasyObject _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter OrderID
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(OrdersSchema.OrderID);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter CustomerID
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(OrdersSchema.CustomerID);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter EmployeeID
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(OrdersSchema.EmployeeID);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter OrderDate
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(OrdersSchema.OrderDate);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter RequiredDate
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(OrdersSchema.RequiredDate);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter ShippedDate
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(OrdersSchema.ShippedDate);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter ShipVia
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(OrdersSchema.ShipVia);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Freight
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(OrdersSchema.Freight);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter ShipName
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(OrdersSchema.ShipName);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter ShipAddress
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(OrdersSchema.ShipAddress);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter ShipCity
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(OrdersSchema.ShipCity);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter ShipRegion
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(OrdersSchema.ShipRegion);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter ShipPostalCode
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(OrdersSchema.ShipPostalCode);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter ShipCountry
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(OrdersSchema.ShipCountry);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter OrderID
		    {
				get
		        {
					if(_OrderID_W == null)
	        	    {
						_OrderID_W = TearOff.OrderID;
					}
					return _OrderID_W;
				}
			}

			public AggregateParameter CustomerID
		    {
				get
		        {
					if(_CustomerID_W == null)
	        	    {
						_CustomerID_W = TearOff.CustomerID;
					}
					return _CustomerID_W;
				}
			}

			public AggregateParameter EmployeeID
		    {
				get
		        {
					if(_EmployeeID_W == null)
	        	    {
						_EmployeeID_W = TearOff.EmployeeID;
					}
					return _EmployeeID_W;
				}
			}

			public AggregateParameter OrderDate
		    {
				get
		        {
					if(_OrderDate_W == null)
	        	    {
						_OrderDate_W = TearOff.OrderDate;
					}
					return _OrderDate_W;
				}
			}

			public AggregateParameter RequiredDate
		    {
				get
		        {
					if(_RequiredDate_W == null)
	        	    {
						_RequiredDate_W = TearOff.RequiredDate;
					}
					return _RequiredDate_W;
				}
			}

			public AggregateParameter ShippedDate
		    {
				get
		        {
					if(_ShippedDate_W == null)
	        	    {
						_ShippedDate_W = TearOff.ShippedDate;
					}
					return _ShippedDate_W;
				}
			}

			public AggregateParameter ShipVia
		    {
				get
		        {
					if(_ShipVia_W == null)
	        	    {
						_ShipVia_W = TearOff.ShipVia;
					}
					return _ShipVia_W;
				}
			}

			public AggregateParameter Freight
		    {
				get
		        {
					if(_Freight_W == null)
	        	    {
						_Freight_W = TearOff.Freight;
					}
					return _Freight_W;
				}
			}

			public AggregateParameter ShipName
		    {
				get
		        {
					if(_ShipName_W == null)
	        	    {
						_ShipName_W = TearOff.ShipName;
					}
					return _ShipName_W;
				}
			}

			public AggregateParameter ShipAddress
		    {
				get
		        {
					if(_ShipAddress_W == null)
	        	    {
						_ShipAddress_W = TearOff.ShipAddress;
					}
					return _ShipAddress_W;
				}
			}

			public AggregateParameter ShipCity
		    {
				get
		        {
					if(_ShipCity_W == null)
	        	    {
						_ShipCity_W = TearOff.ShipCity;
					}
					return _ShipCity_W;
				}
			}

			public AggregateParameter ShipRegion
		    {
				get
		        {
					if(_ShipRegion_W == null)
	        	    {
						_ShipRegion_W = TearOff.ShipRegion;
					}
					return _ShipRegion_W;
				}
			}

			public AggregateParameter ShipPostalCode
		    {
				get
		        {
					if(_ShipPostalCode_W == null)
	        	    {
						_ShipPostalCode_W = TearOff.ShipPostalCode;
					}
					return _ShipPostalCode_W;
				}
			}

			public AggregateParameter ShipCountry
		    {
				get
		        {
					if(_ShipCountry_W == null)
	        	    {
						_ShipCountry_W = TearOff.ShipCountry;
					}
					return _ShipCountry_W;
				}
			}

			private AggregateParameter _OrderID_W = null;
			private AggregateParameter _CustomerID_W = null;
			private AggregateParameter _EmployeeID_W = null;
			private AggregateParameter _OrderDate_W = null;
			private AggregateParameter _RequiredDate_W = null;
			private AggregateParameter _ShippedDate_W = null;
			private AggregateParameter _ShipVia_W = null;
			private AggregateParameter _Freight_W = null;
			private AggregateParameter _ShipName_W = null;
			private AggregateParameter _ShipAddress_W = null;
			private AggregateParameter _ShipCity_W = null;
			private AggregateParameter _ShipRegion_W = null;
			private AggregateParameter _ShipPostalCode_W = null;
			private AggregateParameter _ShipCountry_W = null;

			public void AggregateClauseReset()
			{
				_OrderID_W = null;
				_CustomerID_W = null;
				_EmployeeID_W = null;
				_OrderDate_W = null;
				_RequiredDate_W = null;
				_ShippedDate_W = null;
				_ShipVia_W = null;
				_Freight_W = null;
				_ShipName_W = null;
				_ShipAddress_W = null;
				_ShipCity_W = null;
				_ShipRegion_W = null;
				_ShipPostalCode_W = null;
				_ShipCountry_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private EasyObject _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	}
}
