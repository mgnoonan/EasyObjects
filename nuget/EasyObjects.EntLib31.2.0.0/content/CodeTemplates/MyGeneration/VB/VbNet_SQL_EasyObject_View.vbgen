##|TYPE Template
##|UNIQUEID 5ebcc71d-2195-4ddb-9c25-72151b82ac0a
##|TITLE EasyObjects 2 VbNet Business View
##|NAMESPACE EasyObject.VbNet
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE VB.Net
##|COMMENTS_BEGIN
From a View, MS SQL, MS Access, Firebird, PostgreSQL, Oracle
##|COMMENTS_END
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstViews

Sub setup()

	If Not input.Contains("lstViews") Or Not input.Contains("txtPath") Then

	If context.Objects.ContainsKey("DnpUtils") Then
		DnpUtils.ReadInputFromCache(context)
	End if

		ui.Title = "Generate VB.NET EasyObject class from a View."
		ui.Width  = 330
		ui.Height = 480

		' Grab default output path
		Dim sOutputPath
		sOutputPath = ""
		If input.Contains("defaultOutputPath") Then 
			sOutputPath = input.Item("defaultOutputPath")
		End If

		ui.AddLabel "lblPath", "Output file path: ",  "Select the output path."
		ui.AddTextBox "txtPath", sOutputPath, "Select the Output Path."
		ui.AddFilePicker "btnPath", "Select Path", "Select the Output Path.", "txtPath", true
		
		ui.AddLabel "lblNamespace", "Namespace: ",  "Provide your objects namespace."
		ui.AddTextBox "txtNamespace", "", "Provide your objects namespace."		

		' List Databases in a ComboBox
		ui.AddLabel "lblDatabases", "Select a database:", "Select a database in the dropdown below."
		Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.")

		' List Tables in a listbox
		ui.AddLabel "lblViews", "Select views:", "Select views from the listbox below."
		Set lstViews = ui.AddListBox ("lstViews", "Select views:")
		'lstViews.IsMultiSelect = false
		lstViews.Height = 120
		
		Set prefix = ui.AddCheckBox("prefix", "Prefix class with underscore?", false, "If checked, the file on disk will begin with an underscore")
		
		' Attach the onchange event to the cmbDatabases control.
		setupDatabaseDropdown cmbDatabases
		cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"
		
		ui.ShowGUI = true
	Else 
		ui.ShowGUI = false
	End if

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases

	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindViews cmbDatabases.SelectedValue
	End If
End Sub

Sub bindViews(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstViews.BindData(db.Views)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindViews cmbDatabases.SelectedText
End Sub
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------------------------------------------
' Copyright 2005 by Noonan Consulting Inc.
' All Rights Reserved 
'
' Permission to use, copy, modify, and distribute this software and its 
' documentation for any purpose and without fee is hereby granted, 
' provided that the above copyright notice appear in all copies and that 
' both that copyright notice and this permission notice appear in 
' supporting documentation. 
'
' NCI DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
' SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
' AND FITNESS, IN NO EVENT SHALL NCI BE LIABLE FOR ANY 
' SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
' WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
' WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER 
' TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE 
' OR PERFORMANCE OF THIS SOFTWARE. 
'------------------------------------------------------------------------------
' VbNet_SQL_EasyObject_View.vbgen
' Last Update : 12/07/2005
'------------------------------------------------------------------------------

If context.Objects.ContainsKey("DnpUtils") Then
	DnpUtils.SaveInputToCache(context)
End if

Dim bFirst
Dim name
Dim pname
Dim objView
Dim objColumn
Dim viewNames
Dim databaseName
Dim database
Dim namespace
Dim classPrefix
Dim prefix

Dim IDbCommand
Dim IDataParameter
Dim ParameterPrefix

prefix = input.Item("prefix")

If input.Item("prefix") = True Then 
	classPrefix = "_"
Else
	classPrefix = ""
End IF

' Set the Language for our column data types
MyMeta.Language = "VB.NET"

' Grab the namespace
namespace = input.Item("txtNamespace")

' Grab the choices the user made in our UI Script (see Interface Code tab)
Set viewNames = input.Item("lstViews")

databaseName  = input.Item("cmbDatabase")
Set database = MyMeta.Databases(databaseName)

' Loop through the tables the user selected and generate the business entities
For intLp = 0 To viewNames.Count - 1

	Set objView = database.Views(viewNames.item(intLp))

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Now we have the table that we desire to build a Business Object From, let us begin.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%>
' Generated by MyGeneration Version # (<%= input.Item("__version") %>)

Imports System
Imports System.Data
Imports System.Collections
Imports System.Collections.Specialized
 
Imports Microsoft.Practices.EnterpriseLibrary.Data
Imports NCI.EasyObjects

<%
If Len(namespace) > 1 Then
	output.writeLn vbCrLf & "NameSpace " & namespace
End if 
%>

	#Region " Schema "

	Public Class <%= TrimSpaces(objView.Alias) %>Schema
		Inherits NCI.EasyObjects.Schema

		Private Shared _entries As ArrayList
<%		output.tabLevel = 2

		' List all fields as member variables
		For Each objColumn In objView.Columns
			name = objColumn.Name
			alias = GetAlias(objColumn)
			
			Select Case objColumn.LanguageType
			Case "String"
				'output.autoTabLn "Public Shared " & alias & " As New SchemaItem(""" & name & """, " & objColumn.DbTargetType & ", SchemaItemJustify.None, " & objColumn.CharacterMaxLength & ")"
				output.autoTabLn "Public Shared " & alias & " As New SchemaItem(""" & name & """, " & objColumn.DbTargetType & ", SchemaItemJustify.None, " & objColumn.CharacterMaxLength & ", " & ConvertToBoolean(objColumn.IsNullable) & ", " & ConvertToBoolean(objColumn.IsInPrimaryKey) & ", " & ConvertToBoolean(objColumn.IsInForeignKey) & ")"
			Case Else
				'output.autoTab "Public Shared " & alias & " As New SchemaItem(""" & name & """, " & objColumn.DbTargetType
				output.autoTabLn "Public Shared " & alias & " As New SchemaItem(""" & name & """, " & objColumn.DbTargetType & ", " & ConvertToBoolean(objColumn.IsAutoKey) & ", " & ConvertToBoolean(objColumn.IsNullable) & ", " & ConvertToBoolean(objColumn.IsComputed) & ", " & ConvertToBoolean(objColumn.IsInPrimaryKey) & ", " & ConvertToBoolean(objColumn.IsInForeignKey) & ")"
			End Select
		Next
%>
		Public Overrides ReadOnly Property SchemaEntries() As ArrayList
			Get 
				If _entries Is Nothing Then
					_entries = new ArrayList()
<%	output.tabLevel = 5

	' Load all fields into the ArrayList
	For Each objColumn In objView.Columns			
		name = GetName(objColumn)
		alias = GetAlias(objColumn)
		output.autoTabLn "_entries.Add(" & TrimSpaces(objView.Alias) & "Schema." & alias & ")"
	Next
%>				End If
				Return _entries
			End Get
		End Property
	End Class
	#End Region

Public Class <%= classPrefix & TrimSpaces(objView.Alias) %>
	Inherits EasyObject
	
		Public Sub New()
			Dim _schema As <%= TrimSpaces(objView.Alias) %>Schema = New <%= TrimSpaces(objView.Alias) %>Schema()
			Me.SchemaEntries = _schema.SchemaEntries
			<% output.write "Me.SchemaGlobal = """ + objView.Schema + """" %>
		End Sub
	
		'=================================================================
		'  	public Function LoadAll() As Boolean
		'=================================================================
		'  Loads all of the records in the database, and sets the currentRow to the first row
		'=================================================================
		Public Function LoadAll() As Boolean
			Return MyBase.Query.Load()
		End Function
		
		Public Overrides Sub FlushData()
			Me._whereClause = Nothing
			Me._aggregateClause = Nothing
			MyBase.FlushData()
		End Sub
		
		#Region " Properties "
<%
	Dim langType
	Dim GetSet
	Dim readOnly
	
	For Each objColumn in objView.Columns

		langType = GetFullType(objColumn)
		If langType = "Byte()" Then GetSet = "ByteArray" Else GetSet = langType End If
		
		If (Not objColumn.DataTypeName = "timestamp" And Not objColumn.IsComputed) Or MyMeta.DbTarget = "Npgsql" Then
			readOnly = "" 
		Else 
			readOnly = "ReadOnly "
		End If
		
		name = GetName(objColumn)
        alias = GetAlias(objColumn)		
		
		output.write "		Public Overridable " & readOnly & "Property " & alias & " As " & langType & vbCrLf 
		output.write "			Get"  & vbCrLf 
		output.write "				Return MyBase.Get" & GetSet & "(" & TrimSpaces(objView.Alias) & "Schema." & alias & ".FieldName)" & vbCrLf 
		output.write "			End Get"  & vbCrLf 
		If (Not objColumn.DataTypeName = "timestamp" And Not objColumn.IsComputed) Or MyMeta.DbTarget = "Npgsql" Then
			output.write "			Set(ByVal Value As " & langType & ")"  & vbCrLf 
			output.write "				MyBase.Set" & GetSet & "(" & TrimSpaces(objView.Alias) & "Schema." & alias & ".FieldName, Value)" & vbCrLf 
			output.write "			End Set"  & vbCrLf 
		End If	
		output.write "		End Property"  & vbCrLf & vbCrLf 

	Next
%>
		Public Overrides ReadOnly Property TableName As String
			Get 
				Return "<%= objView.Name %>"
			End Get
		End Property
		
		#End Region		
		
		#Region " String Properties "
<% output.writeLn ""
	For Each objColumn in objView.Columns

		langType = objColumn.LanguageType
    	If Not langType = "Object" And Not langType = "Byte()" Then
		
			If (Not objColumn.DataTypeName = "timestamp" And Not objColumn.IsComputed) Or MyMeta.DbTarget = "Npgsql" Then
				readOnly = "" 
			Else 
				readOnly = "ReadOnly "
			End If
		
			name = GetName(objColumn)
			alias   = GetAlias(objColumn)		
			
			output.write "		Public Overridable " & readOnly & "Property s_" & alias & " As String" & vbCrLf 
			output.write "			Get"  & vbCrLf 
			output.write "				If Me.IsColumnNull(" & TrimSpaces(objView.Alias) & "Schema." & alias & ".FieldName) Then" & vbCrLf 
			output.write "					Return String.Empty" & vbCrLf 
			output.write "				Else" & vbCrLf 
			output.write "					Return MyBase.Get" & langType & "AsString(" & TrimSpaces(objView.Alias) & "Schema." & alias & ".FieldName)" & vbCrLf
			output.write "				End If" & vbCrLf 
			output.write "			End Get"  & vbCrLf 
			If (Not objColumn.DataTypeName = "timestamp" And Not objColumn.IsComputed) Or MyMeta.DbTarget = "Npgsql" Then
				output.write "			Set(ByVal Value As String)" & vbCrLf 
				output.write "				If String.Empty = value Then" & vbCrLf
				output.write "					Me.SetColumnNull(" & TrimSpaces(objView.Alias) & "Schema." & alias & ".FieldName)" & vbCrLf 
				output.write "				Else" & vbCrLf 
				output.write "					Me." & alias & " = MyBase.Set" & langType & "AsString(" & TrimSpaces(objView.Alias) & "Schema." & alias & ".FieldName, Value)" & vbCrLf 
				output.write "				End If" & vbCrLf 				
				output.write "			End Set"  & vbCrLf 
			End If	
			output.write "		End Property"  & vbCrLf & vbCrLf 
			
		End If

	Next
%>
		#End Region		
	
		#Region " Where Clause "
		Public Class WhereClause

			Public Sub New(ByVal entity As EasyObject)
				Me._entity = entity
			End Sub
			
			Public ReadOnly Property TearOff() As TearOffWhereParameter
				Get 
					If _tearOff Is Nothing Then
						_tearOff = New TearOffWhereParameter(Me)
					End If
 
					Return _tearOff
				End Get
			End Property

			#Region " TearOff's "
			Public Class TearOffWhereParameter
			
				Public Sub New(ByVal clause As WhereClause)
					Me._clause = clause
				End Sub
				
			<% output.writeLn ""
				Dim fldName
				
				For Each objColumn in objView.Columns
					
					name   = GetAlias(objColumn)		
				
					fldName = "_" & name & "_W"
					
					output.write "		Public ReadOnly Property " & name & "() As WhereParameter" & vbCrLf 
					output.write "			Get" & vbCrLf 
					output.write "				Dim where As WhereParameter = New WhereParameter(" & TrimSpaces(objView.Alias) & "Schema." & name & ")" & vbCrLf
					output.write "				Me._clause._entity.Query.AddWhereParameter(where)" & vbCrLf 
					output.write "				Return where" & vbCrLf 
					output.write "			End Get" & vbCrLf 
					output.write "		End Property" & vbCrLf & vbCrLf 
				Next
				%>
				Private _clause as WhereClause
			End Class
			#End Region	
		<% output.writeLn ""
		
				For Each objColumn in objView.Columns
				
					name = GetAlias(objColumn)
					
					fldName = "_" & name & "_W"			
					
					output.write "		Public ReadOnly Property " & name & "() As WhereParameter " & vbCrLf 
					output.write "			Get" & vbCrLf 
					output.write "				If " & fldName & " Is Nothing Then" & vbCrLf 
					output.write "					" & fldName & " = TearOff." & name & vbCrLf
					output.write "				End If" & vbCrLf 
					output.write "				Return " & fldName & vbCrLf 
					output.write "			End Get" & vbCrLf 
					output.write "		End Property" & vbCrLf & vbCrLf
				Next
				
				For Each objColumn in objView.Columns
					name = "_" & GetAlias(objColumn) & "_W"
					output.write  "		Private " & name & " As WhereParameter = Nothing" & vbCrLf 
				Next
				
				output.write vbCrLf
				output.write "		Public Sub WhereClauseReset()" & vbCrLf & vbCrLf 
				For Each objColumn in objView.Columns
					name = "_" & GetAlias(objColumn) & "_W"
					output.write  "		" & name & " = Nothing" & vbCrLf 
				Next
				output.write"			Me._entity.Query.FlushWhereParameters()" & vbCrLf & vbCrLf 
				output.write"		End Sub" & vbCrLf 
			%>	
			Private _entity As EasyObject
			Private _tearOff As TearOffWhereParameter
		End Class	

		Public ReadOnly Property Where() As WhereClause
			Get
				If _whereClause Is Nothing Then
					_whereClause = New WhereClause(Me)
				End If
		
				Return _whereClause
			End Get
		End Property
		
		Private _whereClause As WhereClause = Nothing	
	#End Region	

		#Region " Aggregate Clause "
		Public Class AggregateClause

			Public Sub New(ByVal entity As EasyObject)
				Me._entity = entity
			End Sub
			
			Public ReadOnly Property TearOff() As TearOffAggregateParameter
				Get 
					If _tearOff Is Nothing Then
						_tearOff = New TearOffAggregateParameter(Me)
					End If
 
					Return _tearOff
				End Get
			End Property

			#Region " TearOff's "
			Public Class TearOffAggregateParameter
			
				Public Sub New(ByVal clause As AggregateClause)
					Me._clause = clause
				End Sub
				
			<% output.writeLn ""
				
				For Each objColumn in objView.Columns
					
					name   = GetAlias(objColumn)		
				
					fldName = "_" & name & "_W"
					
					output.write "		Public ReadOnly Property " & name & "() As AggregateParameter" & vbCrLf 
					output.write "			Get" & vbCrLf 
					output.write "				Dim aggregate As AggregateParameter = New AggregateParameter(" & TrimSpaces(objView.Alias) & "Schema." & name & ")" & vbCrLf
					output.write "				Me._clause._entity.Query.AddAggregateParameter(aggregate)" & vbCrLf 
					output.write "				Return aggregate" & vbCrLf 
					output.write "			End Get" & vbCrLf 
					output.write "		End Property" & vbCrLf & vbCrLf 
				Next
				%>
				Private _clause as AggregateClause
			End Class
			#End Region	
		<% output.writeLn ""
		
				For Each objColumn in objView.Columns
				
					name = GetAlias(objColumn)
					
					fldName = "_" & name & "_W"			
					
					output.write "		Public ReadOnly Property " & name & "() As AggregateParameter " & vbCrLf 
					output.write "			Get" & vbCrLf 
					output.write "				If " & fldName & " Is Nothing Then" & vbCrLf 
					output.write "					" & fldName & " = TearOff." & name & vbCrLf
					output.write "				End If" & vbCrLf 
					output.write "				Return " & fldName & vbCrLf 
					output.write "			End Get" & vbCrLf 
					output.write "		End Property" & vbCrLf & vbCrLf
				Next
				
				For Each objColumn in objView.Columns
					name = "_" & GetAlias(objColumn) & "_W"
					output.write  "		Private " & name & " As AggregateParameter = Nothing" & vbCrLf 
				Next
				
				output.write vbCrLf
				output.write "		Public Sub AggregateClauseReset()" & vbCrLf & vbCrLf 
				For Each objColumn in objView.Columns
					name = "_" & GetAlias(objColumn) & "_W"
					output.write  "		" & name & " = Nothing" & vbCrLf 
				Next
				output.write"			Me._entity.Query.FlushAggregateParameters()" & vbCrLf & vbCrLf 
				output.write"		End Sub" & vbCrLf 
			%>	
			Private _entity As EasyObject
			Private _tearOff As TearOffAggregateParameter
		End Class	

		Public ReadOnly Property Aggregate() As AggregateClause
			Get
				If _aggregateClause Is Nothing Then
					_aggregateClause = New AggregateClause(Me)
				End If
		
				Return _aggregateClause
			End Get
		End Property
		
		Private _aggregateClause As AggregateClause = Nothing	
	#End Region	
	
End Class
<%
If Len(namespace) > 1 Then
	output.writeLn vbCrLf & "End NameSpace"
End if 
%>
<% 
	' Save the output file for this Table
	Dim filename
	filename = input.item("txtPath")

	Dim length
	Dim pos
	lenth = Len(filename)
	pos = InStrRev(filename, "\") 

	If Not pos = lenth Then
		filename = filename & "\"
	End If
	
	If prefix = True Then 
		filename = filename & "_" & TrimSpaces(objView.Alias) & ".vb"
	Else 
		filename = filename & TrimSpaces(objView.Alias) & ".vb"
	End If	

	output.save filename, false
	buffer = buffer & output.text
	output.clear
Next '  tableName
	
	output.write buffer
 %>

<% 
'===========================================================================
' These are support routines called by the above scirpt
'===========================================================================
Function GetAlias(objColumn)
	Dim name
	name = TrimSpaces(objColumn.Alias)
	GetAlias = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function GetName(objColumn)
	Dim name
	name = objColumn.Name
	GetName = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function TrimSpaces(str)

	Dim tname
	Dim name
	Dim char
	Dim l

	name = ""
	tname = str
	l = Len(tname)

	For j = 1 To l
		char = Mid(tname, j, 1)
		If Not char = " " Then
			name = name & char
		End If
	Next

	TrimSpaces = name
End Function

Function GetFullType(objColumn)

	Select Case LCase(objColumn.LanguageType)
		Case "string"
			GetFullType = "String"
		Case "int"
			GetFullType = "Integer"
		Case "short"
			GetFullType = "Integer"
		Case "decimal"
			GetFullType = "Decimal"
		Case "datetime"
			GetFullType = "DateTime"
		Case "byte[]"
			GetFullType = "Byte"
		Case "bool"
			GetFullType = "Boolean"
		Case "float"
			GetFullType = "Double"
		Case Else
			GetFullType = objColumn.LanguageType
	End Select
	
End Function

Function ConvertToBoolean(test)
	
	If test Then
		ConvertToBoolean = "True"
	Else
		ConvertToBoolean = "False"
	End If
	
	
End Function
%>
##|BODY_END
