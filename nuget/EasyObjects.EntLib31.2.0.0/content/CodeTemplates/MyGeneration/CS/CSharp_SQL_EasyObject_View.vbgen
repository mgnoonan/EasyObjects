##|TYPE Template
##|UNIQUEID 2917a09d-b08a-4a9d-8f8e-f1b5a5bb8bd9
##|TITLE EasyObjects 2 C# Business View
##|NAMESPACE EasyObject.C#
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|COMMENTS_BEGIN
From a View, MS SQL, MS Access, Firebird, PostgreSQL, Oracle
##|COMMENTS_END
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstViews

Sub setup()

	If Not input.Contains("lstViews") Or Not input.Contains("txtPath") Then

	If context.Objects.ContainsKey("DnpUtils") Then
		DnpUtils.ReadInputFromCache(context)
	End if

		ui.Title = "Generate C# EasyObject class from a View."
		ui.Width  = 330
		ui.Height = 480

		' Grab default output path
		Dim sOutputPath
		sOutputPath = ""
		If input.Contains("defaultOutputPath") Then 
			sOutputPath = input.Item("defaultOutputPath")
		End If

		ui.AddLabel "lblPath", "Output file path: ",  "Select the output path."
		ui.AddTextBox "txtPath", sOutputPath, "Select the Output Path."
		ui.AddFilePicker "btnPath", "Select Path", "Select the Output Path.", "txtPath", true
		
		ui.AddLabel "lblNamespace", "Namespace: ",  "Provide your objects namespace."
		ui.AddTextBox "txtNamespace", "Your.Namespace", "Provide your objects namespace."		

		' List Databases in a ComboBox
		ui.AddLabel "lblDatabases", "Select a database:", "Select a database in the dropdown below."
		Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.")

		' List Tables in a listbox
		ui.AddLabel "lblViews", "Select views:", "Select views from the listbox below."
		Set lstViews = ui.AddListBox ("lstViews", "Select views:")
		'lstViews.IsMultiSelect = false
		lstViews.Height = 120
		
		Set prefix = ui.AddCheckBox("prefix", "Prefix class with underscore?", false, "If checked, the file on disk will begin with an underscore")
		
		' Attach the onchange event to the cmbDatabases control.
		setupDatabaseDropdown cmbDatabases
		cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"
		
		ui.ShowGUI = true
	Else 
		ui.ShowGUI = false
	End if

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases

	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindViews cmbDatabases.SelectedValue
	End If
End Sub

Sub bindViews(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstViews.BindData(db.Views)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindViews cmbDatabases.SelectedText
End Sub
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------------------------------------------
' Copyright 2005 by Noonan Consulting Inc.
' All Rights Reserved 
'
' Permission to use, copy, modify, and distribute this software and its 
' documentation for any purpose and without fee is hereby granted, 
' provided that the above copyright notice appear in all copies and that 
' both that copyright notice and this permission notice appear in 
' supporting documentation. 
'
' NCI DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
' SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
' AND FITNESS, IN NO EVENT SHALL NCI BE LIABLE FOR ANY 
' SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
' WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
' WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER 
' TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE 
' OR PERFORMANCE OF THIS SOFTWARE. 
'------------------------------------------------------------------------------
' CSharp_SQL_EasyObject_View.vbgen
' Last Update : 12/26/2006
'------------------------------------------------------------------------------

If context.Objects.ContainsKey("DnpUtils") Then
	DnpUtils.SaveInputToCache(context)
End if

Dim bFirst
Dim name
Dim pname
Dim objView
Dim objColumn
Dim viewNames
Dim databaseName
Dim database
Dim namespace
Dim classPrefix
Dim prefix

Dim IDbCommand
Dim IDataParameter
Dim ParameterPrefix

prefix = input.Item("prefix")

If input.Item("prefix") = True Then 
	classPrefix = "_"
Else
	classPrefix = ""
End IF

'IDbCommand    = GetIDbCommand()
'IDataParameter = GetIDataParameter()
'ParameterPrefix = GetParameterPrefix()

' Grab the namespace
namespace = input.Item("txtNamespace")

' Set the Language for our column data types
MyMeta.Language = "C#"

' Grab the choices the user made in our UI Script (see Interface Code tab)
Set viewNames = input.Item("lstViews")

databaseName  = input.Item("cmbDatabase")
Set database = MyMeta.Databases(databaseName)

' Loop through the tables the user selected and generate the business entities
For intLp = 0 To viewNames.Count - 1

	Set objView = database.Views(viewNames.item(intLp))
	Set props = objView.Properties

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Now we have the table that we desire to build a Business Object From, let us begin.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%>
// Generated by MyGeneration Version # (<%= input.Item("__version") %>)

using System;
using System.Data;
using System.Collections;
using System.Collections.Specialized;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace <%= TrimSpaces(namespace) %>
{

	#region Schema

	public class <%= TrimSpaces(objView.Alias) %>Schema : NCI.EasyObjects.Schema
	{
		private static ArrayList _entries;
<%		output.tabLevel = 2

		' List all fields as member variables
		For Each objColumn In objView.Columns
			name = GetActualName(objColumn)
			alias = GetAlias(objColumn)
			
			isAutoKey = objColumn.IsAutoKey
			If props.ContainsKey("SEQ:I:" & objColumn.Name) Then
				isAutoKey = True
			End if
			
			Select Case LCase(objColumn.LanguageType)
			Case "string"
				output.autoTabLn "public static SchemaItem " & alias & " = new SchemaItem(""" & name & """, " & objColumn.DbTargetType & ", SchemaItemJustify.None, " & objColumn.CharacterMaxLength & ", " & ConvertToBoolean(objColumn.IsNullable) & ", " & ConvertToBoolean(objColumn.IsInPrimaryKey) & ", " & ConvertToBoolean(objColumn.IsInForeignKey) & ", " & ConvertToBoolean(objColumn.HasDefault) & ");"
			Case Else
				output.autoTabLn "public static SchemaItem " & alias & " = new SchemaItem(""" & name & """, " & objColumn.DbTargetType & ", " & ConvertToBoolean(isAutoKey) & ", " & ConvertToBoolean(objColumn.IsNullable) & ", " & ConvertToBoolean(objColumn.IsComputed) & ", " & ConvertToBoolean(objColumn.IsInPrimaryKey) & ", " & ConvertToBoolean(objColumn.IsInForeignKey) & ", " & ConvertToBoolean(objColumn.HasDefault) & ");"
			End Select
		Next
%>
		public override ArrayList SchemaEntries
		{
			get
			{
				if (_entries == null )
				{
					_entries = new ArrayList();
<%	output.tabLevel = 5
	hasAutoKey = False
	hasRowID = False
	tableAlias = TrimSpaces(objView.Alias)

	' Load all fields into the ArrayList
	For Each objColumn In objView.Columns			
		alias = GetAlias(objColumn)
		
		output.autoTabLn "_entries.Add(" & tableAlias & "Schema." & alias & ");"
		
		If objColumn.IsComputed Then
			output.autoTabLn tableAlias & "Schema." & alias & ".IsComputed = true;"
		End If
		
		hasAutoKey = hasAutoKey Or objColumn.IsAutoKey
		propName = "SEQ:I:" & objColumn.Name
		If props.ContainsKey(propName) Then
			output.autoTabLn tableAlias & "Schema." & alias & ".Properties.Add(""SEQ:I"", """ & props(propName).Value& """);"
			hasAutoKey = True
		End if
		
		propName = "SEQ:U:" & objColumn.Name
		If props.ContainsKey(propName) Then
			output.autoTabLn tableAlias & "Schema." & alias & ".Properties.Add(""SEQ:U"", """ & props(propName).Value& """);"
			output.autoTabLn tableAlias & "Schema." & alias & ".IsRowID = true;"
			hasRowID = True
		End If
	Next
%>				}
				return _entries;
			}
		}
		
		public static bool HasAutoKey 
		{
			get { return <%= ConvertToBoolean(hasAutoKey) %>;	}
		}

		public static bool HasRowID 
		{
			get { return <%= ConvertToBoolean(hasRowID) %>;	}
		}
	}
	#endregion

	public class <%= classPrefix & TrimSpaces(objView.Alias) %> : EasyObject
	{
		public <%= classPrefix & TrimSpaces(objView.Alias) %>()
		{
			<%= TrimSpaces(objView.Alias) %>Schema _schema = new <%= TrimSpaces(objView.Alias) %>Schema();
			this.SchemaEntries = _schema.SchemaEntries;
			<% output.write "this.SchemaGlobal = """ + objView.Schema + """;" %>
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
        public List<<%= classPrefix & TrimSpaces(objView.Alias) %>ClientProxy> ToList()
        {
            var list = new List<<%= classPrefix & TrimSpaces(objView.Alias) %>ClientProxy>();

            if (this.RowCount > 0)
            {
                this.Rewind();

                do
                {
                    <%= classPrefix & TrimSpaces(objView.Alias) %>ClientProxy client = new <%= classPrefix & TrimSpaces(objView.Alias) %>ClientProxy();
                    <%= classPrefix & TrimSpaces(objView.Alias) %>ClientProxy.LoadFromObject((<%= classPrefix & TrimSpaces(objView.Alias) %>)this, client);

                    list.Add(client);

                } while (this.MoveNext());
            }

            return list;
        }
	
		#region Properties
<%	output.tabLevel = 4

	' List all fields as member variables
	For Each objColumn In objView.Columns
		name = GetName(objColumn)
		alias = GetAlias(objColumn)
		langType = GetFullType(objColumn)
%>		public virtual <%= objColumn.LanguageType %> <%= alias %>
		{
			get
			{
<% 		If objColumn.LanguageType = "byte[]" Then
            output.autoTabLn "return this.GetByteArray(" & TrimSpaces(objView.Alias) & "Schema." & alias & ".FieldName);"
		Else
            output.autoTabLn "return this.Get" & langType & "(" & TrimSpaces(objView.Alias) & "Schema." & alias & ".FieldName);"
		End If
%>	    	}
<%		If (Not objColumn.DataTypeName = "timestamp" And Not objColumn.IsComputed) Then  
%>			set
			{
<% 		If objColumn.LanguageType = "byte[]" Then
            output.autoTabLn "this.SetByteArray(" & TrimSpaces(objView.Alias) & "Schema." & alias & ".FieldName, value);"
		Else
            output.autoTabLn "this.Set" & langType & "(" & TrimSpaces(objView.Alias) & "Schema." & alias & ".FieldName, value);"
		End If
%>			}
<%		End If
%>		}
<%	Next
%>
		public override string TableName
		{
			get { return "<%= objView.Name %>"; }
		}
		
		#endregion		
		
		#region String Properties
	<% output.writeLn ""
		For Each objColumn in objView.Columns
		
			langType = objColumn.LanguageType
			
			If Not InStr(1, langType, "[]") > 0 Then			
				If Not langType = "object" And Not langType = "byte[]" Then
				
					name = GetName(objColumn)
					alias   = GetAlias(objColumn)		
					langType = GetFullType(objColumn)
					
					output.write "		public virtual string s_" & alias & vbCrLf 
					output.write "	    {" & vbCrLf 
					output.write "			get"  & vbCrLf 
					output.write "	        {"	& vbCrLf 
					output.write "				return this.IsColumnNull(" & TrimSpaces(objView.Alias) & "Schema." & alias & ".FieldName) ? string.Empty : base.Get" & langType & "AsString(" & TrimSpaces(objView.Alias) & "Schema." & alias & ".FieldName);" & vbCrLf 
					output.write "			}"  & vbCrLf 
					If (Not objColumn.DataTypeName = "timestamp" And Not objColumn.IsComputed) Then 
						output.write "			set"  & vbCrLf 
						output.write "	        {"	& vbCrLf 
						output.write "				if(string.Empty == value)" & vbCrLf
						output.write "					this.SetColumnNull(" & TrimSpaces(objView.Alias) & "Schema." & alias & ".FieldName);" & vbCrLf 
						output.write "				else" & vbCrLf 
						output.write "					this." & alias & " = base.Set" & langType & "AsString(" & TrimSpaces(objView.Alias) & "Schema." & alias & ".FieldName, value);" & vbCrLf 
						output.write "			}"  & vbCrLf 
					End If	
					output.write "		}"  & vbCrLf & vbCrLf 
				
				End If
			End If
		
		Next
	%>
		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				<% output.writeLn ""
				For Each objColumn in objView.Columns
				
					alias   = GetAlias(objColumn)					
				
					output.write "				public WhereParameter " & alias & vbCrLf 
					output.write "				{" & vbCrLf 				
					output.write "					get" & vbCrLf 
					output.write "					{" & vbCrLf 		
					output.write "							WhereParameter wp = new WhereParameter(" + TrimSpaces(objView.Alias) + "Schema." + alias + ");" & vbCrLf
					output.write "							this._clause._entity.Query.AddWhereParameter(wp);" & vbCrLf
					output.write "							return wp;" & vbCrLf
					output.write "					}" & vbCrLf 
					output.write "				}" & vbCrLf & vbCrLf 					
	
				Next
				%>
				private WhereClause _clause;
			}
			#endregion
		<% output.writeLn ""
			Dim fldName
			
			For Each objColumn in objView.Columns
				
				name   = GetAlias(objColumn)		
			
				fldName = "_" & name & "_W"
				
				output.write "			public WhereParameter " & name & vbCrLf 
				output.write "		    {" & vbCrLf 				
				output.write "				get" & vbCrLf 
				output.write "		        {" & vbCrLf 				
				output.write "					if(" & fldName & " == null)" & vbCrLf 
				output.write "	        	    {" & vbCrLf 				
				output.write "						" & fldName & " = TearOff." & name & ";" & vbCrLf
				output.write "					}" & vbCrLf 
				output.write "					return " & fldName & ";" & vbCrLf 
				output.write "				}" & vbCrLf 
				output.write "			}" & vbCrLf & vbCrLf 
			Next
			
			For Each objColumn in objView.Columns
				name = "_" & GetAlias(objColumn)  & "_W"
				output.write "			private WhereParameter " & name & " = null;" & vbCrLf 
			Next  	
			
			output.write vbCrLf 
			output.write "			public void WhereClauseReset()" & vbCrLf
			output.write "			{" & vbCrLf 		
			For Each objColumn in objView.Columns
				name = "_" & GetAlias(objColumn) & "_W"
				output.write  "				" & name & " = null;" & vbCrLf 
			Next    	
			
			output.write vbCrLf
			output.write"				this._entity.Query.FlushWhereParameters();" & vbCrLf & vbCrLf 
			output.write"			}" & vbCrLf 
		%>	
			private EasyObject _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				<% output.writeLn ""
				For Each objColumn in objView.Columns
				
					alias   = GetAlias(objColumn)					
				
					output.write "				public AggregateParameter " & alias & vbCrLf 
					output.write "				{" & vbCrLf 				
					output.write "					get" & vbCrLf 
					output.write "					{" & vbCrLf 		
					output.write "							AggregateParameter ap = new AggregateParameter(" + TrimSpaces(objView.Alias) + "Schema." + alias + ");" & vbCrLf
					output.write "							this._clause._entity.Query.AddAggregateParameter(ap);" & vbCrLf
					output.write "							return ap;" & vbCrLf
					output.write "					}" & vbCrLf 
					output.write "				}" & vbCrLf & vbCrLf 					
	
				Next
				%>
				private AggregateClause _clause;
			}
			#endregion
		<% output.writeLn ""
			
			For Each objColumn in objView.Columns
				
				name   = GetAlias(objColumn)		
			
				fldName = "_" & name & "_W"
				
				output.write "			public AggregateParameter " & name & vbCrLf 
				output.write "		    {" & vbCrLf 				
				output.write "				get" & vbCrLf 
				output.write "		        {" & vbCrLf 				
				output.write "					if(" & fldName & " == null)" & vbCrLf 
				output.write "	        	    {" & vbCrLf 				
				output.write "						" & fldName & " = TearOff." & name & ";" & vbCrLf
				output.write "					}" & vbCrLf 
				output.write "					return " & fldName & ";" & vbCrLf 
				output.write "				}" & vbCrLf 
				output.write "			}" & vbCrLf & vbCrLf 
			Next
			
			For Each objColumn in objView.Columns
				name = "_" & GetAlias(objColumn)  & "_W"
				output.write "			private AggregateParameter " & name & " = null;" & vbCrLf 
			Next  	
			
			output.write vbCrLf 
			output.write "			public void AggregateClauseReset()" & vbCrLf
			output.write "			{" & vbCrLf 		
			For Each objColumn in objView.Columns
				name = "_" & GetAlias(objColumn) & "_W"
				output.write  "				" & name & " = null;" & vbCrLf 
			Next    	
			
			output.write vbCrLf
			output.write"				this._entity.Query.FlushAggregateParameters();" & vbCrLf & vbCrLf 
			output.write"			}" & vbCrLf 
		%>	
			private EasyObject _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	}
}
<% 
	' Save the output file for this Table
	Dim filename
	filename = input.item("txtPath")

	Dim length
	Dim pos
	lenth = Len(filename)
	pos = InStrRev(filename, "\") 

	If Not pos = lenth Then
		filename = filename & "\"
	End If
	
	If prefix = True Then 
		filename = filename & "_" & TrimSpaces(objView.Alias) & ".cs"
	Else 
		filename = filename & TrimSpaces(objView.Alias) & ".cs"	
	End If	

	output.save filename, false
	buffer = buffer & output.text
	output.clear
Next '  tableName
	
	output.write buffer
 %>

<% 
'===========================================================================
' These are support routines called by the above scirpt
'===========================================================================
Function GetAlias(objColumn)
	Dim name
	name = TrimSpaces(objColumn.Alias)
	GetAlias = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function GetName(objColumn)
	Dim name
	name = GetActualName(objColumn)
	GetName = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function GetActualName(objColumn)
	Dim name
	GetActualName = objColumn.Name
End Function

Function TrimSpaces(str)

	Dim tname
	Dim name
	Dim char
	Dim l

	name = ""
	tname = str
	l = Len(tname)

	For j = 1 To l
		char = Mid(tname, j, 1)
		If Not char = " " Then
			name = name & char
		End If
	Next

	TrimSpaces = name
End Function

Function GetFullType(objColumn)

	Select Case LCase(objColumn.LanguageType)
		Case "string"
			GetFullType = "String"
		Case "int"
			GetFullType = "Integer"
		Case "short"
			GetFullType = "Short"
		Case "decimal"
			GetFullType = "Decimal"
		Case "datetime"
			GetFullType = "DateTime"
		Case "byte[]"
			GetFullType = "Byte"
		Case "byte"
			GetFullType = "Byte"
		Case "bool"
			GetFullType = "Boolean"
		Case "float"
			GetFullType = "Float"
		Case "long"
			GetFullType = "Long"
		Case Else
			GetFullType = objColumn.LanguageType
	End Select
	
End Function

Function ConvertToBoolean(test)
	
	If test Then
		ConvertToBoolean = "true"
	Else
		ConvertToBoolean = "false"
	End If
	
	
End Function
%>
##|BODY_END
