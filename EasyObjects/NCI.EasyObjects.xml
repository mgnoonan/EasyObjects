<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NCI.EasyObjects.Net20</name>
    </assembly>
    <members>
        <member name="T:NCI.EasyObjects.AggregateParameter">
             <summary>
             This class is dynamcially created when you add an AggregateParameter to your EasyObject's  <see cref="T:NCI.EasyObjects.DynamicQuery"/> (See the EasyObject.Query).
             </summary>
             <remarks>
             Aggregate and GROUP BY Feature Support by DBMS:
             <code>
                             MS    
             Feature         SQL   Oracle
             --------------- ----- ------
             Avg              Y     Y
             Count            Y     Y
             Max              Y     Y
             Min              Y     Y
             Sum              Y     Y
             StdDev           Y    (1)
             Var              Y     Y
             Aggregate in
               ORDER BY       Y     Y
               GROUP BY       -     Y
             WITH ROLLUP      Y     Y
             COUNT(DISTINCT)  Y     Y
             
             Notes:
               (1) - Uses TRUNC(STDDEV(column),10) to avoid overflow errors
               
             </code>
             This will be the extent of your use of the AggregateParameter class, this class is mostly used by the EasyObject architecture, not the programmer.
             <code>
             prds  = new Products();
            
             // To include a COUNT(*) with NULLs included
             prds.Query.CountAll = true;
             prds.Query.CountAllAlias = "Product Count";
            
             // To exclude NULLs in the COUNT for a column
             prds.Aggregate.UnitsInStock.Function = AggregateParameter.Func.Count;
             prds.Aggregate.UnitsInStock.Alias = "With Stock";
            
             // To have two aggregates for the same column, use a tearoff
             AggregateParameter ap = prds.Aggregate.TearOff.UnitsInStock;
             ap.Function = AggregateParameter.Func.Sum;
             ap.Alias = "Total Units";
            
             prds.Aggregate.ReorderLevel.Function = AggregateParameter.Func.Avg;
             prds.Aggregate.ReorderLevel.Alias = "Avg Reorder";
            
             prds.Aggregate.UnitPrice.Function = AggregateParameter.Func.Min;
             prds.Aggregate.UnitPrice.Alias = "Min Price";
            
             ap = prds.Aggregate.TearOff.UnitPrice;
             ap.Function = AggregateParameter.Func.Max;
             ap.Alias = "Max Price";
            
             // If you have no aggregates or AddResultColumns,
             // Then the query defaults to SELECT *
             // If you have an aggregate and no AddResultColumns,
             // Then only aggregates are reurned in the query.
             prds.Query.AddResultColumn(Products.ColumnNames.CategoryID);
             prds.Query.AddResultColumn(Products.ColumnNames.Discontinued);
            
             // If you have an Aggregate, ANSI SQL requires an AddGroupBy
             // for each AddResultColumn. Check your DBMS docs.
             prds.Query.AddGroupBy(Products.ColumnNames.CategoryID);
             prds.Query.AddGroupBy(Products.ColumnNames.Discontinued);
            
             prds.Query.AddOrderBy(Products.ColumnNames.Discontinued, WhereParameter.Dir.ASC);
             
             // You can use aggregates in AddOrderBy by
             // referencing either the EasyObject AggregateParameter or a tearoff
             // You must create the aggregate before using it here.
             prds.Query.AddOrderBy(prds.Aggregate.UnitsInStock, WhereParameter.Dir.DESC);
             
             // Load it.
             prds.Query.Load();
             </code>
             </remarks>
        </member>
        <member name="T:NCI.EasyObjects.AggregateParameter.Func">
            <summary>
            The aggregate function used by Aggregate.Function
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.AggregateParameter.Func.Avg">
            <summary>
            Average
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.AggregateParameter.Func.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.AggregateParameter.Func.Max">
            <summary>
            Maximum
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.AggregateParameter.Func.Min">
            <summary>
            Minimum
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.AggregateParameter.Func.StdDev">
            <summary>
            Standard Deviation
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.AggregateParameter.Func.Var">
            <summary>
            Variance
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.AggregateParameter.Func.Sum">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.AggregateParameter.#ctor(NCI.EasyObjects.SchemaItem)">
            <summary>
            This is only called by EasyObject architecture.
            </summary>
            <param name="item">A <see cref="T:NCI.EasyObjects.SchemaItem"/> to use in the aggregate</param>
        </member>
        <member name="P:NCI.EasyObjects.AggregateParameter.IsDirty">
            <summary>
            Used to determine if the AggregateParameter has a value
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.AggregateParameter.Value">
            <summary>
            The value that will be placed into the Parameter
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.AggregateParameter.Function">
            <summary>
            The type of aggregate function desired.
            Avg, Count, Min, Max, Sum, StdDev, or Var.
            (See AggregateParameter.Func enumeration.)
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.AggregateParameter.Alias">
            <summary>
            The user-friendly name of the aggregate column
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.AggregateParameter.Distinct">
            <summary>
            If true, then use (DISTINCT columnName) in the aggregate.
            </summary>
        </member>
        <member name="T:NCI.EasyObjects.ArgumentValidation">
            <summary>
            <para>Common validation routines for argument validation.</para>
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.ArgumentValidation.CheckForEmptyString(System.String,System.String)">
            <summary>
            <para>Check if the <paramref name="variable"/> is an embpty string.</para>
            </summary>
            <param name="variable">
            <para>The value to check.</para>
            </param>
            <param name="variableName">
            <para>The name of the variable being checked.</para>
            </param>
            <remarks>
            <para>Before checking the <paramref name="variable"/>, a call is made to <see cref="M:NCI.EasyObjects.ArgumentValidation.CheckForNullReference(System.Object,System.String)"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not be <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="variableName"/> can not be <see langword="null"/> (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            <pararef name="variable"/> can not be a zero length <see cref="T:System.String"/>.
            </exception>
        </member>
        <member name="M:NCI.EasyObjects.ArgumentValidation.CheckForNullReference(System.Object,System.String)">
            <summary>
            <para>Check if the <paramref name="variable"/> is <see langword="null"/> (Nothing in Visual Basic).</para>
            </summary>
            <param name="variable">
            <para>The value to check.</para>
            </param>
            <param name="variableName">
            <para>The name of the variable being checked.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="variableName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:NCI.EasyObjects.ArgumentValidation.CheckForInvalidNullNameReference(System.String,System.String)">
            <summary>
            Validates that the input messageName is neither null nor empty
            </summary>
            <param name="name">Parameter name</param>
            <param name="messageName">Parameter value</param>
        </member>
        <member name="M:NCI.EasyObjects.ArgumentValidation.CheckForZeroBytes(System.Byte[],System.String)">
            <summary>
            <para>Checks <paramref name="bytes"/> for zero length and throw an <see cref="T:System.ArgumentException"/> if the length equals zero.</para>
            </summary>
            <param name="bytes">
            The <see cref="T:System.Byte"/> array to check.
            </param>
            <param name="variableName">
            <para>The name of the variable being checked.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="variableName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="bytes"/> can not be zero length.</para>
            </exception>
        </member>
        <member name="M:NCI.EasyObjects.ArgumentValidation.CheckExpectedType(System.Object,System.Type)">
            <summary>
            <para>Check <paramref name="variable"/> to determine if it matches the <see cref="T:System.Type"/> of <paramref name="type"/>.</para>
            </summary>
            <param name="variable">
            <para>The value to check.</para>
            </param>
            <param name="type">
            <para>The <see cref="T:System.Type"/> expected type of <paramref name="variable"/>.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="typeName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="variable"/> is not the expected <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="M:NCI.EasyObjects.ArgumentValidation.CheckEnumeration(System.Type,System.Object,System.String)">
            <summary>
            <para>Check <paramref name="variable"/> to determine if it is a valid defined enumeration for <paramref name="enumType"/>.</para>
            </summary>
            <param name="variable">
            <para>The value to check.</para>
            </param>
            <param name="enumType">
            <para>The <see cref="T:System.Type"/> expected type of <paramref name="variable"/>.</para>
            </param>
            <param name="variableName">
            <para>The name of the variable being checked.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="enumType"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="variableName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="variable"/> is not the expected <see cref="T:System.Type"/>.
            <para>- or -</para>
            <par><paramref name="enumType"/> is not an <see cref="T:System.Enum"/>. </par>
            </exception>
        </member>
        <member name="T:NCI.EasyObjects.Configuration.DqProviderMapping">
            <summary>
            Represents the mapping from a vendor-specific query provider to an EasyObject <see cref="T:NCI.EasyObjects.DynamicQuery"/>.
            </summary>
            <remarks>
            </remarks>
            <seealso cref="M:NCI.EasyObjects.DynamicQueryConfigurationView.GetDynamicQueryData(System.String)"/>
            <seealso cref="T:System.Data.Common.DbProviderFactory"/>
        </member>
        <member name="F:NCI.EasyObjects.Configuration.DqProviderMapping.DefaultSql2005ProviderName">
            <summary>
            Default name for the Sql 2005 managed provider.
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.Configuration.DqProviderMapping.DefaultSqlProviderName">
            <summary>
            Default name for the Sql 2000 managed providers.
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.Configuration.DqProviderMapping.DefaultOracleProviderName">
            <summary>
            Default name for the Oracle managed provider.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.Configuration.DqProviderMapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NCI.EasyObjects.Configuration.DqProviderMapping"/> class.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.Configuration.DqProviderMapping.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NCI.EasyObjects.Configuration.DqProviderMapping"/> class with name and <see cref="P:NCI.EasyObjects.Configuration.DqProviderMapping.DynamicQueryType"/> type.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.Configuration.DqProviderMapping.DynamicQueryType">
            <summary>
            Gets or sets the type of database to use for the mapped ADO.NET provider.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.Configuration.DqProviderMapping.DqProviderName">
            <summary>
             Gets the logical name of the ADO.NET provider.
            </summary>
        </member>
        <member name="T:NCI.EasyObjects.Configuration.DynamicQueryAssemblerAttribute">
            <summary>
            Specifies what type to use to build the concrete <see cref="T:NCI.EasyObjects.DynamicQuery"/> type this attribute is bound to. 
            This class cannot be inherited.
            </summary>
            <remarks>
            This attribute is used by the DynamicQueryCustomFactory once the <see cref="T:NCI.EasyObjects.DynamicQuery"/> type to build is 
            known based on the configuration information to determine how to build the actual <b>Database</b> instance.
            </remarks>
        </member>
        <member name="M:NCI.EasyObjects.Configuration.DynamicQueryAssemblerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NCI.EasyObjects.Configuration.DynamicQueryAssemblerAttribute"/> class with an assembler type.
            </summary>
            <param name="assemblerType">The assembler type. Must implement the <see cref="T:NCI.EasyObjects.Configuration.IDynamicQueryAssembler"/> interface.</param>
        </member>
        <member name="P:NCI.EasyObjects.Configuration.DynamicQueryAssemblerAttribute.AssemblerType">
            <summary>
            Gets the database assembler type.
            </summary>
        </member>
        <member name="T:NCI.EasyObjects.Configuration.DynamicQueryData">
            <summary>
            Configuration data defining CacheStorageData. This configuration section defines the name and type
            of the IBackingStore used by a CacheManager
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.Configuration.DynamicQueryData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NCI.EasyObjects.Configuration.DynamicQueryData"/> class.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.Configuration.DynamicQueryData.#ctor(System.String,System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:NCI.EasyObjects.Configuration.DynamicQueryData"/> class with a name and the type of <see cref="T:NCI.EasyObjects.DynamicQuery"/>.
            </summary>
            <param name="name">The name of the configured <see cref="T:NCI.EasyObjects.DynamicQuery"/>. </param>
            <param name="type">The type of <see cref="T:NCI.EasyObjects.DynamicQuery"/>.</param>
        </member>
        <member name="T:NCI.EasyObjects.Configuration.DynamicQuerySettings">
            <summary>
            <para>Represents the root configuration for data.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>dynamicQuerySettings</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="F:NCI.EasyObjects.Configuration.DynamicQuerySettings.SectionName">
            <summary>
            The name of the data configuration section.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.Configuration.DynamicQuerySettings.GetDynamicQuerySettings(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Retrieves the <see cref="T:NCI.EasyObjects.Configuration.DynamicQuerySettings"/> from a configuration source.
            </summary>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> to query for the database settings.</param>
            <returns>The database settings from the configuration source, or <see langword="null"/> (<b>Nothing</b> in Visual Basic) if the 
            configuration source does not contain database settings.</returns>
        </member>
        <member name="P:NCI.EasyObjects.Configuration.DynamicQuerySettings.DefaultDynamicQueryProvider">
            <summary>
            Defines the default manager instance to use when no other manager is specified
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.Configuration.DynamicQuerySettings.DynamicQueryProviders">
            <summary>
            Gets the collection of defined <see cref="T:NCI.EasyObjects.Configuration.DynamicQueryData"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="T:NCI.EasyObjects.Configuration.DynamicQueryData"/> objects.
            </value>
        </member>
        <member name="P:NCI.EasyObjects.Configuration.DynamicQuerySettings.DynamicQueryProviderMappings">
            <summary>
            Gets the collection of defined <see cref="T:NCI.EasyObjects.Configuration.DqProviderMapping"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="T:NCI.EasyObjects.Configuration.DqProviderMapping"/> objects.
            </value>
        </member>
        <member name="T:NCI.EasyObjects.Configuration.IDynamicQueryAssembler">
            <summary>
            Represents the process to build an instance of a concrete <see cref="T:NCI.EasyObjects.DynamicQuery"/> described by configuration information.
            </summary>
            <seealso cref="T:NCI.EasyObjects.DynamicQueryCustomFactory"/>
        </member>
        <member name="M:NCI.EasyObjects.Configuration.IDynamicQueryAssembler.Assemble(NCI.EasyObjects.EasyObject)">
            <summary>
            Builds an instance of the concrete subtype of <see cref="T:NCI.EasyObjects.DynamicQuery"/> the receiver knows how to build, based on 
            the provided connection string and any configuration information that might be contained by the 
            <paramref name="entity"/>.
            </summary>
            <param name="entity">An optional reference to an <see cref="T:NCI.EasyObjects.EasyObject"/> to pass to the <see cref="T:NCI.EasyObjects.DynamicQuery"/> provider.</param>
            <returns>The new dynamic query provider.</returns>
        </member>
        <member name="T:NCI.EasyObjects.Configuration.Manageability.Installer">
            <summary>
            Installer for the WMI objects defined in the assembly.
            </summary>
        </member>
        <member name="T:NCI.EasyObjects.Configuration.Manageability.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.Configuration.Manageability.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.Configuration.Manageability.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.Configuration.Manageability.Properties.Resources.DynamicQuerySettingsPolicyName">
            <summary>
              Looks up a localized string similar to Specify Dynamic Query Block Settings.
            </summary>
        </member>
        <member name="T:NCI.EasyObjects.DynamicQueryConfigurationView">
            <summary>
            <para>Represents a view for navigating the <see cref="P:NCI.EasyObjects.DynamicQueryConfigurationView.DynamicQuerySettings"/> configuration data.</para>
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryConfigurationView.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:NCI.EasyObjects.DynamicQueryConfigurationView"/> class with a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> object.</para>
            </summary>
            <param name="configurationSource">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> object.</para>
            </param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryConfigurationView.GetDynamicQueryData(System.String)">
            <summary>
            Gets the <see cref="T:NCI.EasyObjects.Configuration.DynamicQueryData"/> from configuration for the named <see cref="T:NCI.EasyObjects.DynamicQuery"/>
            </summary>
            <param name="name">
            The name of the <see cref="T:NCI.EasyObjects.DynamicQuery"/>.
            </param>
            <returns>
            A <see cref="T:NCI.EasyObjects.Configuration.DynamicQueryData"/> object.
            </returns>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQueryConfigurationView.DefaultDynamicQueryProvider">
            <summary>
            Gets the name of the default <see cref="T:NCI.EasyObjects.Configuration.DynamicQueryData"/>.
            </summary>
            <returns>
            The name of the default <see cref="T:NCI.EasyObjects.Configuration.DynamicQueryData"/>.
            </returns>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQueryConfigurationView.DynamicQuerySettings">
            <summary>
            <para>Gets the <see cref="P:NCI.EasyObjects.DynamicQueryConfigurationView.DynamicQuerySettings"/> configuration data.</para>
            </summary>
            <returns>
            <para>The <see cref="P:NCI.EasyObjects.DynamicQueryConfigurationView.DynamicQuerySettings"/> configuration data.</para>
            </returns>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryCustomFactory.GetAssembler(System.Type,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns an <see cref="T:NCI.EasyObjects.Configuration.IDynamicQueryAssembler"/> that represents the building process for a a concrete <see cref="T:NCI.EasyObjects.DynamicQuery"/>.
            </summary>
            <param name="type">The concrete <see cref="T:NCI.EasyObjects.DynamicQuery"/> type.</param>
            <param name="name">The name of the instance to build, or <see langword="null"/> (<b>Nothing</b> in Visual Basic).</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>The <see cref="T:NCI.EasyObjects.Configuration.IDynamicQueryAssembler"/> instance.</returns>
            <exception cref="T:System.InvalidOperationException">when concrete <see cref="T:NCI.EasyObjects.DynamicQuery"/> type does have the required <see cref="T:NCI.EasyObjects.Configuration.DynamicQueryAssemblerAttribute"/>.</exception>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryCustomFactory.CreateObject(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns a new instance of a concrete <see cref="T:NCI.EasyObjects.DynamicQuery"/>, described by the <see cref="T:NCI.EasyObjects.Configuration.DynamicQuerySettings"/> 
            found in the <paramref name="configurationSource"/> under the name <paramref name="name"/>, plus any additional
            configuration information that might describe the the concrete <b>Database</b>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="name">The name of the instance to build, or <see langword="null"/> (<b>Nothing</b> in Visual Basic).</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A new instance of the appropriate subtype.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">when the configuration is invalid or <paramref name="name"/> cannot be found.</exception>
        </member>
        <member name="T:NCI.EasyObjects.DynamicQueryFactory">
            <summary>
            Contains factory methods for creating DynamicQuery objects
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryFactory.#ctor">
            <summary>
            Initializes a new instance of DynamicQueryFactory
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryFactory.CreateDynamicQuery(NCI.EasyObjects.EasyObject)">
            <summary>
            Method for invoking a default DynamicQuery object.  Reads default settings
            from the dynamicQuerySettings.config file.
            </summary>
            <example>
            <code>
            DynamicQuery query = DynamicQueryFactory.CreateDynamicQuery();
            </code>
            </example>
            <param name="entity">A reference to an instance of an <see cref="T:NCI.EasyObjects.EasyObject"/></param>
            <returns>DynamicQuery</returns>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>A error occured while reading the configuration.</para>
            </exception>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryFactory.CreateDynamicQuery(NCI.EasyObjects.EasyObject,System.String)">
            <summary>
            Method for invoking a specified DynamicQuery service object.  Reads service settings
            from the dynamicQuerySettings.config file.
            </summary>
            <example>
            <code>
            DynamicQuery query = DynamicQueryFactory.CreateDynamicQuery("Oracle");
            </code>
            </example>
            <param name="entity">A callback reference to an EasyObject</param>
            <param name="instanceName">configuration key for dynamic query provider</param>
            <returns>DynamicQuery</returns>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para><paramref name="instanceName"/> is not defined in configuration.</para>
            <para>- or -</para>
            <para>An error exists in the configuration.</para>
            <para>- or -</para>
            <para>A error occured while reading the configuration.</para>        
            </exception>
            <exception cref="T:System.Reflection.TargetInvocationException">
            <para>The constructor being called throws an exception.</para>
            </exception>
        </member>
        <member name="T:NCI.EasyObjects.DynamicQueryMapper">
            <summary>
            This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Resolves default names for databases.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryMapper.MapName(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns the default database name from the configuration in the <paramref name="configurationSource"/>, if the
            value for <paramref name="name"/> is <see langword="null"/> (<b>Nothing</b> in Visual Basic).
            </summary>
            <param name="name">The current name.</param>
            <param name="configurationSource">The source for configuration information.</param>
            <returns>The default database name if <paramref name="name"/> is <see langword="null"/> (<b>Nothing</b> in Visual Basic),
            otherwise the original value for <b>name</b>.</returns>
        </member>
        <member name="T:NCI.EasyObjects.DynamicQueryProviderFactory">
            <summary>
            Represents a factory pattern which generates a provider-specific <see cref="T:NCI.EasyObjects.DynamicQuery"/> object from configuration settings.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProviderFactory.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:NCI.EasyObjects.DynamicQueryProviderFactory"/> class.</para>
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProviderFactory.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:NCI.EasyObjects.DynamicQueryProviderFactory"/> class with the specified <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </para>
            </summary>
            <param name="configurationSource">
            <para>Configuration context to use when creating factory</para>
            </param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.OracleQueryAssembler.Assemble(NCI.EasyObjects.EasyObject)">
            <summary>
            Builds an instance of <see cref="T:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery"/>, based on the provided connection string.
            </summary>
            <param name="entity">An optional reference to an <see cref="T:NCI.EasyObjects.EasyObject"/> to pass on to the <see cref="T:NCI.EasyObjects.DynamicQuery"/> provider.</param>
            <returns>The new Oracle dynamic query instance.</returns>
        </member>
        <member name="T:NCI.EasyObjects.DynamicQueryProvider.Sql2005DynamicQuery">
            <summary>
            Represents provider-specific <see cref="T:NCI.EasyObjects.DynamicQuery"/> functions for SQL Server.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.Sql2005DynamicQuery.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery"/>.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.Sql2005DynamicQuery.#ctor(NCI.EasyObjects.EasyObject)">
            <summary>
            Initialize a new instance of the <see cref="T:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery"/> class.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.Sql2005DynamicQuery.BuildWhereClause(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,System.String,System.Text.StringBuilder)">
            <summary>
            Construct the correct WHERE clause using the Transact-SQL syntax (SQL Server 2005)
            </summary>
            <param name="db">A database object from the Enterprise Library</param>
            <param name="dbCommand">A wrapper for an Enterprise Library command object</param>
            <param name="conjunction">The conjunction to use between parameters, usually AND or OR</param>
            <param name="query">The query string to append the WHERE clause to</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.Sql2005DynamicQueryAssembler.Assemble(NCI.EasyObjects.EasyObject)">
            <summary>
            Builds an instance of <see cref="T:NCI.EasyObjects.DynamicQueryProvider.Sql2005DynamicQuery"/>, based on the provided connection string.
            </summary>
            <param name="entity">An optional reference to an <see cref="T:NCI.EasyObjects.EasyObject"/> to pass on to the <see cref="T:NCI.EasyObjects.DynamicQuery"/> provider.</param>
            <returns>The new SQL Server dynamic query instance.</returns>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.SqlDynamicQueryAssembler.Assemble(NCI.EasyObjects.EasyObject)">
            <summary>
            Builds an instance of <see cref="T:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery"/>, based on the provided connection string.
            </summary>
            <param name="entity">An optional reference to an <see cref="T:NCI.EasyObjects.EasyObject"/> to pass on to the <see cref="T:NCI.EasyObjects.DynamicQuery"/> provider.</param>
            <returns>The new SQL Server dynamic query instance.</returns>
        </member>
        <member name="T:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery">
            <summary>
            Represents provider-specific <see cref="T:NCI.EasyObjects.DynamicQuery"/> functions for Oracle.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery"/>.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.#ctor(NCI.EasyObjects.EasyObject)">
            <summary>
            Initialize a new instance of the <see cref="T:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery"/> class.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.ParameterToken">
            <summary>
            <para>Gets the parameter token used to delimit parameters for the Oracle database.</para>
            </summary>
            <value>
            <para>The ':' symbol.</para>
            </value>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.WildcardToken">
            <summary>
            <para>Gets the wildcard token used to perform LIKE queries for the Sql Database.</para>
            </summary>
            <value>
            <para>The '%' symbol.</para>
            </value>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.FieldFormat">
            <summary>
            <para>Gets the string format used to delimit fieldnames for the Oracle Database.</para>
            </summary>
            <value>
            <para>'{0}' is the field format string for Oracle.</para>
            </value>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.SchemaSeparator">
            <summary>
            <para>Gets the string format used to separate schema names and database objects for the Oracle.</para>
            </summary>
            <value>
            <para>'.' is the schema separator string for Oracle.</para>
            </value>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.AliasFormat">
            <summary>
            <para>Gets the string format used to delimit aliases for the Oracle Database.</para>
            </summary>
            <value>
            <para>"\"{0}\"" is the alias format string for Oracle.</para>
            </value>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.AddOrderBy(NCI.EasyObjects.DynamicQuery,NCI.EasyObjects.WhereParameter.Dir)">
            <summary>
            Adds a COUNT(*) to the ORDER BY clause of the query
            </summary>
            <param name="countAll">A reference to a <seealso cref="T:NCI.EasyObjects.DynamicQuery"/> object</param>
            <param name="direction">A <seealso cref="T:NCI.EasyObjects.WhereParameter.Dir"/> indicating which direction to sort the results</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.AddOrderBy(NCI.EasyObjects.AggregateParameter,NCI.EasyObjects.WhereParameter.Dir)">
            <summary>
            Adds an aggregate parameter to the ORDER BY clause of the query
            </summary>
            <param name="aggregate">An <seealso cref="T:NCI.EasyObjects.AggregateParameter"/> to add to the GROUP BY clause</param>
            <param name="direction">A <seealso cref="T:NCI.EasyObjects.WhereParameter.Dir"/> indicating which direction to sort the results</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.AddGroupBy(NCI.EasyObjects.AggregateParameter)">
            <summary>
            Adds a GROUP BY parameter to the query
            </summary>
            <param name="aggregate">An <seealso cref="T:NCI.EasyObjects.AggregateParameter"/> to add to the GROUP BY clause</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.BuildSelectQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,System.String)">
            <summary>
            Builds a provider-specific SELECT query against the <see cref="P:NCI.EasyObjects.EasyObject.QuerySource"/>.
            <seealso cref="P:NCI.EasyObjects.EasyObject.QuerySource"/>
            </summary>
            <param name="db">A database object from the Enterprise Library</param>
            <param name="dbCommand">An wrapper for an Enterprise Library command object</param>
            <param name="conjunction">The conjunction to use between multiple <see cref="T:NCI.EasyObjects.WhereParameter"/>s</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.BuildUpdateQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,System.String)">
            <summary>
            Builds a provider-specific UPDATE query against the <see cref="P:NCI.EasyObjects.EasyObject.QuerySource"/>.
            <seealso cref="P:NCI.EasyObjects.EasyObject.QuerySource"/>
            </summary>
            <param name="db">A database object from the Enterprise Library</param>
            <param name="dbCommand">A wrapper for an Enterprise Library command object</param>
            <param name="conjunction">The conjunction to use between multiple <see cref="T:NCI.EasyObjects.WhereParameter"/>s</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.AddUpdateColumn(NCI.EasyObjects.SchemaItem)">
            <summary>
            Adds a column to the UPDATE query
            </summary>
            <param name="item">A SchemaItem to add to the UPDATE statement</param>
            <remarks>This is overridden because Oracle has to watch for the RowID (similar to a timestamp) for concurrency</remarks>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.BuildInsertQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,System.String)">
            <summary>
            Builds a provider-specific INSERT query against the <see cref="P:NCI.EasyObjects.EasyObject.QuerySource"/>.
            <seealso cref="P:NCI.EasyObjects.EasyObject.QuerySource"/>
            </summary>
            <param name="db">A database object from the Enterprise Library</param>
            <param name="dbCommand">A wrapper for an Enterprise Library command object</param>
            <param name="conjunction">The conjunction to use between multiple <see cref="T:NCI.EasyObjects.WhereParameter"/>s</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.BuildDeleteQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,System.String)">
            <summary>
            Builds a provider-specific DELETE query against the <see cref="P:NCI.EasyObjects.EasyObject.QuerySource"/>.
            <seealso cref="P:NCI.EasyObjects.EasyObject.QuerySource"/>
            </summary>
            <param name="db">A database object from the Enterprise Library</param>
            <param name="dbCommand">A wrapper for an Enterprise Library command object</param>
            <param name="conjunction">The conjunction to use between multiple <see cref="T:NCI.EasyObjects.WhereParameter"/>s</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.BuildWhereClause(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,System.String,System.Text.StringBuilder)">
            <summary>
            Construct the correct WHERE clause using the PL/SQL syntax (generic Oracle)
            </summary>
            <param name="db">A database object from the Enterprise Library</param>
            <param name="dbCommand">A wrapper for an Enterprise Library command object</param>
            <param name="conjunction">The conjunction to use between parameters, usually AND or OR</param>
            <param name="query">The query string to append the WHERE clause to</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.BuildWildcardValue(NCI.EasyObjects.WhereParameter)">
            <summary>
            Adds a properly formatted <see cref="P:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.WildcardToken"/> to the <see cref="T:NCI.EasyObjects.WhereParameter"/> value
            </summary>
            <param name="wItem">The <see cref="T:NCI.EasyObjects.WhereParameter"/> that needs the <see cref="P:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.WildcardToken"/></param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.OracleDynamicQuery.GetAggregate(NCI.EasyObjects.AggregateParameter,System.Boolean)">
            <summary>
            Builds the provider-specific aggregate portion of the query
            </summary>
            <param name="param">An <seealso cref="T:NCI.EasyObjects.AggregateParameter"/> to add to the GROUP BY clause</param>
            <param name="withAlias">A flag to indicate if the aggregate should use an alias, if one is present</param>
            <returns>A formatted string for the aggregate function</returns>
        </member>
        <member name="T:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery">
            <summary>
            Represents provider-specific <see cref="T:NCI.EasyObjects.DynamicQuery"/> functions for SQL Server.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery"/>.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.#ctor(NCI.EasyObjects.EasyObject)">
            <summary>
            Initialize a new instance of the <see cref="T:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery"/> class.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.ParameterToken">
            <summary>
            <para>Gets the parameter token used to delimit parameters for the Sql Database.</para>
            </summary>
            <value>
            <para>The '@' symbol.</para>
            </value>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.WildcardToken">
            <summary>
            <para>Gets the wildcard token used to perform LIKE queries for the Sql Database.</para>
            </summary>
            <value>
            <para>The '%' symbol.</para>
            </value>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.FieldFormat">
            <summary>
            <para>Gets the string format used to delimit fieldnames for the Sql Database.</para>
            </summary>
            <value>
            <para>'[{0}]' is the field format string for Sql Server.</para>
            </value>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.SchemaSeparator">
            <summary>
            <para>Gets the string format used to separate schema names and database objects for the Sql Database.</para>
            </summary>
            <value>
            <para>'.' is the schema separator string for Sql Server.</para>
            </value>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.AliasFormat">
            <summary>
            <para>Gets the string format used to delimit aliases for the Sql Database.</para>
            </summary>
            <value>
            <para>"'{0}'" is the alias format string for Sql Server.</para>
            </value>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.AddOrderBy(NCI.EasyObjects.DynamicQuery,NCI.EasyObjects.WhereParameter.Dir)">
            <summary>
            Adds a COUNT(*) to the ORDER BY clause of the query
            </summary>
            <param name="countAll">A reference to a <seealso cref="T:NCI.EasyObjects.DynamicQuery"/> object</param>
            <param name="direction">A <seealso cref="T:NCI.EasyObjects.WhereParameter.Dir"/> indicating which direction to sort the results</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.AddOrderBy(NCI.EasyObjects.AggregateParameter,NCI.EasyObjects.WhereParameter.Dir)">
            <summary>
            Adds an aggregate parameter to the ORDER BY clause of the query
            </summary>
            <param name="aggregate">An <seealso cref="T:NCI.EasyObjects.AggregateParameter"/> to add to the GROUP BY clause</param>
            <param name="direction">A <seealso cref="T:NCI.EasyObjects.WhereParameter.Dir"/> indicating which direction to sort the results</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.AddGroupBy(NCI.EasyObjects.AggregateParameter)">
            <summary>
            Adds a GROUP BY parameter to the query
            </summary>
            <param name="aggregate">An <seealso cref="T:NCI.EasyObjects.AggregateParameter"/> to add to the GROUP BY clause</param>	
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.BuildSelectQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,System.String)">
            <summary>
            Builds a provider-specific SELECT query against the <see cref="P:NCI.EasyObjects.EasyObject.QuerySource"/>.
            <seealso cref="P:NCI.EasyObjects.EasyObject.QuerySource"/>
            </summary>
            <param name="db">A database object from the Enterprise Library</param>
            <param name="dbCommand">A wrapper for an Enterprise Library command object</param>
            <param name="conjunction">The conjunction to use between multiple <see cref="T:NCI.EasyObjects.WhereParameter"/>s</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.BuildUpdateQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,System.String)">
            <summary>
            Builds a provider-specific UPDATE query against the <see cref="P:NCI.EasyObjects.EasyObject.TableName"/>.
            <seealso cref="P:NCI.EasyObjects.EasyObject.TableName"/>
            </summary>
            <param name="db">A database object from the Enterprise Library</param>
            <param name="dbCommand">A wrapper for an Enterprise Library command object</param>
            <param name="conjunction">The conjunction to use between multiple <see cref="T:NCI.EasyObjects.WhereParameter"/>s</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.BuildInsertQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,System.String)">
            <summary>
            Builds a provider-specific INSERT query against the <see cref="P:NCI.EasyObjects.EasyObject.TableName"/>.
            <seealso cref="P:NCI.EasyObjects.EasyObject.TableName"/>
            </summary>
            <param name="db">A database object from the Enterprise Library</param>
            <param name="dbCommand">A wrapper for an Enterprise Library command object</param>
            <param name="conjunction">The conjunction to use between multiple <see cref="T:NCI.EasyObjects.WhereParameter"/>s</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.BuildDeleteQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,System.String)">
            <summary>
            Builds a provider-specific DELETE query against the <see cref="P:NCI.EasyObjects.EasyObject.TableName"/>.
            <seealso cref="P:NCI.EasyObjects.EasyObject.TableName"/>
            </summary>
            <param name="db">A database object from the Enterprise Library</param>
            <param name="dbCommand">A wrapper for an Enterprise Library command object</param>
            <param name="conjunction">The conjunction to use between multiple <see cref="T:NCI.EasyObjects.WhereParameter"/>s</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.BuildWhereClause(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,System.String,System.Text.StringBuilder)">
            <summary>
            Construct the correct WHERE clause using the Transact-SQL syntax (generic SQL Server)
            </summary>
            <param name="db">A database object from the Enterprise Library</param>
            <param name="dbCommand">A wrapper for an Enterprise Library command object</param>
            <param name="conjunction">The conjunction to use between parameters, usually AND or OR</param>
            <param name="query">The query string to append the WHERE clause to</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.BuildWildcardValue(NCI.EasyObjects.WhereParameter)">
            <summary>
            Adds a properly formatted <see cref="P:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.WildcardToken"/> to the <see cref="T:NCI.EasyObjects.WhereParameter"/> value
            </summary>
            <param name="wItem">The <see cref="T:NCI.EasyObjects.WhereParameter"/> that needs the <see cref="P:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.WildcardToken"/></param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQueryProvider.SqlServerDynamicQuery.GetAggregate(NCI.EasyObjects.AggregateParameter,System.Boolean)">
            <summary>
            Builds the provider-specific aggregate portion of the query
            </summary>
            <param name="param">An <seealso cref="T:NCI.EasyObjects.AggregateParameter"/> to add to the GROUP BY clause</param>
            <param name="withAlias">A flag to indicate if the aggregate should use an alias, if one is present</param>
            <returns>A formatted string for the aggregate function</returns>
        </member>
        <member name="T:NCI.EasyObjects.DynamicQuery">
             <summary>
             DynamicQuery allows you to build provider independent dynamic queries against the database from 
             outside your data layer. All  selection criteria are passed in via Parameters in order to prevent 
             sql injection techniques often attempted by hackers.
             </summary>
             <example>
             VB.NET
             <code>
             Dim emps As New Employees
            
             ' LastNames that have "A" anywher in them
             emps.Where.LastName.Value = "%A%"
             emps.Where.LastName.Operator = WhereParameter.Operand.Like_
            
             ' Only return the EmployeeID and LastName
             emps.Query.AddResultColumn(EmployeesSchema.EmployeeID)
             emps.Query.AddResultColumn(EmployeesSchema.LastName)
            
             ' Order by LastName 
             ' (you can add as many order by columns as you like by repeatedly calling this)
             emps.Query.AddOrderBy(EmployeesSchema.LastName, WhereParameter.Dir.ASC)
            
             ' Bring back only distinct rows
             emps.Query.Distinct = True
            
             ' Bring back the top 10 rows
             emps.Query.TopN = 10
            
             emps.Query.Load()</code>
            	C#
            	<code>
             Employees emps = new Employees();
            
             // LastNames that have "A" anywher in them
             emps.Where.LastName.Value = "%A%";
             emps.Where.LastName.Operator = WhereParameter.Operand.Like;
            
             // Only return the EmployeeID and LastName
             emps.Query.AddResultColumn(EmployeesSchema.EmployeeID);
             emps.Query.AddResultColumn(EmployeesSchema.LastName);
            
             // Order by LastName 
             // (you can add as many order by columns as you like by repeatedly calling this)
             emps.Query.AddOrderBy(EmployeesSchema.LastName, WhereParameter.Dir.ASC);
            
             // Bring back only distinct rows
             emps.Query.Distinct = true;
            
             // Bring back the top 10 rows
             emps.Query.TopN = 10;
            
             emps.Query.Load();</code>
             </example>
        </member>
        <member name="F:NCI.EasyObjects.DynamicQuery._distinct">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.DynamicQuery._topN">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.DynamicQuery._whereParameters">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.DynamicQuery._resultColumns">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.DynamicQuery._orderBy">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.DynamicQuery._updateColumns">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.DynamicQuery._insertColumns">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.DynamicQuery._insertColumnValues">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.DynamicQuery._insertParameters">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.DynamicQuery._parameterValues">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.DynamicQuery._entity">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.DynamicQuery._countAll">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.DynamicQuery._countAllAlias">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.DynamicQuery._withRollup">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.DynamicQuery._groupBy">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.DynamicQuery._aggregateParameters">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.DynamicQuery._useNoLock">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.#ctor(NCI.EasyObjects.EasyObject)">
            <summary>
            There is no need to call this, just access your EasyObject.Query property and it will be created on the fly.
            </summary>
            <param name="entity">A callback reference to an EasyObject</param>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.ParameterToken">
            <summary>
            <para>When implemented by a class, gets the parameter token used to delimit parameters for the database.</para>
            </summary>
            <value>
            <para>the parameter token used to delimit parameters for the database.</para>
            </value>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.WildcardToken">
            <summary>
            <para>When implemented by a class, gets the wildcard token used in fuzzy (LIKE) queries for the database.</para>
            </summary>
            <value>
            <para>the wildcard token used in certain queries of the database.</para>
            </value>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.SchemaSeparator">
            <summary>
            <para>When implemented by a class, gets the string used to separate schemas from objects for the database.</para>
            </summary>
            <value>
            <para>the parameter token used to separate objects for the database.</para>
            </value>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.FieldFormat">
            <summary>
            <para>When implemented by a class, gets the string format used to delimit fieldnames for the database.</para>
            </summary>
            <value>
            <para>the string format used to delimit fieldnames for the database.</para>
            </value>
            <example>
            <code>
            // SQL Server delimits fieldnames with square brackets []
            protected override char ParameterToken
            {
            	get { return "[{0}]"; }
            }
            </code>
            </example>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.AliasFormat">
            <summary>
            <para>When implemented by a class, gets the string format used to delimit aliases for the database.</para>
            </summary>
            <value>
            <para>the string format used to delimit aliases for the database.</para>
            </value>
            <example>
            <code>
            // SQL Server delimits aliases with single quotes ' '.
            protected override string AliasFormat
            {
            	get { return "'{0}'"; }
            }
            </code>
            </example>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.TableNameWithSchema">
            <summary>
            <para>Gets the complete table name (including schema) properly formatted for the current SQL dialect.</para>
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.QuerySourceWithSchema">
            <summary>
            <para>Gets the complete querysource name (including schema) properly formatted for the current SQL dialect.</para>
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.BuildSelectQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,System.String)">
            <summary>
            When implemented by a class, builds a provider-specific SQL SELECT query.
            </summary>
            <param name="db">A database object from the Enterprise Library</param>
            <param name="dbCommand">A command wrapper from the Enterprise Library</param>
            <param name="conjunction">The conjunction to use between parameters in the WHERE clause</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.BuildUpdateQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,System.String)">
            <summary>
            When implemented by a class, builds a provider-specific SQL UPDATE query.
            </summary>
            <param name="db">A database object from the Enterprise Library</param>
            <param name="dbCommand">A command wrapper from the Enterprise Library</param>
            <param name="conjunction">The conjunction to use between parameters in the WHERE clause</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.BuildInsertQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,System.String)">
            <summary>
            When implemented by a class, builds a provider-specific SQL INSERT query.
            </summary>
            <param name="db">A database object from the Enterprise Library</param>
            <param name="dbCommand">A command wrapper from the Enterprise Library</param>
            <param name="conjunction">The conjunction to use between parameters in the WHERE clause</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.BuildDeleteQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,System.String)">
            <summary>
            When implemented by a class, builds a provider-specific SQL DELETE query.
            </summary>
            <param name="db">A database object from the Enterprise Library</param>
            <param name="dbCommand">A command wrapper from the Enterprise Library</param>
            <param name="conjunction">The conjunction to use between parameters in the WHERE clause</param>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.Entity">
            <summary>
            An internal callback reference to the EasyObject. There is no need to use this externally.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.UseNoLock">
            <summary>
            Adds the (NOLOCK) table hint to a SELECT query
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.Distinct">
            <summary>
            Adds the DISTINCT modifier to the SELECT clause
            <note>This may not be support for all database providers</note>
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.TopN">
            <summary>
            Adds the TOPN modifier to the SELECT clause
            <note>This may not be support for all database providers</note>
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.ResultColumns">
            <summary>
            Returns the current database columns in the SELECT clause
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.UpdateColumns">
            <summary>
            Returns the current database columns in the UPDATE clause
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.InsertColumns">
            <summary>
            Returns the current database columns in the INSERT clause
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.InsertColumnValues">
            <summary>
            Returns the current database columns in the INSERT clause
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.ParameterValues">
            <summary>
            Returns the current values for the WHERE clause
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.OrderBy">
            <summary>
            Returns the current database columns in the ORDER BY clause
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.LastQuery">
            <summary>
            Contains the Query string from your last call to Query.Load(), this is useful for debugging purposes.
            </summary>
            <returns>A string containing the last executed SQL statement</returns>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.CountAll">
            <summary>
            If true, add a COUNT(*) Aggregate to the selected columns list.
            <note>This may not be support for all database providers</note>
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.CountAllAlias">
            <summary>
            If CountAll is set to true, use this to add a user-friendly column name.
            <note>This may not be support for all database providers</note>
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.DynamicQuery.WithRollup">
            <summary>
            If true, add WITH ROLLUP to the GROUP BY clause.
            <note>This may not be support for all database providers</note>
            </summary>
            <example>
            <code>
            prds.Query.WithRollup = true;
            </code>
            </example>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.txMgr_TransactionCommitted(System.Object,System.EventArgs)">
            <summary>
            This event is triggered when the TransactionManager calls for a commit to the current transaction.
            </summary>
            <param name="sender">The object that triggered the event</param>
            <param name="e">Any event arguments</param>
            <remarks>
            EasyObjects can't perform an AcceptChanges on the internal DataTable until the TransactionManager
            is ready to commit the current transaction. Because there may be many objects in a single transaction, this event
            is setup to receive notification when the TransactionManager is ready for the commit. EasyObjects then calls the
            AcceptChanges method so that the internal DataTable properly reflects the current state of the data.
            </remarks>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.Load">
            <summary>
            Execute the Query and loads your BusinessEntity. The default conjunction between the WHERE parameters is "AND"
            </summary>
            <returns>True if at least one record was loaded</returns>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.Load(System.String)">
            <summary>
            Execute the Query and loads your BusinessEntity. 
            You can pass in the conjunction that will be used between the WHERE parameters, either "AND" or "OR". 
            "AND" is the default.
            </summary>
            <param name="conjunction">The conjunction to use between WHERE parameters</param>
            <returns>True if at least one record was loaded, False if no records were loaded</returns>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.Update">
            <summary>
            Execute the Update query. The default conjunction between the WHERE parameters is "AND".
            </summary>
            <returns>True if at least one record was loaded</returns>
            <remarks>Executing an the UPDATE query has no effect on the records loaded in the Business Entity.</remarks>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.Update(System.String)">
            <summary>
            Execute the Update query without affecting the Business Entity.
            You can pass in the conjunction that will be used between the WHERE parameters, either "AND" or "OR". 
            "AND" is the default.
            </summary>
            <param name="conjunction">The conjunction to use between WHERE parameters</param>
            <remarks>Executing an the UPDATE query has no effect on the records loaded in the Business Entity.</remarks>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.Insert">
            <summary>
            Execute the INSERT query. The default conjunction between the WHERE parameters is "AND".
            </summary>
            <returns>True if at least one record was loaded</returns>
            <remarks>Executing the INSERT query has no effect on the records loaded in the Business Entity.</remarks>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.Insert(System.String)">
            <summary>
            Execute the INSERT query without affecting the Business Entity.
            You can pass in the conjunction that will be used between the WHERE parameters, either "AND" or "OR". 
            "AND" is the default.
            </summary>
            <param name="conjunction">The conjunction to use between WHERE parameters</param>
            <remarks>Executing the INSERT query has no effect on the records loaded in the Business Entity.</remarks>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.GetUpdateCommandWrapper">
            <summary>
            Builds the inline SQL command for a UPDATE
            </summary>
            <returns>A <seealso cref="T:System.Data.Common.DbCommand"/> populated with the inline SQL and parameters</returns>
            <remarks>This method passes AND as the default conjunction</remarks>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.GetUpdateCommandWrapper(System.String)">
            <summary>
            Builds the inline SQL command for a UPDATE
            </summary>
            <param name="conjunction">The conjunction to use between <seealso cref="T:NCI.EasyObjects.WhereParameter"/>s</param>
            <returns>A <seealso cref="T:System.Data.Common.DbCommand"/> populated with the inline SQL and parameters</returns>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.GetInsertCommandWrapper">
            <summary>
            Builds the inline SQL command for an INSERT
            </summary>
            <returns>A <seealso cref="T:System.Data.Common.DbCommand"/> populated with the inline SQL and parameters</returns>
            <remarks>This method passes AND as the default conjunction</remarks>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.GetInsertCommandWrapper(System.String)">
            <summary>
            Builds the inline SQL command for a INSERT
            </summary>
            <param name="conjunction">The conjunction to use between <seealso cref="T:NCI.EasyObjects.WhereParameter"/>s</param>
            <returns>A <seealso cref="T:System.Data.Common.DbCommand"/> populated with the inline SQL and parameters</returns>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.GetDeleteCommandWrapper">
            <summary>
            Builds the inline SQL command for a DELETE
            </summary>
            <returns>A <seealso cref="T:System.Data.Common.DbCommand"/> populated with the inline SQL and parameters</returns>
            <remarks>This method passes AND as the default conjunction</remarks>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.GetDeleteCommandWrapper(System.String)">
            <summary>
            Builds the inline SQL command for a DELETE
            </summary>
            <param name="conjunction">The conjunction to use between <seealso cref="T:NCI.EasyObjects.WhereParameter"/>s</param>
            <returns>A <seealso cref="T:System.Data.Common.DbCommand"/> populated with the inline SQL and parameters</returns>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddResultColumn(NCI.EasyObjects.SchemaItem)">
            <summary>
            The default result set for Query.Load is all of the columns in your Table or View. Once you call 
            AddResultColumn this changes to only the columns you have added via this method. For instance, 
            if you call AddResultColumn twice then only two columns will be returned in your result set. 
            </summary>
            <param name="item">A SchemaItem to add to the SELECT statement</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddResultColumn(System.String)">
            <summary>
            The default result set for Query.Load is all of the columns in your Table or View. Once you call 
            AddResultColumn this changes to only the columns you have added via this method. For instance, 
            if you call AddResultColumn twice then only two columns will be returned in your result set. 
            </summary>
            <param name="fieldName">The name of a column to add to the SELECT statement</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddResultColumnFormat(System.String)">
            <summary>
            Adds a provider-specific formatted column name to the SELECT statement
            </summary>
            <param name="fieldName">The name of a column to add to the SELECT statement</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.ClearAll">
            <summary>
            Clears all the result columns and parameters from the current instance
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.ResultColumnsClear">
            <summary>
            Calling this will set the result columns back to "all".
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddUpdateColumn(NCI.EasyObjects.SchemaItem)">
            <summary>
            The default result set for Query.Load is all of the columns in your Table or View. Once you call 
            AddResultColumn this changes to only the columns you have added via this method. For instance, 
            if you call AddResultColumn twice then only two columns will be returned in your result set. 
            </summary>
            <param name="item">A SchemaItem to add to the UPDATE statement</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddUpdateColumnWithValue(NCI.EasyObjects.SchemaItem,System.Object)">
            <summary>
            The default result set for Query.Load is all of the columns in your Table or View. Once you call 
            AddResultColumn this changes to only the columns you have added via this method. For instance, 
            if you call AddResultColumn twice then only two columns will be returned in your result set. 
            </summary>
            <param name="item">A SchemaItem to add to the UPDATE statement</param>
            <param name="paramValue">The value to update the column to</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.UpdateValuesClear">
            <summary>
            Calling this will clear all values from the UPDATE statement.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddInsertColumn(NCI.EasyObjects.SchemaItem)">
            <summary>
            Adds a column to the INSERT query 
            </summary>
            <param name="item">A SchemaItem to add to the INSERT statement</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddInsertColumn(System.String,System.String)">
            <summary>
            Adds a column and column value parameter to the INSERT query 
            </summary>
            <param name="columnName">A column to add to the INSERT statement</param>
            <param name="columnValueName">A column parameter name for the VALUES clause</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddInsertColumnWithValue(NCI.EasyObjects.SchemaItem,System.Object)">
            <summary>
            The default result set for Query.Load is all of the columns in your Table or View. Once you call 
            AddResultColumn this changes to only the columns you have added via this method. For instance, 
            if you call AddResultColumn twice then only two columns will be returned in your result set. 
            </summary>
            <param name="item">A SchemaItem to add to the UPDATE statement</param>
            <param name="paramValue">The value to update the column to</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.InsertValuesClear">
            <summary>
            Calling this will clear all values from the UPDATE statement.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddWhereParameter(NCI.EasyObjects.WhereParameter)">
             <summary>
             Adds the WhereParameter to the internal ArrayList.
             </summary>
             <param name="param">The WhereParameter to add</param>
             <remarks>		
             NOTE: This is called by the EasyObject framework and you should never call it. 
             We reserve the right to remove or change this method.
            </remarks>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.FlushWhereParameters">
             <summary>
             Clears the internal ArrayList of WhereParameters
             </summary>
             <remarks>		
             NOTE: This is called by the EasyObject framework and you should never call it. 
             We reserve the right to remove or change this method.
            </remarks>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddOrderBy(System.String,NCI.EasyObjects.WhereParameter.Dir)">
            <overloads>
            Adds an ORDER BY clause to the query. If you want 
            to order the data by two columns you will need to call this method twice.
            </overloads>
            <summary>
            Adds an ORDER BY clause to the query using the FieldName. If you want 
            to order the data by two columns you will need to call this method twice.
            </summary>
            <param name="fieldName">A column to sort by</param>
            <param name="direction">A <see cref="T:NCI.EasyObjects.WhereParameter.Dir" /> indicating the sort direction</param>
            <example>
            VB.NET
            <code>
            emps.Query.AddOrderBy("ExampleColumn", WhereParameter.Dir.DESC)
            emps.Query.AddOrderBy(EmployeesSchema.LastName, WhereParameter.Dir.ASC)
            emps.Query.AddOrderBy(EmployeesSchema.FirstName, WhereParameter.Dir.ASC)
            </code>
            C#
            <code>
            emps.Query.AddOrderBy("ExampleColumn", WhereParameter.Dir.DESC);
            emps.Query.AddOrderBy(EmployeesSchema.LastName, WhereParameter.Dir.ASC);
            emps.Query.AddOrderBy(EmployeesSchema.FirstName, WhereParameter.Dir.ASC);
            </code>
            </example>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddOrderBy(NCI.EasyObjects.SchemaItem,NCI.EasyObjects.WhereParameter.Dir)">
            <summary>
            Adds an ORDER BY clause to the query using the FieldName of the SchemaItem. If you want 
            to order the data by two columns you will need to call this method twice.
            </summary>
            <param name="item">A SchemaItem for the column you want to sort by</param>
            <param name="direction">Either Descending or Ascending</param>
            <example>
            VB.NET
            <code>
            emps.Query.AddOrderBy("ExampleColumn", WhereParameter.Dir.DESC)
            emps.Query.AddOrderBy(EmployeesSchema.LastName, WhereParameter.Dir.ASC)
            emps.Query.AddOrderBy(EmployeesSchema.FirstName, WhereParameter.Dir.ASC)
            </code>
            C#
            <code>
            emps.Query.AddOrderBy("ExampleColumn", WhereParameter.Dir.DESC);
            emps.Query.AddOrderBy(EmployeesSchema.LastName, WhereParameter.Dir.ASC);
            emps.Query.AddOrderBy(EmployeesSchema.FirstName, WhereParameter.Dir.ASC);
            </code>
            </example>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddOrderBy(NCI.EasyObjects.SchemaItem)">
            <summary>
            Adds an ORDER BY clause to the query using the FieldName of the SchemaItem. If you want 
            to order the data by two columns you will need to call this method twice.
            </summary>
            <param name="item">A SchemaItem for the column you want to sort by</param>
            <example>
            <code>
            emps.Query.AddOrderBy(EmployeesSchema.LastName)
            emps.Query.AddOrderBy(EmployeesSchema.FirstName)
            </code>
            </example>
            <remarks>The default sort order is ascending.</remarks>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddOrderByFormat(System.String,NCI.EasyObjects.WhereParameter.Dir)">
            <summary>
            Adds an ORDER BY clause to the query. The field is formatted using the <see cref="P:NCI.EasyObjects.DynamicQuery.FieldFormat"/>.
            </summary>
            <param name="fieldName">The field to be added to the ORDER BY</param>
            <param name="direction">The <see cref="T:NCI.EasyObjects.WhereParameter.Dir"/> direction to sort the results by</param>
            <example>
            <code>
            emps.Query.AddOrderBy("LastName", WhereParameter.Dir.ASC)
            emps.Query.AddOrderBy("FirstName", WhereParameter.Dir.ASC)
            </code>
            </example>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddOrderByFormat(System.String)">
            <summary>
            Adds an ORDER BY clause to the query. The field is formatted using the <see cref="P:NCI.EasyObjects.DynamicQuery.FieldFormat"/>.
            </summary>
            <param name="fieldName">The field to be added to the ORDER BY</param>
            <example>
            <code>
            emps.Query.AddOrderBy("LastName")
            emps.Query.AddOrderBy("FirstName")
            </code>
            </example>
            <remarks>The default sort order is ascending.</remarks>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddOrderBy(NCI.EasyObjects.DynamicQuery,NCI.EasyObjects.WhereParameter.Dir)">
            <summary>
            Adds an ORDER BY clause to the query using COUNT(*).
            Used with Query.CountAll set to true.
            Derived classes implement this, like SqlServerDynamicQuery and OracleDynamicQuery
            to account for differences in DBMS systems.
            </summary>
            <param name="countAll">This should be entity.Query</param>
            <param name="direction">Either Descending or Ascending</param>
            <example>
            <code>
            emps.Query.AddOrderBy(emps.Query, WhereParameter.Dir.ASC)</code>
            </example>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddOrderBy(NCI.EasyObjects.AggregateParameter,NCI.EasyObjects.WhereParameter.Dir)">
            <summary>
            Adds an ORDER BY clause to the query using aggregates.
            Derived classes implement this, like SqlServerDynamicQuery and OracleDynamicQuery
            to account for differences in DBMS systems.
            </summary>
            <param name="aggregate">This should be an entry from your Aggregate class</param>
            <param name="direction">Either Descending or Ascending</param>
            <example>
            <code>
            emps.Query.AddOrderBy(emps.Aggregate.CategoryID, WhereParameter.Dir.ASC)</code>
            </example>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddConjunction(NCI.EasyObjects.WhereParameter.Conj)">
            <summary>
            A Query has a default conjunction between WHERE parameters, this method lets you intermix those 
            and alternate between AND/OR.
            </summary>
            <param name="conjunction">The conjunction to use, either AND or OR</param>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.OpenParenthesis">
            <summary>
            Used for advanced queries
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.CloseParenthesis">
            <summary>
            Used for advanced queries
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddAggregateParameter(NCI.EasyObjects.AggregateParameter)">
            <summary>
            Adds the AggregateParameter to the internal ArrayList.
            </summary>
            <param name="param">The AggregateParameter</param>
            <remarks>
            NOTE: This is called by the EasyObject framework and you should never call it. 
            We reserve the right to remove or change this method.
            </remarks>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.FlushAggregateParameters">
             <summary>
             Clears the internal ArrayList of AggregateParameters
             </summary>
             <remarks>		
             NOTE: This is called by the EasyObject framework and you should never call it. 
             We reserve the right to remove or change this method.
            </remarks>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddGroupBy(System.String)">
            <overloads>
            Adds a GROUP BY clause to the query. If you want 
            to order the data by two columns you will need to call this method twice.
            If you call AddGroupBy, ANSI SQL requires an AddGroupBy for each AddResultColumn
            that is not an aggregate. Check your DBMS docs.
            </overloads>
            <summary>
            Adds a GROUP BY clause to the query using the FieldName. If you want 
            to order the data by two columns you will need to call this method twice.
            </summary>
            <param name="fieldName">A column to sort by</param>
            <example>
            VB.NET
            <code>
            emps.Query.AddOrderBy("ExampleColumn")
            </code>
            C#
            <code>
            emps.Query.AddOrderBy("ExampleColumn");
            </code>
            </example>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddGroupBy(NCI.EasyObjects.SchemaItem)">
            <summary>
            Adds a GROUP BY clause to the query using the FieldName of the SchemaItem. If you want 
            to order the data by two columns you will need to call this method twice.
            </summary>
            <param name="item">A SchemaItem for the column you want to sort by</param>
            <example>
            VB.NET
            <code>
            emps.Query.AddOrderBy(EmployeesSchema.LastName)
            emps.Query.AddOrderBy(EmployeesSchema.FirstName)
            </code>
            C#
            <code>
            emps.Query.AddOrderBy(EmployeesSchema.LastName);
            emps.Query.AddOrderBy(EmployeesSchema.FirstName);
            </code>
            </example>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddGroupByFormat(System.String)">
            <summary>
            Adds a GROUP BY clause to the query using the FieldName. The field is formatted
            using the current data provider's <see cref="P:NCI.EasyObjects.DynamicQuery.FieldFormat"/>.
            </summary>
            <param name="fieldName">The raw name of the column</param>
            <example>
            VB.NET
            <code>
            emps.Query.AddOrderBy("LastName")
            emps.Query.AddOrderBy("FirstName")
            </code>
            C#
            <code>
            emps.Query.AddOrderBy("LastName");
            emps.Query.AddOrderBy("FirstName");
            </code>
            </example>
        </member>
        <member name="M:NCI.EasyObjects.DynamicQuery.AddGroupBy(NCI.EasyObjects.AggregateParameter)">
            <summary>
            Adds an ORDER BY clause to the query using aggregates.
            Derived classes implement this, like SqlServerDynamicQuery and OracleDynamicQuery
            to account for differences in DBMS systems.
            </summary>
            <param name="aggregate">This should be an entry from your Aggregate class</param>
            <example>
            <code>
            emps.Query.AddGroupBy(emps.Aggregate.City)</code>
            </example>
        </member>
        <member name="T:NCI.EasyObjects.EasyObject">
            <summary>
            Provides the base functionality for an EasyObject.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.Load(System.Data.IDataParameterCollection)">
            <summary>
            <para>Loads the internal DataTable with values from database Output parameters.</para>
            </summary>
            <param name="parameterCollection">The collection of parameters associated with the Command Wrapper</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.Load(System.Data.DataSet)">
            <summary>
            <para>Loads the internal DataTable with the first table in a DataSet.</para>
            </summary>
            <param name="ds">The DataSet from which to extract the DataTable</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.Load(System.Data.DataSet,System.Int32)">
            <summary>
            <para>Loads the internal DataTable with the specified table index in a DataSet.</para>
            </summary>
            <param name="ds">The DataSet from which to extract the DataTable</param>
            <param name="tableIndex">The index of the table in the DataSet</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.Load(System.Data.DataSet,System.String)">
            <summary>
            <para>Loads the internal DataTable with the named table in a DataSet.</para>
            </summary>
            <param name="ds">The DataSet from which to extract the DataTable</param>
            <param name="tableName">The name of the table in the DataSet</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.Load(System.Data.DataTable)">
            <summary>
            <para>Loads the internal DataTable.</para>
            </summary>
            <param name="dt">The DataTable to load the object with</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.Append(System.Data.DataTable)">
            <summary>
            <para>Loads the internal DataTable.</para>
            </summary>
            <param name="dt">The DataTable to load the object with</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadSchema">
            <summary>
            <para>Loads the internal DataTable with columns based on the EasyObject's schema class.</para>
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.ApplyPrimaryKeys">
            <summary>
            Apply the primary keys from the schema to the internal DataTable
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.PrimaryKeys">
            <summary>
            A generic list of DataColumns that match the current schema's primary keys
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.AddColumn(System.String,System.Type)">
             <summary>
             After loading your BusinessEntity you can add custom columns, this is typically done to create a calculated column, however, it can
             be used to add a column just to hold state, it will not be saved to the database of course.
             </summary>
             <param name="name">The name of the Column</param>
             <param name="dataType">Use Type.GetType() as in Type.GetType("System.String")</param>
             <returns>The newly created DataColumn</returns>
             <example>
             VB.NET
             <code>
             Dim emps As New Employees
             If emps.LoadAll() Then
            
                Dim col As DataColumn = emps.AddColumn("FullName", Type.GetType("System.String"))
                col.Expression = Employees.ColumnNames.LastName + "+ ', ' + " + Employees.ColumnNames.FirstName
            
                Dim fullName As String
            
                Do
                    fullName = CType(emps.GetColumn("FullName"), String)
                Loop Until Not emps.MoveNext
                
            
             End If
             </code>
             C#
             <code>
             Employees emps = new Employees();
            	if(emps.LoadAll())
            	{
            		DataColumn col = emps.AddColumn("FullName", Type.GetType("System.String"));
            		col.Expression = Employees.ColumnNames.LastName + "+ ', ' + " + Employees.ColumnNames.FirstName;
            
            		string fullName;
            
            		do
            			fullName = emps.GetColumn("FullName") as string;
            		while(emps.MoveNext());
            	}
             </code>
             </example>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.AddNew">
            <summary>
            <para>Adds a new row to the internal DataTable.</para>
            </summary>
            <remarks>
            <para>If the internal DataTable is null (Nothing in Visual Basic), the DataTable is created from information stored in the EasyObject's Schema class.</para>
            </remarks>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.MarkAsDeleted">
            <summary>
            <para>Marks the current row in the internal DataTable as deleted.</para>
            </summary>
            <remarks>
            <para>The row is not actually deleted until the EasyObject's Save() method is called.</para>
            </remarks>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.DeleteAll">
            <summary>
            <para>Marks every row in the internal DataTable as deleted.</para>
            </summary>
            <remarks>
            <para>The row is not actually deleted until the EasyObject's Save() method is called.</para>
            </remarks>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.RejectChanges">
            <summary>
            <para>Rolls back the internal DataTable to the state is was in when it was loaded, or the last time AcceptChanges was called.</para>
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.AcceptChanges">
            <summary>
            <para>Commits all the changes in the internal DataTable since the last time AcceptChanges was called.</para>
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.RowState">
            <summary>
            <para>Gets the current state of the current row in the internal DataTable.</para>
            </summary>
            <returns>A DataRowState enumeration</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetChanges">
            <summary>
            <para>Gets a copy of internal DataTable containing all the changes to it since it was last loaded, or since AcceptChanges was last called.</para>
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetChanges(System.Data.DataRowState)">
            <summary>
            <para>Gets a copy of internal DataTable containing all the changes to it since it was last loaded, or since AcceptChanges was last called.</para>
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.Rewind">
            <summary>
            <para>Resets the internal DataTable to the first row.</para>
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.MoveNext">
            <summary>
            <para>Moves the current row of internal DataTable.</para>
            </summary>
            <returns>True if the row was successfully changed, False for no more rows in the DataTable</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.FlushData">
            <summary>
            <para>Resets the EasyObject to an empty state.</para>
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.Save(System.Data.CommandType)">
            <summary>
            <para>Saves all the rows in the EasyObject.</para>
            </summary>
            <remarks>
            <para>
            Any rows with a DataRowState of Added will call the Insert routine. Any rows with a DataRowState of 
            Modified will call the Update routine. Any rows with a DataRowState of Deleted will call the Deleted
            routine.
            </para>
            <para>
            All database calls will participate in the current transaction. If no transaction is present, then
            a new transaction will be created. The entire EasyObject will succeed or fail in one transaction.
            </para>
            </remarks>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.Save">
            <summary>
            Overload to save with a default <seealso cref="T:System.Data.CommandType"/>
            </summary>
            <remarks>The default CommandType is set by calling <seealso cref="P:NCI.EasyObjects.EasyObject.DefaultCommandType"/></remarks>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.txMgr_TransactionCommitted(System.Object,System.EventArgs)">
            <summary>
            This event is triggered when the TransactionManager calls for a commit to the current transaction.
            </summary>
            <param name="sender">The object that triggered the event</param>
            <param name="e">Any event arguments</param>
            <remarks>
            EasyObjects can't perform an <see cref="M:NCI.EasyObjects.EasyObject.AcceptChanges"/> on the internal DataTable until the TransactionManager
            is ready to commit the current transaction. Because there may be many objects in a single transaction, this event
            is setup to receive notification when the TransactionManager is ready for the commit. EasyObjects then calls the
            <see cref="M:NCI.EasyObjects.EasyObject.AcceptChanges"/> method so that the internal DataTable properly reflects the current state of the data.
            </remarks>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSql(System.String)">
            <summary>
            <para>Load the EasyObject with the results from a SQL query or stored procedure.</para>
            </summary>
            <param name="sp">The name of the stored procedure to execute</param>
            <remarks>
            <para>
            The internal DataTable is loaded with any results returned from the stored procedure or query, but
            the columns may or may not line up with the EasyObject's Schema class. There is no restriction on the
            type or number of columns returned in the query.
            </para>
            <para>
            To see if any errors occurred from the database, see <see cref="P:NCI.EasyObjects.EasyObject.ErrorMessage"/>.
            </para>
            </remarks>
            <returns>A boolean value indicating success or failure</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSql(System.String,System.Collections.Specialized.ListDictionary)">
            <summary>
            <para>Load the EasyObject with the results from a SQL query or stored procedure.</para>
            </summary>
            <param name="sp">The name of the stored procedure to execute</param>
            <param name="parameters">The ListDictionary collection of parameters to send to the stored procedure</param>
            <remarks>
            <para>
            The internal DataTable is loaded with any results returned from the stored procedure or query, but
            the columns may or may not line up with the EasyObject's Schema class. There is no restriction on the
            type or number of columns returned in the query.
            </para>
            <para>
            To see if any errors occurred from the database, see <see cref="P:NCI.EasyObjects.EasyObject.ErrorMessage"/>.
            </para>
            </remarks>
            <returns>A boolean value indicating success or failure</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSql(System.String,System.Collections.Specialized.ListDictionary,System.Data.CommandType)">
            <summary>
            <para>Load the EasyObject with the results from a SQL query or stored procedure.</para>
            </summary>
            <param name="sp">The name of the stored procedure to execute</param>
            <param name="parameters">The ListDictionary collection of parameters to send to the stored procedure</param>
            <param name="commandType">A CommandType enumeration which tells the type of query to run, either StoredProcedure or Text</param>
            <remarks>
            <para>
            The internal DataTable is loaded with any results returned from the stored procedure or query, but
            the columns may or may not line up with the EasyObject's Schema class. There is no restriction on the
            type or number of columns returned in the query.
            </para>
            <para>
            To see if any errors occurred from the database, see <see cref="P:NCI.EasyObjects.EasyObject.ErrorMessage"/>.
            </para>
            </remarks>
            <returns>A boolean value indicating success or failure</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSql(System.Data.Common.DbCommand)">
            <summary>
            <para>Load the EasyObject with the results from a SQL query or stored procedure.</para>
            </summary>
            <param name="dbCommand">The command wrapper to use when calling ExecuteDataSet.</param>
            <returns>True if one or more rows was returned, false if not or an exception occurred.</returns>
            <remarks>
            <para>
            The internal DataTable is loaded with any results returned from the stored procedure or query, but
            the columns may or may not line up with the EasyObject's Schema class. There is no restriction on the
            type or number of columns returned in the query.
            </para>
            <para>
            To see if any errors occurred from the database, see <see cref="P:NCI.EasyObjects.EasyObject.ErrorMessage"/>.
            </para>
            </remarks>
            <returns>A boolean value indicating success or failure</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSqlNoExec(System.String)">
            <summary>
            <para>Execute a SQL query or stored procedure without affecting the EasyObject.</para>
            </summary>
            <param name="sp">The name of the stored procedure to execute</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSqlNoExec(System.String,System.Collections.Specialized.ListDictionary)">
            <summary>
            <para>Execute a SQL query or stored procedure without affecting the EasyObject.</para>
            </summary>
            <param name="sp">The name of the stored procedure to execute</param>
            <param name="parameters">The ListDictionary collection of parameters to send to the stored procedure</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSqlNoExec(System.String,System.Collections.Specialized.ListDictionary,System.Data.CommandType)">
            <summary>
            <para>Execute a SQL query or stored procedure without affecting the EasyObject.</para>
            </summary>
            <param name="sp">The name of the stored procedure to execute</param>
            <param name="parameters">The ListDictionary collection of parameters to send to the stored procedure</param>
            <param name="commandType">A CommandType enumeration which tells the type of query to run, either StoredProcedure or Text</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSqlNoExec(System.String,System.Collections.Specialized.ListDictionary,System.Data.CommandType,System.Int32)">
            <summary>
            <para>Execute a SQL query or stored procedure without affecting the EasyObject.</para>
            </summary>
            <param name="sp">The name of the stored procedure to execute</param>
            <param name="parameters">The ListDictionary collection of parameters to send to the stored procedure</param>
            <param name="commandType">A CommandType enumeration which tells the type of query to run, either StoredProcedure or Text</param>
            <param name="commandTimeout">The command timeout value, 0 for infinite</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSqlNoExec(System.Data.Common.DbCommand)">
            <summary>
            <para>Execute a SQL query or stored procedure without affecting the EasyObject.</para>
            </summary>
            <param name="dbCommand">The command wrapper to use when calling ExecuteNonQuery.</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSqlScalar(System.String)">
            <summary>
            <para>Return a value from a SQL query or stored procedure without affecting the EasyObject.</para>
            </summary>
            <param name="sp">The name of the stored procedure to execute</param>
            <returns>An object value from the database Command</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSqlScalar(System.String,System.Collections.Specialized.ListDictionary)">
            <summary>
            <para>Return a value from a SQL query or stored procedure without affecting the EasyObject.</para>
            </summary>
            <param name="sp">The name of the stored procedure to execute</param>
            <param name="parameters">The ListDictionary collection of parameters to send to the stored procedure</param>
            <returns>An object value from the database Command</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSqlScalar(System.String,System.Collections.Specialized.ListDictionary,System.Data.CommandType)">
            <summary>
            <para>Return a value from a SQL query or stored procedure without affecting the EasyObject.</para>
            </summary>
            <param name="sp">The name of the stored procedure to execute</param>
            <param name="parameters">The ListDictionary collection of parameters to send to the stored procedure</param>
            <param name="commandType">A CommandType enumeration which tells the type of query to run, either StoredProcedure or Text</param>
            <returns>An object value from the database Command</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSqlScalar(System.String,System.Collections.Specialized.ListDictionary,System.Data.CommandType,System.Int32)">
            <summary>
            <para>Return a value from a SQL query or stored procedure without affecting the EasyObject.</para>
            </summary>
            <param name="sp">The name of the stored procedure to execute</param>
            <param name="parameters">The ListDictionary collection of parameters to send to the stored procedure</param>
            <param name="commandType">A CommandType enumeration which tells the type of query to run, either StoredProcedure or Text</param>
            <param name="commandTimeout">The command timeout value, 0 for infinite</param>
            <returns>An object value from the database Command</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSqlScalar(System.Data.Common.DbCommand)">
            <summary>
            <para>Return a value from a SQL query or stored procedure without affecting the EasyObject.</para>
            </summary>
            <param name="dbCommand">The command wrapper to use when calling ExecuteNonQuery.</param>
            <returns>An object with the result of the SQL command.</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSqlReader(System.String)">
            <summary>
            <para>Return an IDataReader from a SQL query or stored procedure without affecting the EasyObject.</para>
            </summary>
            <param name="sp">The name of the stored procedure to execute</param>
            <returns>An object value from the database Command</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSqlReader(System.String,System.Collections.Specialized.ListDictionary)">
            <summary>
            <para>Return an IDataReader from a SQL query or stored procedure without affecting the EasyObject.</para>
            </summary>
            <param name="sp">The name of the stored procedure to execute</param>
            <param name="parameters">The ListDictionary collection of parameters to send to the stored procedure</param>
            <returns>An object value from the database Command</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSqlReader(System.String,System.Collections.Specialized.ListDictionary,System.Data.CommandType)">
            <summary>
            <para>Return an IDataReader from a SQL query or stored procedure without affecting the EasyObject.</para>
            </summary>
            <param name="sp">The name of the stored procedure to execute</param>
            <param name="parameters">The ListDictionary collection of parameters to send to the stored procedure</param>
            <param name="commandType">A CommandType enumeration which tells the type of query to run, either StoredProcedure or Text</param>
            <returns>An object value from the database Command</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSqlReader(System.String,System.Collections.Specialized.ListDictionary,System.Data.CommandType,System.Int32)">
            <summary>
            <para>Return an IDataReader from a SQL query or stored procedure without affecting the EasyObject.</para>
            </summary>
            <param name="sp">The name of the stored procedure to execute</param>
            <param name="parameters">The ListDictionary collection of parameters to send to the stored procedure</param>
            <param name="commandType">A CommandType enumeration which tells the type of query to run, either StoredProcedure or Text</param>
            <param name="commandTimeout">The command timeout value, 0 for infinite</param>
            <returns>An object value from the database Command</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LoadFromSqlReader(System.Data.Common.DbCommand)">
            <summary>
            <para>Return an IDataReader from a SQL query or stored procedure without affecting the EasyObject.</para>
            </summary>
            <param name="dbCommand">The command wrapper to use when calling ExecuteNonQuery.</param>
            <returns>An object with the result of the SQL command.</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetDbType(System.Type)">
            <summary>
            <para>Maps a system type to a DbType enumeration.</para>
            </summary>
            <param name="sysType">The system type to translate</param>
            <returns>A DbType enumeration</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.PreSave">
            <summary>
            <para>Perform any operations to the EasyObject before saving.</para>
            </summary>
            <remarks>
            This function used to be where the strings were "justified" before sending to the database. 
            That feature has now been deprecated because it's a remnant of some old code. But if you need
            to do some pre-processing before the Save, just override this method.
            </remarks>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.PostSave(System.Data.IDataParameterCollection)">
            <summary>
            <para>Perform any operations to the EasyObject after saving.</para>
            </summary>
            <remarks>This function has been deprecated and should not be used. It's a remnant of some old code.</remarks>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetDatabase">
            <summary>
            <para>Get the database defined in the configuration file.</para>
            </summary>
            <remarks>If no instance name is specified in DatabaseInstanceName, the default instance is returned.</remarks>
            <returns>A reference to a Database object.</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.IsColumnNull(System.String)">
            <summary>
            <para>Checks if a particular column in the EasyObject has a null value.</para>
            </summary>
            <remarks>The "s_" properties will automatically return a string value for the property, and String.Empty if the column value is null.</remarks>
            <example>
            <code>
            Employee emp = new Employee();
            if (!emp.IsColumnNull(EmployeeSchema.FirstName.FieldName)
            {
            	txtFirstName.Text = emp.FirstName
            }
            </code>
            </example>
            <returns>True if the column is null, False if not</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.IsColumnNull(System.String,System.Boolean)">
            <summary>
            <para>Checks if a particular column in the EasyObject has a null value. This overload will optionally ignore if the column is missing from the current schema.</para>
            </summary>
            <remarks>The "s_" properties will automatically return a string value for the property, and String.Empty if the column value is null.</remarks>
            <example>
            <code>
            Employee emp = new Employee();
            if (!emp.IsColumnNull(EmployeeSchema.FirstName.FieldName)
            {
            	txtFirstName.Text = emp.FirstName
            }
            </code>
            </example>
            <returns>True if the column is null, False if not</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetColumnNull(System.String)">
            <summary>
            Use this method to set a column to DBNull.Value which will translate to NULL in your DBMS system.
            </summary>
            <param name="fieldName">The name of the column.</param>
            <remarks>Use the generated <see cref="T:NCI.EasyObjects.Schema"/> class to call this function.</remarks>
            <example>
            VB.NET
            <code>
            emps.SetColumnNull(EmployeesSchema.MiddleInitial)
            </code>
            C#
            <code>
            emps.SetColumnNull(EmployeesSchema.MiddleInitial);
            </code>
            </example>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetInsertCommand">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetInsertCommand(System.Data.CommandType)">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetUpdateCommand">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetUpdateCommand(System.Data.CommandType)">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetDeleteCommand">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetDeleteCommand(System.Data.CommandType)">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.ApplyDefaults">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetProperties">
            <summary>
            Retrieves the list of the object's properties using reflection and returns them in an array
            </summary>
            <returns>An ArrayList containing the names of the properties</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetProperty(System.String,System.String)">
            <summary>
            Sets a property value using the property name via reflection
            </summary>
            <param name="propertyName">The name of the property to set</param>
            <param name="propertyValue">The value to set the property to</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetPropertyByNamedValue(System.String)">
            <summary>
            Retrieves the value of a property using the name via reflection
            </summary>
            <param name="propertyName">The name of the property to retrieve the value</param>
            <returns>An object containing the property value</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetColumn(System.String,System.Object)">
            <summary>
            This is the typeless version, this method should only be used for columns that you added via <see cref="M:NCI.EasyObjects.EasyObject.AddColumn(System.String,System.Type)"/> or to access
            extra columns brought back by changing your <see cref="P:NCI.EasyObjects.EasyObject.QuerySource"/> to a SQL View.
            </summary>
            <param name="columnName">The name of the column, "MyColumn"</param>
            <param name="Value">The value to set the column to</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetColumn(System.String)">
            <summary>
            This is the typeless version, this method should only be used for columns that you added via <see cref="M:NCI.EasyObjects.EasyObject.AddColumn(System.String,System.Type)"/> or to access
            extra columns brought back by changing your <see cref="P:NCI.EasyObjects.EasyObject.QuerySource"/> to a SQL View.
            </summary>
            <param name="columnName">The name of the column, "MyColumn"</param>
            <returns>The value, you will have to typecast it to the proper type.</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.LSet(System.String,System.Int32)">
            <summary>
            Mimics the old VB LSet function, which places a value within a padded string of a defined length.
            </summary>
            <param name="field">The value to place in the padded string</param>
            <param name="length">The maximum length of the padded string</param>
            <returns>A string containing the value and any string padding up to the length</returns>
            <remarks>
            If the length of the value is greater than the maximum padded length, then the original string is returned.
            </remarks>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.RSet(System.String,System.Int32)">
            <summary>
            Mimics the old VB RSet function, which places a value within a padded string of a defined length.
            </summary>
            <param name="field">The value to place in the padded string</param>
            <param name="length">The maximum length of the padded string</param>
            <returns>A string containing the value and any string padding up to the length</returns>
            <remarks>
            If the length of the value is greater than the maximum padded length, then the original string is returned.
            </remarks>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetString(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <returns>The value</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetString(System.String,System.String)">
            <summary>
            Used by the Properties in your generated class
            </summary>
            <param name="fieldName">The name of the column</param>
            <param name="value">The value to store</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetString(System.String,System.String,NCI.EasyObjects.SchemaItemJustify,System.Int32)">
            <summary>
            Stores a justified string in the internal DataTable. 
            </summary>
            <param name="fieldName">The name of the column</param>
            <param name="value">The value to store</param>
            <param name="justify">The <see cref="T:NCI.EasyObjects.SchemaItemJustify"/> setting</param>
            <param name="length">The maximum length of the padded string</param>
            <remarks>This method has been depracated in anticipation of removing the SchemaItemJustify functionality.</remarks>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetBoolean(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name in the internal DataTable</param>
            <returns>The value stored in the column</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetBoolean(System.String,System.Boolean)">
            <summary>
            Used by the Properties in your generated class
            </summary>
            <param name="fieldName">The name of the column</param>
            <param name="value">The value to store</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetShort(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name in the internal DataTable</param>
            <returns>The value stored in the column</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetShort(System.String,System.Int16)">
            <summary>
            Used by the Properties in your generated class
            </summary>
            <param name="fieldName">The name of the column</param>
            <param name="value">The value to store</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetSingle(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name in the internal DataTable</param>
            <returns>The value stored in the column</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetSingle(System.String,System.Single)">
            <summary>
            Used by the Properties in your generated class
            </summary>
            <param name="fieldName">The name of the column</param>
            <param name="value">The value to store</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetInt32(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name in the internal DataTable</param>
            <returns>The value stored in the column</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetInt32(System.String,System.Int32)">
            <summary>
            Used by the Properties in your generated class
            </summary>
            <param name="fieldName">The name of the column</param>
            <param name="value">The value to store</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetInteger(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name in the internal DataTable</param>
            <returns>The value stored in the column</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetInteger(System.String,System.Int32)">
            <summary>
            Used by the Properties in your generated class
            </summary>
            <param name="fieldName">The name of the column</param>
            <param name="value">The value to store</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetLong(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name in the internal DataTable</param>
            <returns>The value stored in the column</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetLong(System.String,System.Int64)">
            <summary>
            Used by the Properties in your generated class
            </summary>
            <param name="fieldName">The name of the column</param>
            <param name="value">The value to store</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetObject(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name in the internal DataTable</param>
            <returns>The value stored in the column</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetObject(System.String,System.Object)">
            <summary>
            Used by the Properties in your generated class
            </summary>
            <param name="fieldName">The name of the column</param>
            <param name="value">The value to store</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetByteArray(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name in the internal DataTable</param>
            <returns>The value stored in the column</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetByteArray(System.String,System.Byte[])">
            <summary>
            Used by the Properties in your generated class
            </summary>
            <param name="fieldName">The name of the column</param>
            <param name="value">The value to store</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetByte(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name in the internal DataTable</param>
            <returns>The value stored in the column</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetByte(System.String,System.Byte)">
            <summary>
            Used by the Properties in your generated class
            </summary>
            <param name="fieldName">The name of the column</param>
            <param name="value">The value to store</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetFloat(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name in the internal DataTable</param>
            <returns>The value stored in the column</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetFloat(System.String,System.Single)">
            <summary>
            Used by the Properties in your generated class
            </summary>
            <param name="fieldName">The name of the column</param>
            <param name="value">The value to store</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetDouble(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name in the internal DataTable</param>
            <returns>The value stored in the column</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetDouble(System.String,System.Double)">
            <summary>
            Used by the Properties in your generated class
            </summary>
            <param name="fieldName">The name of the column</param>
            <param name="value">The value to store</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetDecimal(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name in the internal DataTable</param>
            <returns>The value stored in the column</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetDecimal(System.String,System.Decimal)">
            <summary>
            Used by the Properties in your generated class
            </summary>
            <param name="fieldName">The name of the column</param>
            <param name="value">The value to store</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetDateTime(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name in the internal DataTable</param>
            <returns>The value stored in the column</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetDateTime(System.String,System.DateTime)">
            <summary>
            Used by the Properties in your generated class
            </summary>
            <param name="fieldName">The name of the column</param>
            <param name="value">The value to store</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetGuid(System.String,System.Guid)">
            <summary>
            Used by the Properties in your generated class
            </summary>
            <param name="fieldName">The name of the column</param>
            <param name="value">The value to store</param>
            <returns>The value stored in the column</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetGuid(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name in the internal DataTable</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetTimeSpan(System.String,System.TimeSpan)">
            <summary>
            Used by the Properties in your generated class
            </summary>
            <param name="fieldName">The name of the column</param>
            <param name="value">The value to store</param>
            <returns>The value stored in the column</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetTimeSpan(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name in the internal DataTable</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetItemString(NCI.EasyObjects.SchemaItem)">
            <summary>
            Retrieves the string value of the <see cref="T:NCI.EasyObjects.SchemaItem"/>
            </summary>
            <param name="item">The <see cref="T:NCI.EasyObjects.SchemaItem"/> to retrieve</param>
            <returns>A string value of the item, or empty if the column contains a NULL</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetItemString(NCI.EasyObjects.SchemaItem,System.String)">
            <summary>
            Retrieves the string value of the <see cref="T:NCI.EasyObjects.SchemaItem"/>
            </summary>
            <param name="item">The <see cref="T:NCI.EasyObjects.SchemaItem"/> to retrieve</param>
            <param name="defaultValue">If the column contains a NULL, this value will be returned instead</param>
            <returns>A string value of the item, or the default value if the column contains a NULL</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetItem(NCI.EasyObjects.SchemaItem,System.String)">
            <summary>
            Sets the value for a <see cref="T:NCI.EasyObjects.SchemaItem"/> in the internal DataTable.
            </summary>
            <param name="item">A <see cref="T:NCI.EasyObjects.SchemaItem"/> to set</param>
            <param name="value">The value to store in the column</param>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetGuidAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <returns>The value</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetGuidAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetBoolAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <returns>The value</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetBooleanAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <returns>The value</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetBoolAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetBooleanAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetStringAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <returns>The value</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetStringAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetIntAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <returns>The value</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetIntegerAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <returns>The value</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetIntAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetIntegerAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetLongAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <returns>The value</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetLongAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetShortAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <returns>The value</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetShortAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetSingleAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <returns>The value</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetSingleAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetDateTimeAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <returns>The value</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetDateTimeAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetDecimalAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <returns>The value</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetDecimalAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetFloatAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <returns>The value</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetFloatAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetDoubleAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <returns>The value</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetDoubleAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetByteAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <returns>The value</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetByteAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.SetTimeSpanAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.GetTimeSpanAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="fieldName">The column name to store the value in</param>
            <returns>The value</returns>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.Serialize">
            <summary>
            This method will allow you to save the contents of the EasyObject to XML.
            It is saved as a DataSet with Schema, data, and Rowstate as a DiffGram.
            You can load this data into another entity of the same type via <see cref="M:NCI.EasyObjects.EasyObject.Deserialize(System.String)"/>. 
            Call <see cref="M:NCI.EasyObjects.EasyObject.GetChanges"/> before calling Serialize to serialize only the modified data.
            </summary>
            <returns>A string containing the XML</returns>
            <example>
            VB.NET
            <code>
            Dim emps As New Employees
            emps.Query.Load()              ' emps.RowCount = 200
            emps.FirstName = "Noonan"      ' Change first row
            emps.GetChanges()              ' emps.RowCount now = 1 
            Dim xml As String = emps.Serialize()
            
            ' Now reload that single record into a new Employees object and Save it
            Dim empsClone As New Employees
            empsClone.Deserialize(xml)
            empsClone.Save()
            </code>
            C#
            <code>
            Employees emps = new Employees();
            emps.LoadAll();                // emps.RowCount = 200
            emps.LastName = "Noonan";      // Change first row
            emps.GetChanges();             // emps.RowCount now = 1 
            string str = emps.Serialize();
            
            // Now reload that single record into a new Employees object and Save it
            Employees empsClone = new Employees();
            empsClone.Deserialize(str);
            empsClone.Save();
            </code> 
            </example>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.Deserialize(System.String)">
            <summary>
            Reload an EasyObject from a previous call to <see cref="M:NCI.EasyObjects.EasyObject.Serialize"/>.
            </summary>
            <param name="xml">The string containing the XML to reload</param>
            <example>
            VB.NET
            <code>
            Dim emps As New Employees
            emps.Query.Load()              ' emps.RowCount = 200
            emps.FirstName = "Noonan"      ' Change first row
            emps.GetChanges()              ' emps.RowCount now = 1 
            Dim xml As String = emps.Serialize()
            
            ' Now reload that single record into a new Employees object and Save it
            Dim empsClone As New Employees
            empsClone.Deserialize(xml)
            empsClone.Save()
            </code>
            C#
            <code>
            Employees emps = new Employees();
            emps.LoadAll();                // emps.RowCount = 200
            emps.LastName = "Noonan";      // Change first row
            emps.GetChanges();             // emps.RowCount now = 1 
            string str = emps.Serialize();
            
            // Now reload that single record into a new Employees object and Save it
            Employees empsClone = new Employees();
            empsClone.Deserialize(str);
            empsClone.Save();
            </code> 
            </example>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.ToXml">
            <summary>
            This method will allow you to save the contents of the EasyObject to XML.
            You can load this data into another EasyObject of the same type via <see cref="M:NCI.EasyObjects.EasyObject.FromXml(System.String)"/>. 
            Call <see cref="M:NCI.EasyObjects.EasyObject.GetChanges"/> before calling ToXml to serialize only the modified data.
            </summary>
            <returns>A string containing the XML</returns>
            <example>
            VB.NET
            <code>
            Dim emps As New Employees
            emps.Query.Load()              ' emps.RowCount = 200
            emps.FirstName = "Noonan"      ' Change first row
            emps.GetChanges()              ' emps.RowCount now = 1 
            
            ' Now reload that single record into a new Employees object and Save it
            Dim xml As String = emps.ToXml()
            Dim empsClone As New Employees
            empsClone.FromXml(xml)
            empsClone.Save()
            </code>
            C#
            <code>
            Employees emps = new Employees();
            emps.LoadAll();                // emps.RowCount = 200
            emps.LastName = "Noonan";      // Change first row
            emps.GetChanges();             // emps.RowCount now = 1 
            
            // Now reload that single record into a new Employees object and Save it
            string str = emps.ToXml();
            Employees empsClone = new Employees();
            empsClone.FromXml(str);
            empsClone.Save();
            </code> 
            </example>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.ToXml(System.Data.XmlWriteMode)">
            <summary>
            This method will allow you to save the contents of the EasyObject to XML.
            You can load this data into another EasyObject of the same type via <see cref="M:NCI.EasyObjects.EasyObject.FromXml(System.String)"/>. 
            Call <see cref="M:NCI.EasyObjects.EasyObject.GetChanges"/> before calling ToXml to serialize only the modified data.
            </summary>
            <returns>A string containing the XML</returns>
            <example>
            VB.NET
            <code>
            Dim emps As New Employees
            emps.Query.Load()              ' emps.RowCount = 200
            emps.FirstName = "Noonan"      ' Change first row
            emps.GetChanges()              ' emps.RowCount now = 1 
            
            ' Now reload that single record into a new Employees object and Save it
            Dim xml As String = emps.ToXml()
            Dim empsClone As New Employees
            empsClone.FromXml(xml)
            empsClone.Save()
            </code>
            C#
            <code>
            Employees emps = new Employees();
            emps.LoadAll();                // emps.RowCount = 200
            emps.LastName = "Noonan";      // Change first row
            emps.GetChanges();             // emps.RowCount now = 1 
            
            // Now reload that single record into a new Employees object and Save it
            string str = emps.ToXml();
            Employees empsClone = new Employees();
            empsClone.FromXml(str);
            empsClone.Save();
            </code> 
            </example>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.FromXml(System.String)">
            <summary>
            Reload the EasyObject from a previous call to <see cref="M:NCI.EasyObjects.EasyObject.ToXml"/>.
            </summary>
            <param name="xml">The string to reload</param>
            <example>
            VB.NET
            <code>
            Dim emps As New Employees
            emps.Query.Load()              ' emps.RowCount = 200
            emps.FirstName = "Noonan"      ' Change first row
            emps.GetChanges()              ' emps.RowCount now = 1 
            
            ' Now reload that single record into a new Employees object and Save it
            Dim xml As String = emps.ToXml()
            Dim empsClone As New Employees
            empsClone.FromXml(xml)
            empsClone.Save()
            </code>
            C#
            <code>
            Employees emps = new Employees();
            emps.LoadAll();                // emps.RowCount = 200
            emps.LastName = "Noonan";      // Change first row
            emps.GetChanges();             // emps.RowCount now = 1 
            
            // Now reload that single record into a new Employees object and Save it
            string str = emps.ToXml();
            Employees empsClone = new Employees();
            empsClone.FromXml(str);
            empsClone.Save();
            </code> 
            </example>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.FromXml(System.String,System.Data.XmlReadMode)">
            <summary>
            Reload the EasyObject from a previous call to <see cref="M:NCI.EasyObjects.EasyObject.ToXml"/>. Use the mode
            parameter for finer control.
            </summary>
            <param name="xml">The string to reload</param>
            <param name="mode">See the .NET XmlReadMode enum for more help.</param>
            <example>
            VB.NET
            <code>
            Dim emps As New Employees
            emps.Query.Load()              ' emps.RowCount = 200
            emps.FirstName = "Noonan"      ' Change first row
            emps.GetChanges()              ' emps.RowCount now = 1 
            
            ' Now reload that single record into a new Employees object and Save it
            Dim xml As String = emps.ToXml()
            Dim empsClone As New Employees
            empsClone.FromXml(xml)
            empsClone.Save()
            </code>
            C#
            <code>
            Employees emps = new Employees();
            emps.LoadAll();                // emps.RowCount = 200
            emps.LastName = "Noonan";      // Change first row
            emps.GetChanges();             // emps.RowCount now = 1 
            
            // Now reload that single record into a new Employees object and Save it
            string str = emps.ToXml();
            Employees empsClone = new Employees();
            empsClone.FromXml(str);
            empsClone.Save();
            </code> 
            </example>
        </member>
        <member name="M:NCI.EasyObjects.EasyObject.ToDataSet">
            <summary>
            Returns the current object's data as a DataSet
            </summary>
            <returns>A DataSet containing the current data</returns>
            <remarks>
            This will probably trash any internal DataTable handling by the EasyObject, so you should
            dispose of the object immediately after calling this method.
            </remarks>
        </member>
        <member name="F:NCI.EasyObjects.EasyObject.StringFormat">
            <summary>
            A format string used for displaying date values
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.IdentityInsert">
            <summary>
            Allows for inserting primary key values that are normally autogenerated by the database
            <note>This may not be support for all database providers</note>
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.ConvertEmptyStringToNull">
            <summary>
            Flag to convert empty strings to NULL when sending to the database
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.CommandTimeout">
            <summary>
            The command timeout to use when running queries against the database
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.RowCount">
            <summary>
            Returns the number of rows stored in the EasyObject
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.DatabaseInstanceName">
            <summary>
            Gets or sets the database instance name from the dataConfiguration.config file used to load the EasyObject.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.DynamicQueryInstanceName">
            <summary>
            Gets or set the dynamic query instance name from the dynamicQuerySettings.config file used to build dynamic queries.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.ConnectionString">
            <summary>
            Gets or sets the connection string used to connect to the database.
            </summary>
            <remarks>
            <para>
            This will override any settings in dataConfiguration.config and instead connect directly using the connection
            string. Leave this field blank to use database instances from dataConfiguration.config.
            </para>
            <para>
            You can control the connection settings through the <see cref="P:NCI.EasyObjects.EasyObject.UseIntegratedSecurity"/>, 
            <see cref="P:NCI.EasyObjects.EasyObject.ConnectionUserID"/> and the <see cref="P:NCI.EasyObjects.EasyObject.ConnectionPassword"/> properties.
            credentials.
            </para>
            </remarks>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.ConnectionUserID">
            <summary>
            Gets or sets the user ID to use in the connect string for the database
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.ConnectionPassword">
            <summary>
            Gets or sets the password to use in the connect string for the database
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.ConnectionDatabase">
            <summary>
            Gets or sets the database to connect to
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.ConnectionServer">
            <summary>
            Gets or sets the database server to connect to
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.UseIntegratedSecurity">
            <summary>
            Gets or sets the flag to use Integrated Security when connecting to the database
            </summary>
            <remarks>
            Defaults to false
            </remarks>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.DBNull">
            <summary>
            Returns a cached reference to DBNull
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.ErrorCode">
            <summary>
            Gets or sets the internal error code.
            </summary>
            <remarks>This property is primarily set when an error has occurred after running a query.</remarks>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.ErrorMessage">
            <summary>
            Gets or sets the internal error message.
            </summary>
            <remarks>This property is primarily set when an error has occurred after running a query.</remarks>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.DataRow">
            <summary>
            Returns a reference to the current row of the EasyObject.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.DataTable">
            <summary>
            Returns a reference to the current DataTable for the EasyObject.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.DefaultView">
            <summary>
            Returns a reference to the EasyObjects DefaultView.
            </summary>
            <remarks>This is primarily used for DataBind operations.</remarks>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.Filter">
            <summary>
            After loading your EasyObject you can filter (temporarily hide) rows. To disable the filter 
            set this property to String.empty. After applying a filter, using Iteration via MoveNext will 
            properly respect any filter you have in place. See also <see cref="P:NCI.EasyObjects.EasyObject.Sort"/>.
            </summary>
            <example>
            For a detailed explanation see the RowFilter property on ADO.NET's DataView.RowFilter property.
            <code>
            emps.Filter = "City = 'Berlin'";
            </code>
            </example>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.SchemaEntries">
            <summary>
            Gets or sets a reference to the <see cref="P:NCI.EasyObjects.EasyObject.SchemaEntries" /> for the EasyObject.
            </summary>
            <remarks>This is primarily set in the generated EasyObject class, but can be overridden in a derived class.</remarks>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.TableName">
            <summary>
            Returns the name of database table used to define the EasyObject.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.QuerySource">
             <summary>
             Used to set an alternate query source (such as a view) when building dynamic queries.
             </summary>
             <remarks>
             It is not necessary to load an EasyObject from the same table source. In fact, you can load an EasyObject
             from any table or view. However, not all of the strongly typed properties and methods are guaranteed to work it
             the query source is extremely divergent from the original table.
             </remarks>
             <example>
             VB.NET
             <code>
             Dim emps As New Employees
             
             ' Load the object from a view instead of the table
             emps.QuerySource = "EmployeeDetailView"
            
             ' Only return the EmployeeID and LastName
             emps.Query.AddResultColumn(EmployeesSchema.EmployeeID)
             emps.Query.AddResultColumn(EmployeesSchema.LastName)
            
             ' Order by a column in the view but not the Employee table
             emps.Query.AddOrderBy("DateCertified", WhereParameter.Dir.ASC)
            
             emps.Query.Load()</code>
            	C#
            	<code>
             Employees emps = new Employees();
            
             // Load the object from a view instead of the table
             emps.QuerySource = "EmployeeDetailView";
            
             // Only return the EmployeeID and LastName
             emps.Query.AddResultColumn(EmployeesSchema.EmployeeID);
             emps.Query.AddResultColumn(EmployeesSchema.LastName);
            
             // Order by a column in the view but not the Employee table
             emps.Query.AddOrderBy("DateCertified", WhereParameter.Dir.ASC);
            
             emps.Query.Load();</code>
             </example>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.SchemaGlobal">
            <summary>
            Setting this is a quick way to set both <see cref="P:NCI.EasyObjects.EasyObject.SchemaTableView"/> and <see cref="P:NCI.EasyObjects.EasyObject.SchemaStoredProcedure"/>. at the same time.
            Setting this property does nothing more than assign both SchemaTableView and SchemaStoredProcedure, very rarely will you need to
            set SchemaTableView to one schema and SchemaStoredProcedure to a different schema. 
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.SchemaTableView">
            <summary>
            This is the schema for the Table or View that will be accessed via Query.Load() and AddNew().  For instance, 
            if you set this to "HR" then Query.Load() will use "HR.EMPLOYEES" instead of just "EMPLOYEES". See <see cref="P:NCI.EasyObjects.EasyObject.SchemaGlobal"/>.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.SchemaTableViewWithSeparator">
            <summary>
            This is the schema for the Table or View that will be accessed via Query.Load() and AddNew().  For instance, 
            if you set this to "HR" then Query.Load() will use "HR.EMPLOYEES" instead of just "EMPLOYEES". See <see cref="P:NCI.EasyObjects.EasyObject.SchemaGlobal"/>.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.SchemaStoredProcedure">
            <summary>
            This is the schema for the stored procedures that will be accessed by the EasyObject.  
            For instance, if you set this to "HR" then when you do an update your stored procedure will be 
            prefaced by "HR.MyStoredProc" See <see cref="P:NCI.EasyObjects.EasyObject.SchemaGlobal"/>.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.SchemaStoredProcedureWithSeparator">
            <summary>
            This is the schema for the stored procedures that will be accessed by the EasyObject.  
            For instance, if you set this to "HR" then when you do an update your stored procedure will be 
            prefaced by "HR.MyStoredProc" See <see cref="P:NCI.EasyObjects.EasyObject.SchemaGlobal"/>.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.Transaction">
            <summary>
            Gets or sets a reference to the current EasyObject transaction.
            <note>This is primarily used internally.</note>
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.Query">
            <summary>
            Returns a reference to the EasyObject's <see cref="T:NCI.EasyObjects.DynamicQuery" /> object.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.Sort">
            <summary>
            Gets or sets the sort column for the EasyObject.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.SchemaSeparator">
            <summary>
            <para>Gets the string separator used between the schema and database object.</para>
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.EasyObject.DefaultCommandType">
            <summary>
            <para>Determines what CommandType will be used by default.</para>
            </summary>
            <remarks>Use this enumeration to toggle between stored procedures and inline SQL</remarks>
        </member>
        <member name="T:NCI.EasyObjects.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.Properties.Resources.ExceptionDynamicQueryTypeDoesNotHaveAssemblerAttribute">
            <summary>
              Looks up a localized string similar to The dynamic query type {0} for the name {1} does not have the required [DynamicQueryAssembler] attribute required to build the dynamic query object..
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.Properties.Resources.ExceptionTypeNotDynamicQueryAssembler">
            <summary>
              Looks up a localized string similar to Type {0} is not an implementation of IDatabaseAssembler for DatabaseAssemblerAttribute..
            </summary>
        </member>
        <member name="T:NCI.EasyObjects.Schema">
            <summary>
            Represents a database Schema for an EasyObject.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.Schema.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.Schema.SchemaEntries">
            <summary>
            An internal collection of <see cref="P:NCI.EasyObjects.Schema.SchemaEntries"/>.
            <seealso cref="P:NCI.EasyObjects.Schema.SchemaEntries"/>
            </summary>
            <remarks>Used in derived classes.</remarks>
        </member>
        <member name="M:NCI.EasyObjects.Schema.FindSchemaItem(System.String)">
            <summary>
            Searches through the current <see cref="P:NCI.EasyObjects.Schema.SchemaEntries"/> for a matching column
            </summary>
            <param name="columnName">The name of the column to retrieve the SchemaItem for</param>
            <returns>A SchemaItem that matches the columnName, or null for no matches</returns>
        </member>
        <member name="T:NCI.EasyObjects.SchemaItemJustify">
            <summary>
            An enumeration for justifying string fields in the database.
            </summary>
            <remarks>This has been depracated in anticipation of removal.</remarks>
        </member>
        <member name="F:NCI.EasyObjects.SchemaItemJustify.None">
            <summary>
            No justification.
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.SchemaItemJustify.Left">
            <summary>
            The value should be padded to the right with spaces to the maximum length of the field
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.SchemaItemJustify.Right">
            <summary>
            The value should be padded to the left with spaces so that the value's last character is at the length of the field
            </summary>
        </member>
        <member name="T:NCI.EasyObjects.SchemaItem">
            <summary>
            A representation of meta data about the columns in a database.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.SchemaItem.#ctor(System.String,System.Data.DbType)">
            <summary>
            Initializes a new instance of the <see cref="T:NCI.EasyObjects.SchemaItem"/> with meta data from the table
            </summary>
            <param name="fieldName">The name of the database column</param>
            <param name="dbType">The datatype of the column</param>
        </member>
        <member name="M:NCI.EasyObjects.SchemaItem.#ctor(System.String,System.Data.DbType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NCI.EasyObjects.SchemaItem"/> with meta data from the table
            </summary>
            <param name="fieldName">The name of the database column</param>
            <param name="dbType">The datatype of the column</param>
            <param name="isAutoKey">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> is an autokey field</param>
        </member>
        <member name="M:NCI.EasyObjects.SchemaItem.#ctor(System.String,System.Data.DbType,NCI.EasyObjects.SchemaItemJustify,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NCI.EasyObjects.SchemaItem"/> with meta data from the table
            </summary>
            <param name="fieldName">The name of the database column</param>
            <param name="dbType">The datatype of the column</param>
            <param name="justify"><see cref="T:NCI.EasyObjects.SchemaItemJustify"/> value indicating the justification of the string value</param>
            <param name="len">The length of the string value</param>
        </member>
        <member name="M:NCI.EasyObjects.SchemaItem.#ctor(System.String,System.Data.DbType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NCI.EasyObjects.SchemaItem"/> with meta data from the table
            </summary>
            <param name="fieldName">The name of the database column</param>
            <param name="dbType">The datatype of the column</param>
            <param name="isAutoKey">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> is an autokey field</param>
            <param name="isNullable">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> can contain a NULL value in the database</param>
            <param name="isComputed">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> is a computed field</param>
            <param name="isInPrimaryKey">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> is part of the primary key for the table</param>
            <param name="isInForeignKey">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> is part of a foreign key</param>
        </member>
        <member name="M:NCI.EasyObjects.SchemaItem.#ctor(System.String,System.Data.DbType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NCI.EasyObjects.SchemaItem"/> with meta data from the table
            </summary>
            <param name="fieldName">The name of the database column</param>
            <param name="dbType">The datatype of the column</param>
            <param name="isAutoKey">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> is an autokey field</param>
            <param name="isNullable">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> can contain a NULL value in the database</param>
            <param name="isComputed">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> is a computed field</param>
            <param name="isInPrimaryKey">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> is part of the primary key for the table</param>
            <param name="isInForeignKey">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> is part of a foreign key</param>
            <param name="hasDefault">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> has a default value</param>
        </member>
        <member name="M:NCI.EasyObjects.SchemaItem.#ctor(System.String,System.Data.DbType,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NCI.EasyObjects.SchemaItem"/> with meta data from the table
            </summary>
            <param name="fieldName">The name of the database column</param>
            <param name="dbType">The datatype of the column</param>
            <param name="len">The maximum length of the column</param>
            <param name="isAutoKey">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> is an autokey field</param>
            <param name="isNullable">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> can contain a NULL value in the database</param>
            <param name="isComputed">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> is a computed field</param>
            <param name="isInPrimaryKey">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> is part of the primary key for the table</param>
            <param name="isInForeignKey">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> is part of a foreign key</param>
        </member>
        <member name="M:NCI.EasyObjects.SchemaItem.#ctor(System.String,System.Data.DbType,NCI.EasyObjects.SchemaItemJustify,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NCI.EasyObjects.SchemaItem"/> with meta data from the table
            </summary>
            <param name="fieldName">The name of the database column</param>
            <param name="dbType">The datatype of the column</param>
            <param name="justify"><see cref="T:NCI.EasyObjects.SchemaItemJustify"/> value indicating the justification of the string value</param>
            <param name="len">The maximum length of the column</param>
            <param name="isNullable">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> can contain a NULL value in the database</param>
            <param name="isInPrimaryKey">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> is part of the primary key for the table</param>
            <param name="isInForeignKey">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> is part of a foreign key</param>
        </member>
        <member name="M:NCI.EasyObjects.SchemaItem.#ctor(System.String,System.Data.DbType,NCI.EasyObjects.SchemaItemJustify,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NCI.EasyObjects.SchemaItem"/> with meta data from the table
            </summary>
            <param name="fieldName">The name of the database column</param>
            <param name="dbType">The datatype of the column</param>
            <param name="justify"><see cref="T:NCI.EasyObjects.SchemaItemJustify"/> value indicating the justification of the string value</param>
            <param name="len">The maximum length of the column</param>
            <param name="isNullable">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> can contain a NULL value in the database</param>
            <param name="isInPrimaryKey">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> is part of the primary key for the table</param>
            <param name="isInForeignKey">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> is part of a foreign key</param>
            <param name="hasDefault">A flag indicating if this <see cref="T:NCI.EasyObjects.SchemaItem"/> has a default value</param>
        </member>
        <member name="P:NCI.EasyObjects.SchemaItem.DBType">
            <summary>
            The datatype of the column
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.SchemaItem.Justify">
            <summary>
            The <see cref="T:NCI.EasyObjects.SchemaItemJustify"/> value indicating the field justification
            </summary>
            <remarks>This has been depracated in anticipation of removal.</remarks>
        </member>
        <member name="P:NCI.EasyObjects.SchemaItem.Length">
            <summary>
            The maximum length of the column
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.SchemaItem.FieldName">
            <summary>
            The column name
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.SchemaItem.IsAutoKey">
            <summary>
            Indicates this column's value is generated automatically
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.SchemaItem.IsNullable">
            <summary>
            Indicates this column can be set to null. 
            <seealso cref="M:NCI.EasyObjects.EasyObject.SetColumnNull(System.String)"/>
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.SchemaItem.IsComputed">
            <summary>
            Indicates this column contains a computed value.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.SchemaItem.IsInPrimaryKey">
            <summary>
            Indicates this column is part of the primary key for the table.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.SchemaItem.IsInForeignKey">
            <summary>
            Indicates this column is part of a foreign key for another table.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.SchemaItem.HasDefault">
            <summary>
            Indicates this column has a default value defined in the database engine.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.SchemaItem.IsRowID">
            <summary>
            Indicates this column acts as a row identifier.
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.SchemaItem.Properties">
            <summary>
            A HashTable to which custom properties may be added
            </summary>
            <remarks>These are generally only used by the custom dynamic query providers</remarks>
        </member>
        <member name="T:NCI.EasyObjects.TransactionManager">
            <summary>
            <see cref="T:NCI.EasyObjects.TransactionManager"/> is used to seemlessly enroll an EasyObject into a transaction. 
            <see cref="T:NCI.EasyObjects.TransactionManager"/> uses ADO.NET transactions and therefore is not a distributed transaction 
            as you would get with COM+. You only have to use <see cref="T:NCI.EasyObjects.TransactionManager"/> if two or more EasyObjects 
            need to be saved as a transaction.  The EasyObject.Save method is already protected by a transaction.
            <seealso cref="M:NCI.EasyObjects.EasyObject.Save"/>
            </summary>
            <remarks>
            Transaction Rules:
            <list type="bullet">
            	<item>Your transactions paths do not have to be pre-planned. At any time you can begin a transaction</item>
            	<item>You can nest BeginTransaction/CommitTransaction any number of times as long as they are sandwiched appropriately</item>
            	<item>Once RollbackTransaction is called the transaction is doomed, nothing can be committed even it is attempted.</item>
            	<item>Transactions are stored in the Thread Local Storage.</item>
            </list>
            Transactions are stored in the Thread Local Storage or
            TLS. This way the API isn't intrusive, ie, forcing you
            to pass a Connection around everywhere.  There is one
            thing to remember, once you call <see cref="M:NCI.EasyObjects.TransactionManager.RollbackTransaction"/> you will
            be unable to commit anything on that thread until you
            call <see cref="M:NCI.EasyObjects.TransactionManager.ThreadTransactionMgrReset"/>().
            
            In an ASP.NET application each page is handled by a thread
            that is pulled from a thread pool. Thus, you need to clear
            out the TLS (thread local storage) before your page begins
            execution. The best way to do this is to create a base page
            that inhertis from System.Web.UI.Page and clears the state
            like this:	
            </remarks>
            <example>
            VB.NET
            <code>
            Dim tx As TransactionManager = TransactionManager.ThreadTransactionMgr()
            
            Try
            	tx.BeginTransaction()
            	emps.Save()
            	prds.Save()
            	tx.CommitTransaction()
            Catch ex As Exception
            	tx.RollbackTransaction()
            	tx.ThreadTransactionMgrReset()
            End Try
            </code>
            C#
            <code>
            TransactionManager tx = TransactionManager.ThreadTransactionMgr();
            
            try
            {
            	tx.BeginTransaction();
            	emps.Save();
            	prds.Save();
            	tx.CommitTransaction();
            }
            catch(Exception ex)
            {
            	tx.RollbackTransaction();
            	tx.ThreadTransactionMgrReset();
            }
            </code>
            </example>
        </member>
        <member name="M:NCI.EasyObjects.TransactionManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NCI.EasyObjects.TransactionManager"/>.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.TransactionManager.BeginTransaction">
            <summary>
            Starts a new transaction scope
            </summary>
            <remarks>
            <see cref="M:NCI.EasyObjects.TransactionManager.BeginTransaction"/> should always be a followed by a call to <see cref="M:NCI.EasyObjects.TransactionManager.CommitTransaction"/> if all goes well, or
            <see cref="M:NCI.EasyObjects.TransactionManager.RollbackTransaction"/> if problems are detected.  <see cref="M:NCI.EasyObjects.TransactionManager.BeginTransaction"/>() can be nested any number of times
            as long as each call is unwound with a call to <see cref="M:NCI.EasyObjects.TransactionManager.CommitTransaction"/>().
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the transaction has already been rolled back.</exception>
        </member>
        <member name="M:NCI.EasyObjects.TransactionManager.CommitTransaction">
            <summary>
            Commits the current transaction scope to the database
            </summary>
            <remarks>
            The final call to <see cref="M:NCI.EasyObjects.TransactionManager.CommitTransaction"/> commits the transaction to the database, <see cref="M:NCI.EasyObjects.TransactionManager.BeginTransaction"/> and
            <see cref="M:NCI.EasyObjects.TransactionManager.CommitTransaction"/> calls can be nested
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the transaction has already been rolled back.</exception>
        </member>
        <member name="M:NCI.EasyObjects.TransactionManager.RollbackTransaction">
            <summary>
            Rolls back the current transaction scope's changes
            </summary>
            <remarks>
            <see cref="M:NCI.EasyObjects.TransactionManager.RollbackTransaction"/> dooms the transaction regardless of nested calls to <see cref="M:NCI.EasyObjects.TransactionManager.BeginTransaction"/>. 
            Once this method is called nothing can be done to commit the transaction.  To reset the thread state a call 
            to <see cref="M:NCI.EasyObjects.TransactionManager.ThreadTransactionMgrReset"/> must be made.
            </remarks>
        </member>
        <member name="M:NCI.EasyObjects.TransactionManager.GetTransaction(Microsoft.Practices.EnterpriseLibrary.Data.Database)">
            <summary>
            Retrieves the current transaction from thread local storage.
            </summary>
            <param name="db">The current database from the Enterprise Library</param>
            <returns>An IDbTransaction from the requested database, or null (Nothing in Visual Basic) if <see cref="M:NCI.EasyObjects.TransactionManager.BeginTransaction"/> has not been called.</returns>
        </member>
        <member name="M:NCI.EasyObjects.TransactionManager.GetTransaction(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Boolean)">
            <summary>
            Retrieves the current transaction from thread local storage.
            </summary>
            <param name="db">A database object from the Enterprise Library</param>
            <param name="createNewTransaction">Flag to create a new transaction if one does not already exist</param>
            <returns>A DbTransaction from the requested database, or null (Nothing in Visual Basic) if <see cref="M:NCI.EasyObjects.TransactionManager.BeginTransaction"/> has not been called.</returns>
            <remarks></remarks>
        </member>
        <member name="P:NCI.EasyObjects.TransactionManager.IsolationLevel">
            <summary>
            Gets or sets the thread's isolation level.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.TransactionManager.ThreadTransactionMgr">
            <summary>
            Gets a the current thread's transaction manager
            </summary>
            <returns>The current thread's <see cref="T:NCI.EasyObjects.TransactionManager"/></returns>
        </member>
        <member name="M:NCI.EasyObjects.TransactionManager.ThreadTransactionMgrReset">
            <summary>
            Performs a complete reset of the thread's transaction, so that new database operations can be successful
            </summary>
        </member>
        <member name="T:NCI.EasyObjects.ValueParameter">
            <summary>
            Represents a database parameter and value.
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.ValueParameter._schemaItem">
            <summary>
            The <see cref="P:NCI.EasyObjects.ValueParameter.SchemaItem"/> used to create the parameter.
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.ValueParameter._column">
            <summary>
            The column name for the parameter.
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.ValueParameter._value">
            <summary>
            The value to assign to the parameter.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.ValueParameter.#ctor(NCI.EasyObjects.SchemaItem)">
            <summary>
            Initializes a new instance of <see cref="T:NCI.EasyObjects.ValueParameter"/>.
            </summary>
            <param name="item">A <see cref="P:NCI.EasyObjects.ValueParameter.SchemaItem"/> for the parameter</param>
        </member>
        <member name="P:NCI.EasyObjects.ValueParameter.SchemaItem">
            <summary>
            Returns the current <see cref="P:NCI.EasyObjects.ValueParameter.SchemaItem"/> for the parameter
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.ValueParameter.Column">
            <summary>
            The column that the parameter is going to query against. 
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.ValueParameter.Value">
            <summary>
            The value that will be placed into the Parameter
            </summary>
        </member>
        <member name="T:NCI.EasyObjects.WhereParameter">
            <summary>
            This class is dynamically created when you add a <see cref="T:NCI.EasyObjects.WhereParameter"/> to your EasyObject's  <see cref="T:NCI.EasyObjects.DynamicQuery"/> (See the EasyObject.Query).
            <seealso cref="P:NCI.EasyObjects.EasyObject.Query"/>
            </summary>
            <remarks>
            This will be the extent of your use of the WhereParameter class, this class is mostly used internally by the 
            EasyObject architecture.
            <example>
            <code>
            emps.Where.LastName.Value = "%A%";
            emps.Where.LastName.Operator = WhereParameter.Operand.Like;
            </code>
            </example>
            </remarks>
        </member>
        <member name="T:NCI.EasyObjects.WhereParameter.Operand">
            <summary>
            The type of comparison this parameter should use
            </summary>
            <remarks>Some database providers may not support all Operands.</remarks>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.Equal">
            <summary>
            Equal Comparison
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.NotEqual">
            <summary>
            Not Equal Comparison
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.GreaterThan">
            <summary>
            Greater Than Comparison
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.GreaterThanOrEqual">
            <summary>
            Greater Than or Equal Comparison
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.LessThan">
            <summary>
            Less Than Comparison
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.LessThanOrEqual">
            <summary>
            Less Than or Equal Comparison
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.Like">
            <summary>
            Like Comparison, "%s%" does it have an 's' in it? "s%" does it begin with 's'?
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.IsNull">
            <summary>
            Is the value null in the database
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.IsNotNull">
            <summary>
            Is the value non-null in the database
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.Between">
            <summary>
            Is the value between two parameters? see <see cref="P:NCI.EasyObjects.WhereParameter.BetweenBeginValue"/> and <see cref="P:NCI.EasyObjects.WhereParameter.BetweenEndValue"/>. 
            Note that Between can be for other data types than just dates.
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.In">
            <summary>
            Is the value in a list, ie, "4,5,6,7,8"
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.NotIn">
            <summary>
            NOT in a list, ie not in, "4,5,6,7,8"
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.NotLike">
            <summary>
            Not Like Comparison, "%s%", anything that does not it have an 's' in it.
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.StartsWith">
            <summary>
            Uses the LIKE comparison to find values that match at the start, "S%", anything 
            that starts with an 'S'. The difference is that the provider-specific wildcard 
            character will be added automatically by the <see cref="N:NCI.EasyObjects.DynamicQueryProvider"/>.
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.NotStartsWith">
            <summary>
            Uses the LIKE comparison to find values that do not match at the start, "S%", anything 
            that does not start with an 'S'. The difference is that the provider-specific wildcard 
            character will be added automatically by the <see cref="N:NCI.EasyObjects.DynamicQueryProvider"/>.
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.EndsWith">
            <summary>
            Uses the LIKE comparison to find values that match at the end, "%S", anything 
            that ends with an 'S'. The difference is that the provider-specific wildcard 
            character will be added automatically by the <see cref="N:NCI.EasyObjects.DynamicQueryProvider"/>.
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.NotEndsWith">
            <summary>
            Uses the LIKE comparison to find values that do not match at the end, "%S", anything 
            that does not end with an 'S'. The difference is that the provider-specific wildcard 
            character will be added automatically by the <see cref="N:NCI.EasyObjects.DynamicQueryProvider"/>.
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.Contains">
            <summary>
            Uses the LIKE comparison to find values that contain any match, "%S%", anything 
            that contains an 'S'. The difference is that the provider-specific wildcard 
            character will be added automatically by the <see cref="N:NCI.EasyObjects.DynamicQueryProvider"/>.
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Operand.NotContains">
            <summary>
            Uses the LIKE comparison to find values that do not contain a match, "%S%", anything 
            that does not contain an 'S'. The difference is that the provider-specific wildcard 
            character will be added automatically by the <see cref="N:NCI.EasyObjects.DynamicQueryProvider"/>.
            </summary>
        </member>
        <member name="T:NCI.EasyObjects.WhereParameter.Dir">
            <summary>
            The direction used by DynamicQuery.AddOrderBy
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Dir.ASC">
            <summary>
            Ascending
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Dir.DESC">
            <summary>
            Descending
            </summary>
        </member>
        <member name="T:NCI.EasyObjects.WhereParameter.Conj">
            <summary>
            The conjunction used between <see cref="T:NCI.EasyObjects.WhereParameter"/>s.
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Conj.And">
            <summary>
            <see cref="T:NCI.EasyObjects.WhereParameter"/>s are joined via "And"
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Conj.Or">
            <summary>
            <see cref="T:NCI.EasyObjects.WhereParameter"/>s are joined via "Or"
            </summary>
        </member>
        <member name="F:NCI.EasyObjects.WhereParameter.Conj.UseDefault">
            <summary>
            <see cref="T:NCI.EasyObjects.WhereParameter"/>s are used via the default passed into <see cref="M:NCI.EasyObjects.DynamicQuery.Load"/>.
            </summary>
        </member>
        <member name="M:NCI.EasyObjects.WhereParameter.#ctor(NCI.EasyObjects.SchemaItem)">
            <summary>
            This is only called internally by the EasyObject architecture.
            </summary>
            <param name="item">The SchemaItem associated with the WhereParameter</param>
        </member>
        <member name="P:NCI.EasyObjects.WhereParameter.IsDirty">
            <summary>
            Used to determine if the <see cref="T:NCI.EasyObjects.WhereParameter"/>s has a value
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.WhereParameter.Value">
            <summary>
            The value that will be placed into the Parameter
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.WhereParameter.Operator">
            <summary>
            The type of comparison desired
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.WhereParameter.Conjunction">
            <summary>
            The type of conjuction to use, "AND" or "OR"
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.WhereParameter.BetweenBeginValue">
            <summary>
            Used for the <see cref="F:NCI.EasyObjects.WhereParameter.Operand.Between"/> comparison
            </summary>
        </member>
        <member name="P:NCI.EasyObjects.WhereParameter.BetweenEndValue">
            <summary>
            Used for the <see cref="F:NCI.EasyObjects.WhereParameter.Operand.Between"/>comparison
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Data.Sql.Sql2005Database">
            <summary>
            <para>Represents a SQL Server 2005 database.</para>
            </summary>
            <remarks> 
            <para>
            Internally uses SQL Server .NET Managed Provider from Microsoft (System.Data.SqlClient) to connect to the database.
            </para>  
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.Sql2005Database.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Sql.Sql2005Database"/> class with a connection string.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.Sql2005Database.ExecuteSqlBulkCopy(System.Data.Common.DbCommand,System.Data.IDataReader,System.String)">
            <summary>
            <para>Executes the <see cref="T:System.Data.SqlClient.SqlCommand"/> and returns a new <see cref="T:System.Xml.XmlReader"/>.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute.</para>
            </param>
            <param name="reader">The reader to bulk copy the data from</param>
            <param name="targetTableName">The target table name to copy the data to</param>
            <returns>
            <para>An <see cref="T:System.Xml.XmlReader"/> object.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.Sql2005Database.ExecuteSqlBulkCopy(System.Data.Common.DbCommand,System.Data.IDataReader,System.String,System.Data.Common.DbTransaction)">
            <summary>
            <para>Executes the <see cref="T:System.Data.SqlClient.SqlCommand"/> in a transaction and returns a new <see cref="T:System.Xml.XmlReader"/>.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute.</para>
            </param>
            <param name="reader">The reader to bulk copy the data from</param>
            <param name="targetTableName">The target table name to copy the data to</param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Xml.XmlReader"/> object.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Data.Sql.Sql2005Database.DoExecuteSqlBulkCopy(System.Data.SqlClient.SqlCommand,System.Data.IDataReader,System.String)">
            <devdoc>
            Execute the actual SqlBulkCopy call.
            </devdoc>        
        </member>
    </members>
</doc>
