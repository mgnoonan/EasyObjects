
// Generated by MyGeneration Version # (1.1.4.0)

using System;
using System.Data;
using System.Collections;
using System.Collections.Specialized;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace NCI.EasyObjects.Tests.SQL
{

	#region Schema

	public class FullNameViewSchema : NCI.EasyObjects.Schema
	{
		private static ArrayList _entries;
		public static SchemaItem FullName = new SchemaItem("FullName", DbType.AnsiString, SchemaItemJustify.None, 42, true, false, false);
		public static SchemaItem DepartmentID = new SchemaItem("DepartmentID", DbType.Int32, false, true, false, false, false);
		public static SchemaItem HireDate = new SchemaItem("HireDate", DbType.DateTime, false, true, false, false, false);
		public static SchemaItem Salary = new SchemaItem("Salary", DbType.Decimal, false, true, false, false, false);
		public static SchemaItem IsActive = new SchemaItem("IsActive", DbType.Boolean, false, true, false, false, false);

		public override ArrayList SchemaEntries
		{
			get
			{
				if (_entries == null )
				{
					_entries = new ArrayList();
					_entries.Add(FullNameViewSchema.FullName);
					_entries.Add(FullNameViewSchema.DepartmentID);
					_entries.Add(FullNameViewSchema.HireDate);
					_entries.Add(FullNameViewSchema.Salary);
					_entries.Add(FullNameViewSchema.IsActive);
				}
				return _entries;
			}
		}
	}
	#endregion

	public class _FullNameView : EasyObject
	{
		public _FullNameView()
		{
			FullNameViewSchema _schema = new FullNameViewSchema();
			this.SchemaEntries = _schema.SchemaEntries;
			this.SchemaGlobal = "dbo";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Properties
		public virtual string FullName
		{
			get
			{
				return this.GetString(FullNameViewSchema.FullName.FieldName);
	    	}
			set
			{
				this.SetString(FullNameViewSchema.FullName.FieldName, value);
			}
		}
		public virtual int DepartmentID
		{
			get
			{
				return this.GetInteger(FullNameViewSchema.DepartmentID.FieldName);
	    	}
			set
			{
				this.SetInteger(FullNameViewSchema.DepartmentID.FieldName, value);
			}
		}
		public virtual DateTime HireDate
		{
			get
			{
				return this.GetDateTime(FullNameViewSchema.HireDate.FieldName);
	    	}
			set
			{
				this.SetDateTime(FullNameViewSchema.HireDate.FieldName, value);
			}
		}
		public virtual decimal Salary
		{
			get
			{
				return this.GetDecimal(FullNameViewSchema.Salary.FieldName);
	    	}
			set
			{
				this.SetDecimal(FullNameViewSchema.Salary.FieldName, value);
			}
		}
		public virtual bool IsActive
		{
			get
			{
				return this.GetBoolean(FullNameViewSchema.IsActive.FieldName);
	    	}
			set
			{
				this.SetBoolean(FullNameViewSchema.IsActive.FieldName, value);
			}
		}

		public override string TableName
		{
			get { return "FullNameView"; }
		}
		
		#endregion		
		
		#region String Properties
	
		public virtual string s_FullName
	    {
			get
	        {
				return this.IsColumnNull(FullNameViewSchema.FullName.FieldName) ? string.Empty : base.GetStringAsString(FullNameViewSchema.FullName.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(FullNameViewSchema.FullName.FieldName);
				else
					this.FullName = base.SetStringAsString(FullNameViewSchema.FullName.FieldName, value);
			}
		}

		public virtual string s_DepartmentID
	    {
			get
	        {
				return this.IsColumnNull(FullNameViewSchema.DepartmentID.FieldName) ? string.Empty : base.GetIntegerAsString(FullNameViewSchema.DepartmentID.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(FullNameViewSchema.DepartmentID.FieldName);
				else
					this.DepartmentID = base.SetIntegerAsString(FullNameViewSchema.DepartmentID.FieldName, value);
			}
		}

		public virtual string s_HireDate
	    {
			get
	        {
				return this.IsColumnNull(FullNameViewSchema.HireDate.FieldName) ? string.Empty : base.GetDateTimeAsString(FullNameViewSchema.HireDate.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(FullNameViewSchema.HireDate.FieldName);
				else
					this.HireDate = base.SetDateTimeAsString(FullNameViewSchema.HireDate.FieldName, value);
			}
		}

		public virtual string s_Salary
	    {
			get
	        {
				return this.IsColumnNull(FullNameViewSchema.Salary.FieldName) ? string.Empty : base.GetDecimalAsString(FullNameViewSchema.Salary.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(FullNameViewSchema.Salary.FieldName);
				else
					this.Salary = base.SetDecimalAsString(FullNameViewSchema.Salary.FieldName, value);
			}
		}

		public virtual string s_IsActive
	    {
			get
	        {
				return this.IsColumnNull(FullNameViewSchema.IsActive.FieldName) ? string.Empty : base.GetBooleanAsString(FullNameViewSchema.IsActive.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(FullNameViewSchema.IsActive.FieldName);
				else
					this.IsActive = base.SetBooleanAsString(FullNameViewSchema.IsActive.FieldName, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter FullName
				{
					get
					{
							WhereParameter wp = new WhereParameter(FullNameViewSchema.FullName);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter DepartmentID
				{
					get
					{
							WhereParameter wp = new WhereParameter(FullNameViewSchema.DepartmentID);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter HireDate
				{
					get
					{
							WhereParameter wp = new WhereParameter(FullNameViewSchema.HireDate);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Salary
				{
					get
					{
							WhereParameter wp = new WhereParameter(FullNameViewSchema.Salary);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter IsActive
				{
					get
					{
							WhereParameter wp = new WhereParameter(FullNameViewSchema.IsActive);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter FullName
		    {
				get
		        {
					if(_FullName_W == null)
	        	    {
						_FullName_W = TearOff.FullName;
					}
					return _FullName_W;
				}
			}

			public WhereParameter DepartmentID
		    {
				get
		        {
					if(_DepartmentID_W == null)
	        	    {
						_DepartmentID_W = TearOff.DepartmentID;
					}
					return _DepartmentID_W;
				}
			}

			public WhereParameter HireDate
		    {
				get
		        {
					if(_HireDate_W == null)
	        	    {
						_HireDate_W = TearOff.HireDate;
					}
					return _HireDate_W;
				}
			}

			public WhereParameter Salary
		    {
				get
		        {
					if(_Salary_W == null)
	        	    {
						_Salary_W = TearOff.Salary;
					}
					return _Salary_W;
				}
			}

			public WhereParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			private WhereParameter _FullName_W = null;
			private WhereParameter _DepartmentID_W = null;
			private WhereParameter _HireDate_W = null;
			private WhereParameter _Salary_W = null;
			private WhereParameter _IsActive_W = null;

			public void WhereClauseReset()
			{
				_FullName_W = null;
				_DepartmentID_W = null;
				_HireDate_W = null;
				_Salary_W = null;
				_IsActive_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private EasyObject _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter FullName
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(FullNameViewSchema.FullName);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter DepartmentID
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(FullNameViewSchema.DepartmentID);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter HireDate
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(FullNameViewSchema.HireDate);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Salary
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(FullNameViewSchema.Salary);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter IsActive
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(FullNameViewSchema.IsActive);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter FullName
		    {
				get
		        {
					if(_FullName_W == null)
	        	    {
						_FullName_W = TearOff.FullName;
					}
					return _FullName_W;
				}
			}

			public AggregateParameter DepartmentID
		    {
				get
		        {
					if(_DepartmentID_W == null)
	        	    {
						_DepartmentID_W = TearOff.DepartmentID;
					}
					return _DepartmentID_W;
				}
			}

			public AggregateParameter HireDate
		    {
				get
		        {
					if(_HireDate_W == null)
	        	    {
						_HireDate_W = TearOff.HireDate;
					}
					return _HireDate_W;
				}
			}

			public AggregateParameter Salary
		    {
				get
		        {
					if(_Salary_W == null)
	        	    {
						_Salary_W = TearOff.Salary;
					}
					return _Salary_W;
				}
			}

			public AggregateParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			private AggregateParameter _FullName_W = null;
			private AggregateParameter _DepartmentID_W = null;
			private AggregateParameter _HireDate_W = null;
			private AggregateParameter _Salary_W = null;
			private AggregateParameter _IsActive_W = null;

			public void AggregateClauseReset()
			{
				_FullName_W = null;
				_DepartmentID_W = null;
				_HireDate_W = null;
				_Salary_W = null;
				_IsActive_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private EasyObject _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	}
}
