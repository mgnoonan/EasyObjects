/*
'===============================================================================
'  Generated From - CSharp_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.2)

using System;
using System.Data;
using System.Data.Common;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace NCI.EasyObjects.Tests.SQL
{

	#region Schema

	public class EmployeesSchema : NCI.EasyObjects.Schema
	{
		private static ArrayList _entries;
		public static SchemaItem EmployeeID = new SchemaItem("EmployeeID", DbType.Guid, false, false, false, true, false, true);
		public static SchemaItem LastName = new SchemaItem("LastName", DbType.String, SchemaItemJustify.None, 20, false, false, false, false);
		public static SchemaItem FirstName = new SchemaItem("FirstName", DbType.String, SchemaItemJustify.None, 10, false, false, false, false);
		public static SchemaItem Title = new SchemaItem("Title", DbType.String, SchemaItemJustify.None, 30, true, false, false, false);
		public static SchemaItem TitleOfCourtesy = new SchemaItem("TitleOfCourtesy", DbType.String, SchemaItemJustify.None, 25, true, false, false, false);
		public static SchemaItem BirthDate = new SchemaItem("BirthDate", DbType.DateTime, false, true, false, false, false, false);
		public static SchemaItem HireDate = new SchemaItem("HireDate", DbType.DateTime, false, true, false, false, false, false);
		public static SchemaItem Address = new SchemaItem("Address", DbType.String, SchemaItemJustify.None, 60, true, false, false, false);
		public static SchemaItem City = new SchemaItem("City", DbType.String, SchemaItemJustify.None, 15, true, false, false, false);
		public static SchemaItem Region = new SchemaItem("Region", DbType.String, SchemaItemJustify.None, 15, true, false, false, false);
		public static SchemaItem PostalCode = new SchemaItem("PostalCode", DbType.String, SchemaItemJustify.None, 10, true, false, false, false);
		public static SchemaItem Country = new SchemaItem("Country", DbType.String, SchemaItemJustify.None, 15, true, false, false, false);
		public static SchemaItem HomePhone = new SchemaItem("HomePhone", DbType.String, SchemaItemJustify.None, 24, true, false, false, false);
		public static SchemaItem Extension = new SchemaItem("Extension", DbType.String, SchemaItemJustify.None, 4, true, false, false, false);
		public static SchemaItem Photo = new SchemaItem("Photo", DbType.Binary, false, true, false, false, false, false);
		public static SchemaItem Notes = new SchemaItem("Notes", DbType.String, SchemaItemJustify.None, 1073741823, true, false, false, false);
		public static SchemaItem ReportsTo = new SchemaItem("ReportsTo", DbType.Int32, false, true, false, false, false, false);
		public static SchemaItem PhotoPath = new SchemaItem("PhotoPath", DbType.String, SchemaItemJustify.None, 255, true, false, false, false);

		public override ArrayList SchemaEntries
		{
			get
			{
				if (_entries == null )
				{
					_entries = new ArrayList();
					_entries.Add(EmployeesSchema.EmployeeID);
					_entries.Add(EmployeesSchema.LastName);
					_entries.Add(EmployeesSchema.FirstName);
					_entries.Add(EmployeesSchema.Title);
					_entries.Add(EmployeesSchema.TitleOfCourtesy);
					_entries.Add(EmployeesSchema.BirthDate);
					_entries.Add(EmployeesSchema.HireDate);
					_entries.Add(EmployeesSchema.Address);
					_entries.Add(EmployeesSchema.City);
					_entries.Add(EmployeesSchema.Region);
					_entries.Add(EmployeesSchema.PostalCode);
					_entries.Add(EmployeesSchema.Country);
					_entries.Add(EmployeesSchema.HomePhone);
					_entries.Add(EmployeesSchema.Extension);
					_entries.Add(EmployeesSchema.Photo);
					_entries.Add(EmployeesSchema.Notes);
					_entries.Add(EmployeesSchema.ReportsTo);
					_entries.Add(EmployeesSchema.PhotoPath);
				}
				return _entries;
			}
		}
	}
	#endregion

	public abstract class _Employees : EasyObject
	{

		public _Employees()
		{
			EmployeesSchema _schema = new EmployeesSchema();
			this.SchemaEntries = _schema.SchemaEntries;
			this.SchemaGlobal = "dbo";
		}
		
		public override void FlushData() 	 
		{ 	 
			this._whereClause = null; 	 
			this._aggregateClause = null; 	 
			base.FlushData(); 	 
		}
			   
		/// <summary>
		/// Loads the business object with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="EmployeeID"></param>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadByPrimaryKey(Guid EmployeeID)
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					ListDictionary parameters = new ListDictionary();

					// Add in parameters
					parameters.Add(EmployeesSchema.EmployeeID.FieldName, EmployeeID);

					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetEmployees", parameters, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.EmployeeID.Value = EmployeeID;
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}
	
		/// <summary>
		/// Loads all records from the table.
		/// </summary>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadAll()
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetAllEmployees", null, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		/// <summary>
		/// Adds a new record to the internal table.
		/// </summary>
		public override void AddNew()
		{
			base.AddNew();
			this.ApplyDefaults();
		}

		/// <summary>
		/// Apply any default values to columns
		/// </summary>
		protected override void ApplyDefaults()
		{
			this.EmployeeID = Guid.NewGuid();
		}

		protected override DbCommand GetInsertCommand(CommandType commandType)
		{	
			DbCommand dbCommand;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_AddEmployees";
					dbCommand = db.GetStoredProcCommand(sqlCommand);

					CreateParameters(db, dbCommand);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!item.IsComputed)
						{
							if ((item.IsAutoKey && this.IdentityInsert) || !item.IsAutoKey)
							{
								this.Query.AddInsertColumn(item);
							}
						}
					}
					dbCommand = this.Query.GetInsertCommandWrapper();

					dbCommand.Parameters.Clear();
					if (this.IdentityInsert)
					{
					}
					else
					{
					}
					CreateParameters(db, dbCommand);

					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DbCommand GetUpdateCommand(CommandType commandType)
		{
            DbCommand dbCommand;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_UpdateEmployees";
					dbCommand = db.GetStoredProcCommand(sqlCommand);

					CreateParameters(db, dbCommand);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!(item.IsAutoKey || item.IsComputed))
						{
							this.Query.AddUpdateColumn(item);
						}
					}

					this.Where.WhereClauseReset();
					this.Where.EmployeeID.Operator = WhereParameter.Operand.Equal;
					dbCommand = this.Query.GetUpdateCommandWrapper();

					dbCommand.Parameters.Clear();
					CreateParameters(db, dbCommand);
					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DbCommand GetDeleteCommand(CommandType commandType)
		{
            DbCommand dbCommand;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_DeleteEmployees";
					dbCommand = db.GetStoredProcCommand(sqlCommand);
					db.AddInParameter(dbCommand, "EmployeeID", DbType.Guid, "EmployeeID", DataRowVersion.Current);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.EmployeeID.Operator = WhereParameter.Operand.Equal;
					dbCommand = this.Query.GetDeleteCommandWrapper();

					dbCommand.Parameters.Clear();
					db.AddInParameter(dbCommand, "EmployeeID", DbType.Guid, "EmployeeID", DataRowVersion.Current);
					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		private void CreateParameters(Database db, DbCommand dbCommand)
		{
			db.AddInParameter(dbCommand, "EmployeeID", DbType.Guid, "EmployeeID", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "LastName", DbType.String, "LastName", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "FirstName", DbType.String, "FirstName", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "Title", DbType.String, "Title", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "TitleOfCourtesy", DbType.String, "TitleOfCourtesy", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "BirthDate", DbType.DateTime, "BirthDate", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "HireDate", DbType.DateTime, "HireDate", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "Address", DbType.String, "Address", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "City", DbType.String, "City", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "Region", DbType.String, "Region", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "PostalCode", DbType.String, "PostalCode", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "Country", DbType.String, "Country", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "HomePhone", DbType.String, "HomePhone", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "Extension", DbType.String, "Extension", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "Photo", DbType.Binary, "Photo", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "Notes", DbType.String, "Notes", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "ReportsTo", DbType.Int32, "ReportsTo", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "PhotoPath", DbType.String, "PhotoPath", DataRowVersion.Current);
		}
		
		#region Properties
		public virtual Guid EmployeeID
		{
			get
			{
				return this.GetGuid(EmployeesSchema.EmployeeID.FieldName);
	    	}
			set
			{
				this.SetGuid(EmployeesSchema.EmployeeID.FieldName, value);
			}
		}
		public virtual string LastName
		{
			get
			{
				return this.GetString(EmployeesSchema.LastName.FieldName);
	    	}
			set
			{
				this.SetString(EmployeesSchema.LastName.FieldName, value);
			}
		}
		public virtual string FirstName
		{
			get
			{
				return this.GetString(EmployeesSchema.FirstName.FieldName);
	    	}
			set
			{
				this.SetString(EmployeesSchema.FirstName.FieldName, value);
			}
		}
		public virtual string Title
		{
			get
			{
				return this.GetString(EmployeesSchema.Title.FieldName);
	    	}
			set
			{
				this.SetString(EmployeesSchema.Title.FieldName, value);
			}
		}
		public virtual string TitleOfCourtesy
		{
			get
			{
				return this.GetString(EmployeesSchema.TitleOfCourtesy.FieldName);
	    	}
			set
			{
				this.SetString(EmployeesSchema.TitleOfCourtesy.FieldName, value);
			}
		}
		public virtual DateTime BirthDate
		{
			get
			{
				return this.GetDateTime(EmployeesSchema.BirthDate.FieldName);
	    	}
			set
			{
				this.SetDateTime(EmployeesSchema.BirthDate.FieldName, value);
			}
		}
		public virtual DateTime HireDate
		{
			get
			{
				return this.GetDateTime(EmployeesSchema.HireDate.FieldName);
	    	}
			set
			{
				this.SetDateTime(EmployeesSchema.HireDate.FieldName, value);
			}
		}
		public virtual string Address
		{
			get
			{
				return this.GetString(EmployeesSchema.Address.FieldName);
	    	}
			set
			{
				this.SetString(EmployeesSchema.Address.FieldName, value);
			}
		}
		public virtual string City
		{
			get
			{
				return this.GetString(EmployeesSchema.City.FieldName);
	    	}
			set
			{
				this.SetString(EmployeesSchema.City.FieldName, value);
			}
		}
		public virtual string Region
		{
			get
			{
				return this.GetString(EmployeesSchema.Region.FieldName);
	    	}
			set
			{
				this.SetString(EmployeesSchema.Region.FieldName, value);
			}
		}
		public virtual string PostalCode
		{
			get
			{
				return this.GetString(EmployeesSchema.PostalCode.FieldName);
	    	}
			set
			{
				this.SetString(EmployeesSchema.PostalCode.FieldName, value);
			}
		}
		public virtual string Country
		{
			get
			{
				return this.GetString(EmployeesSchema.Country.FieldName);
	    	}
			set
			{
				this.SetString(EmployeesSchema.Country.FieldName, value);
			}
		}
		public virtual string HomePhone
		{
			get
			{
				return this.GetString(EmployeesSchema.HomePhone.FieldName);
	    	}
			set
			{
				this.SetString(EmployeesSchema.HomePhone.FieldName, value);
			}
		}
		public virtual string Extension
		{
			get
			{
				return this.GetString(EmployeesSchema.Extension.FieldName);
	    	}
			set
			{
				this.SetString(EmployeesSchema.Extension.FieldName, value);
			}
		}
		public virtual byte[] Photo
		{
			get
			{
				return this.GetByteArray(EmployeesSchema.Photo.FieldName);
	    	}
			set
			{
				this.SetByteArray(EmployeesSchema.Photo.FieldName, value);
			}
		}
		public virtual string Notes
		{
			get
			{
				return this.GetString(EmployeesSchema.Notes.FieldName);
	    	}
			set
			{
				this.SetString(EmployeesSchema.Notes.FieldName, value);
			}
		}
		public virtual int ReportsTo
		{
			get
			{
				return this.GetInteger(EmployeesSchema.ReportsTo.FieldName);
	    	}
			set
			{
				this.SetInteger(EmployeesSchema.ReportsTo.FieldName, value);
			}
		}
		public virtual string PhotoPath
		{
			get
			{
				return this.GetString(EmployeesSchema.PhotoPath.FieldName);
	    	}
			set
			{
				this.SetString(EmployeesSchema.PhotoPath.FieldName, value);
			}
		}

		public override string TableName
		{
			get { return "Employees"; }
		}
		
		#endregion		
		
		#region String Properties
	
		public virtual string s_EmployeeID
	    {
			get
	        {
				return this.IsColumnNull(EmployeesSchema.EmployeeID.FieldName) ? string.Empty : base.GetGuidAsString(EmployeesSchema.EmployeeID.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeesSchema.EmployeeID.FieldName);
				else
					this.EmployeeID = base.SetGuidAsString(EmployeesSchema.EmployeeID.FieldName, value);
			}
		}

		public virtual string s_LastName
	    {
			get
	        {
				return this.IsColumnNull(EmployeesSchema.LastName.FieldName) ? string.Empty : base.GetStringAsString(EmployeesSchema.LastName.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeesSchema.LastName.FieldName);
				else
					this.LastName = base.SetStringAsString(EmployeesSchema.LastName.FieldName, value);
			}
		}

		public virtual string s_FirstName
	    {
			get
	        {
				return this.IsColumnNull(EmployeesSchema.FirstName.FieldName) ? string.Empty : base.GetStringAsString(EmployeesSchema.FirstName.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeesSchema.FirstName.FieldName);
				else
					this.FirstName = base.SetStringAsString(EmployeesSchema.FirstName.FieldName, value);
			}
		}

		public virtual string s_Title
	    {
			get
	        {
				return this.IsColumnNull(EmployeesSchema.Title.FieldName) ? string.Empty : base.GetStringAsString(EmployeesSchema.Title.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeesSchema.Title.FieldName);
				else
					this.Title = base.SetStringAsString(EmployeesSchema.Title.FieldName, value);
			}
		}

		public virtual string s_TitleOfCourtesy
	    {
			get
	        {
				return this.IsColumnNull(EmployeesSchema.TitleOfCourtesy.FieldName) ? string.Empty : base.GetStringAsString(EmployeesSchema.TitleOfCourtesy.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeesSchema.TitleOfCourtesy.FieldName);
				else
					this.TitleOfCourtesy = base.SetStringAsString(EmployeesSchema.TitleOfCourtesy.FieldName, value);
			}
		}

		public virtual string s_BirthDate
	    {
			get
	        {
				return this.IsColumnNull(EmployeesSchema.BirthDate.FieldName) ? string.Empty : base.GetDateTimeAsString(EmployeesSchema.BirthDate.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeesSchema.BirthDate.FieldName);
				else
					this.BirthDate = base.SetDateTimeAsString(EmployeesSchema.BirthDate.FieldName, value);
			}
		}

		public virtual string s_HireDate
	    {
			get
	        {
				return this.IsColumnNull(EmployeesSchema.HireDate.FieldName) ? string.Empty : base.GetDateTimeAsString(EmployeesSchema.HireDate.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeesSchema.HireDate.FieldName);
				else
					this.HireDate = base.SetDateTimeAsString(EmployeesSchema.HireDate.FieldName, value);
			}
		}

		public virtual string s_Address
	    {
			get
	        {
				return this.IsColumnNull(EmployeesSchema.Address.FieldName) ? string.Empty : base.GetStringAsString(EmployeesSchema.Address.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeesSchema.Address.FieldName);
				else
					this.Address = base.SetStringAsString(EmployeesSchema.Address.FieldName, value);
			}
		}

		public virtual string s_City
	    {
			get
	        {
				return this.IsColumnNull(EmployeesSchema.City.FieldName) ? string.Empty : base.GetStringAsString(EmployeesSchema.City.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeesSchema.City.FieldName);
				else
					this.City = base.SetStringAsString(EmployeesSchema.City.FieldName, value);
			}
		}

		public virtual string s_Region
	    {
			get
	        {
				return this.IsColumnNull(EmployeesSchema.Region.FieldName) ? string.Empty : base.GetStringAsString(EmployeesSchema.Region.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeesSchema.Region.FieldName);
				else
					this.Region = base.SetStringAsString(EmployeesSchema.Region.FieldName, value);
			}
		}

		public virtual string s_PostalCode
	    {
			get
	        {
				return this.IsColumnNull(EmployeesSchema.PostalCode.FieldName) ? string.Empty : base.GetStringAsString(EmployeesSchema.PostalCode.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeesSchema.PostalCode.FieldName);
				else
					this.PostalCode = base.SetStringAsString(EmployeesSchema.PostalCode.FieldName, value);
			}
		}

		public virtual string s_Country
	    {
			get
	        {
				return this.IsColumnNull(EmployeesSchema.Country.FieldName) ? string.Empty : base.GetStringAsString(EmployeesSchema.Country.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeesSchema.Country.FieldName);
				else
					this.Country = base.SetStringAsString(EmployeesSchema.Country.FieldName, value);
			}
		}

		public virtual string s_HomePhone
	    {
			get
	        {
				return this.IsColumnNull(EmployeesSchema.HomePhone.FieldName) ? string.Empty : base.GetStringAsString(EmployeesSchema.HomePhone.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeesSchema.HomePhone.FieldName);
				else
					this.HomePhone = base.SetStringAsString(EmployeesSchema.HomePhone.FieldName, value);
			}
		}

		public virtual string s_Extension
	    {
			get
	        {
				return this.IsColumnNull(EmployeesSchema.Extension.FieldName) ? string.Empty : base.GetStringAsString(EmployeesSchema.Extension.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeesSchema.Extension.FieldName);
				else
					this.Extension = base.SetStringAsString(EmployeesSchema.Extension.FieldName, value);
			}
		}

		public virtual string s_Notes
	    {
			get
	        {
				return this.IsColumnNull(EmployeesSchema.Notes.FieldName) ? string.Empty : base.GetStringAsString(EmployeesSchema.Notes.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeesSchema.Notes.FieldName);
				else
					this.Notes = base.SetStringAsString(EmployeesSchema.Notes.FieldName, value);
			}
		}

		public virtual string s_ReportsTo
	    {
			get
	        {
				return this.IsColumnNull(EmployeesSchema.ReportsTo.FieldName) ? string.Empty : base.GetIntegerAsString(EmployeesSchema.ReportsTo.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeesSchema.ReportsTo.FieldName);
				else
					this.ReportsTo = base.SetIntegerAsString(EmployeesSchema.ReportsTo.FieldName, value);
			}
		}

		public virtual string s_PhotoPath
	    {
			get
	        {
				return this.IsColumnNull(EmployeesSchema.PhotoPath.FieldName) ? string.Empty : base.GetStringAsString(EmployeesSchema.PhotoPath.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeesSchema.PhotoPath.FieldName);
				else
					this.PhotoPath = base.SetStringAsString(EmployeesSchema.PhotoPath.FieldName, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter EmployeeID
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeesSchema.EmployeeID);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter LastName
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeesSchema.LastName);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter FirstName
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeesSchema.FirstName);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Title
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeesSchema.Title);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter TitleOfCourtesy
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeesSchema.TitleOfCourtesy);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter BirthDate
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeesSchema.BirthDate);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter HireDate
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeesSchema.HireDate);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Address
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeesSchema.Address);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter City
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeesSchema.City);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Region
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeesSchema.Region);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter PostalCode
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeesSchema.PostalCode);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Country
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeesSchema.Country);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter HomePhone
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeesSchema.HomePhone);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Extension
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeesSchema.Extension);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Photo
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeesSchema.Photo);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Notes
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeesSchema.Notes);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter ReportsTo
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeesSchema.ReportsTo);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter PhotoPath
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeesSchema.PhotoPath);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter EmployeeID
		    {
				get
		        {
					if(_EmployeeID_W == null)
	        	    {
						_EmployeeID_W = TearOff.EmployeeID;
					}
					return _EmployeeID_W;
				}
			}

			public WhereParameter LastName
		    {
				get
		        {
					if(_LastName_W == null)
	        	    {
						_LastName_W = TearOff.LastName;
					}
					return _LastName_W;
				}
			}

			public WhereParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public WhereParameter Title
		    {
				get
		        {
					if(_Title_W == null)
	        	    {
						_Title_W = TearOff.Title;
					}
					return _Title_W;
				}
			}

			public WhereParameter TitleOfCourtesy
		    {
				get
		        {
					if(_TitleOfCourtesy_W == null)
	        	    {
						_TitleOfCourtesy_W = TearOff.TitleOfCourtesy;
					}
					return _TitleOfCourtesy_W;
				}
			}

			public WhereParameter BirthDate
		    {
				get
		        {
					if(_BirthDate_W == null)
	        	    {
						_BirthDate_W = TearOff.BirthDate;
					}
					return _BirthDate_W;
				}
			}

			public WhereParameter HireDate
		    {
				get
		        {
					if(_HireDate_W == null)
	        	    {
						_HireDate_W = TearOff.HireDate;
					}
					return _HireDate_W;
				}
			}

			public WhereParameter Address
		    {
				get
		        {
					if(_Address_W == null)
	        	    {
						_Address_W = TearOff.Address;
					}
					return _Address_W;
				}
			}

			public WhereParameter City
		    {
				get
		        {
					if(_City_W == null)
	        	    {
						_City_W = TearOff.City;
					}
					return _City_W;
				}
			}

			public WhereParameter Region
		    {
				get
		        {
					if(_Region_W == null)
	        	    {
						_Region_W = TearOff.Region;
					}
					return _Region_W;
				}
			}

			public WhereParameter PostalCode
		    {
				get
		        {
					if(_PostalCode_W == null)
	        	    {
						_PostalCode_W = TearOff.PostalCode;
					}
					return _PostalCode_W;
				}
			}

			public WhereParameter Country
		    {
				get
		        {
					if(_Country_W == null)
	        	    {
						_Country_W = TearOff.Country;
					}
					return _Country_W;
				}
			}

			public WhereParameter HomePhone
		    {
				get
		        {
					if(_HomePhone_W == null)
	        	    {
						_HomePhone_W = TearOff.HomePhone;
					}
					return _HomePhone_W;
				}
			}

			public WhereParameter Extension
		    {
				get
		        {
					if(_Extension_W == null)
	        	    {
						_Extension_W = TearOff.Extension;
					}
					return _Extension_W;
				}
			}

			public WhereParameter Photo
		    {
				get
		        {
					if(_Photo_W == null)
	        	    {
						_Photo_W = TearOff.Photo;
					}
					return _Photo_W;
				}
			}

			public WhereParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			public WhereParameter ReportsTo
		    {
				get
		        {
					if(_ReportsTo_W == null)
	        	    {
						_ReportsTo_W = TearOff.ReportsTo;
					}
					return _ReportsTo_W;
				}
			}

			public WhereParameter PhotoPath
		    {
				get
		        {
					if(_PhotoPath_W == null)
	        	    {
						_PhotoPath_W = TearOff.PhotoPath;
					}
					return _PhotoPath_W;
				}
			}

			private WhereParameter _EmployeeID_W = null;
			private WhereParameter _LastName_W = null;
			private WhereParameter _FirstName_W = null;
			private WhereParameter _Title_W = null;
			private WhereParameter _TitleOfCourtesy_W = null;
			private WhereParameter _BirthDate_W = null;
			private WhereParameter _HireDate_W = null;
			private WhereParameter _Address_W = null;
			private WhereParameter _City_W = null;
			private WhereParameter _Region_W = null;
			private WhereParameter _PostalCode_W = null;
			private WhereParameter _Country_W = null;
			private WhereParameter _HomePhone_W = null;
			private WhereParameter _Extension_W = null;
			private WhereParameter _Photo_W = null;
			private WhereParameter _Notes_W = null;
			private WhereParameter _ReportsTo_W = null;
			private WhereParameter _PhotoPath_W = null;

			public void WhereClauseReset()
			{
				_EmployeeID_W = null;
				_LastName_W = null;
				_FirstName_W = null;
				_Title_W = null;
				_TitleOfCourtesy_W = null;
				_BirthDate_W = null;
				_HireDate_W = null;
				_Address_W = null;
				_City_W = null;
				_Region_W = null;
				_PostalCode_W = null;
				_Country_W = null;
				_HomePhone_W = null;
				_Extension_W = null;
				_Photo_W = null;
				_Notes_W = null;
				_ReportsTo_W = null;
				_PhotoPath_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private EasyObject _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter EmployeeID
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeesSchema.EmployeeID);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter LastName
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeesSchema.LastName);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter FirstName
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeesSchema.FirstName);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Title
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeesSchema.Title);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter TitleOfCourtesy
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeesSchema.TitleOfCourtesy);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter BirthDate
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeesSchema.BirthDate);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter HireDate
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeesSchema.HireDate);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Address
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeesSchema.Address);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter City
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeesSchema.City);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Region
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeesSchema.Region);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter PostalCode
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeesSchema.PostalCode);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Country
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeesSchema.Country);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter HomePhone
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeesSchema.HomePhone);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Extension
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeesSchema.Extension);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Photo
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeesSchema.Photo);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Notes
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeesSchema.Notes);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter ReportsTo
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeesSchema.ReportsTo);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter PhotoPath
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeesSchema.PhotoPath);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter EmployeeID
		    {
				get
		        {
					if(_EmployeeID_W == null)
	        	    {
						_EmployeeID_W = TearOff.EmployeeID;
					}
					return _EmployeeID_W;
				}
			}

			public AggregateParameter LastName
		    {
				get
		        {
					if(_LastName_W == null)
	        	    {
						_LastName_W = TearOff.LastName;
					}
					return _LastName_W;
				}
			}

			public AggregateParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public AggregateParameter Title
		    {
				get
		        {
					if(_Title_W == null)
	        	    {
						_Title_W = TearOff.Title;
					}
					return _Title_W;
				}
			}

			public AggregateParameter TitleOfCourtesy
		    {
				get
		        {
					if(_TitleOfCourtesy_W == null)
	        	    {
						_TitleOfCourtesy_W = TearOff.TitleOfCourtesy;
					}
					return _TitleOfCourtesy_W;
				}
			}

			public AggregateParameter BirthDate
		    {
				get
		        {
					if(_BirthDate_W == null)
	        	    {
						_BirthDate_W = TearOff.BirthDate;
					}
					return _BirthDate_W;
				}
			}

			public AggregateParameter HireDate
		    {
				get
		        {
					if(_HireDate_W == null)
	        	    {
						_HireDate_W = TearOff.HireDate;
					}
					return _HireDate_W;
				}
			}

			public AggregateParameter Address
		    {
				get
		        {
					if(_Address_W == null)
	        	    {
						_Address_W = TearOff.Address;
					}
					return _Address_W;
				}
			}

			public AggregateParameter City
		    {
				get
		        {
					if(_City_W == null)
	        	    {
						_City_W = TearOff.City;
					}
					return _City_W;
				}
			}

			public AggregateParameter Region
		    {
				get
		        {
					if(_Region_W == null)
	        	    {
						_Region_W = TearOff.Region;
					}
					return _Region_W;
				}
			}

			public AggregateParameter PostalCode
		    {
				get
		        {
					if(_PostalCode_W == null)
	        	    {
						_PostalCode_W = TearOff.PostalCode;
					}
					return _PostalCode_W;
				}
			}

			public AggregateParameter Country
		    {
				get
		        {
					if(_Country_W == null)
	        	    {
						_Country_W = TearOff.Country;
					}
					return _Country_W;
				}
			}

			public AggregateParameter HomePhone
		    {
				get
		        {
					if(_HomePhone_W == null)
	        	    {
						_HomePhone_W = TearOff.HomePhone;
					}
					return _HomePhone_W;
				}
			}

			public AggregateParameter Extension
		    {
				get
		        {
					if(_Extension_W == null)
	        	    {
						_Extension_W = TearOff.Extension;
					}
					return _Extension_W;
				}
			}

			public AggregateParameter Photo
		    {
				get
		        {
					if(_Photo_W == null)
	        	    {
						_Photo_W = TearOff.Photo;
					}
					return _Photo_W;
				}
			}

			public AggregateParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			public AggregateParameter ReportsTo
		    {
				get
		        {
					if(_ReportsTo_W == null)
	        	    {
						_ReportsTo_W = TearOff.ReportsTo;
					}
					return _ReportsTo_W;
				}
			}

			public AggregateParameter PhotoPath
		    {
				get
		        {
					if(_PhotoPath_W == null)
	        	    {
						_PhotoPath_W = TearOff.PhotoPath;
					}
					return _PhotoPath_W;
				}
			}

			private AggregateParameter _EmployeeID_W = null;
			private AggregateParameter _LastName_W = null;
			private AggregateParameter _FirstName_W = null;
			private AggregateParameter _Title_W = null;
			private AggregateParameter _TitleOfCourtesy_W = null;
			private AggregateParameter _BirthDate_W = null;
			private AggregateParameter _HireDate_W = null;
			private AggregateParameter _Address_W = null;
			private AggregateParameter _City_W = null;
			private AggregateParameter _Region_W = null;
			private AggregateParameter _PostalCode_W = null;
			private AggregateParameter _Country_W = null;
			private AggregateParameter _HomePhone_W = null;
			private AggregateParameter _Extension_W = null;
			private AggregateParameter _Photo_W = null;
			private AggregateParameter _Notes_W = null;
			private AggregateParameter _ReportsTo_W = null;
			private AggregateParameter _PhotoPath_W = null;

			public void AggregateClauseReset()
			{
				_EmployeeID_W = null;
				_LastName_W = null;
				_FirstName_W = null;
				_Title_W = null;
				_TitleOfCourtesy_W = null;
				_BirthDate_W = null;
				_HireDate_W = null;
				_Address_W = null;
				_City_W = null;
				_Region_W = null;
				_PostalCode_W = null;
				_Country_W = null;
				_HomePhone_W = null;
				_Extension_W = null;
				_Photo_W = null;
				_Notes_W = null;
				_ReportsTo_W = null;
				_PhotoPath_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private EasyObject _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	}
}
