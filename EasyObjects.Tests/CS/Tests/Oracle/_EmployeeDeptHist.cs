/*
'===============================================================================
'  Generated From - CSharp_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.7)

using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace NCI.EasyObjects.Tests.Oracle
{

	#region Schema

	public class EmployeeDeptHistSchema : NCI.EasyObjects.Schema
	{
		private static ArrayList _entries;
		public static SchemaItem EMPLOYEEID = new SchemaItem("EMPLOYEEID", DbType.Decimal, false, false, false, true, false, false);
		public static SchemaItem DEPARTMENTID = new SchemaItem("DEPARTMENTID", DbType.Decimal, false, false, false, true, false, false);
		public static SchemaItem STARTDATE = new SchemaItem("STARTDATE", DbType.DateTime, false, true, false, false, false, false);
		public static SchemaItem ENDDATE = new SchemaItem("ENDDATE", DbType.DateTime, false, true, false, false, false, false);
		public static SchemaItem MODIFIEDDATE = new SchemaItem("MODIFIEDDATE", DbType.DateTime, false, true, false, false, false, false);

		public override ArrayList SchemaEntries
		{
			get
			{
				if (_entries == null )
				{
					_entries = new ArrayList();
					_entries.Add(EmployeeDeptHistSchema.EMPLOYEEID);
					_entries.Add(EmployeeDeptHistSchema.DEPARTMENTID);
					_entries.Add(EmployeeDeptHistSchema.STARTDATE);
					_entries.Add(EmployeeDeptHistSchema.ENDDATE);
					_entries.Add(EmployeeDeptHistSchema.MODIFIEDDATE);
				}
				return _entries;
			}
		}
	}
	#endregion

	public abstract class _EmployeeDeptHist : EasyObject
	{

		public _EmployeeDeptHist()
		{
			EmployeeDeptHistSchema _schema = new EmployeeDeptHistSchema();
			this.SchemaEntries = _schema.SchemaEntries;
			this.SchemaGlobal = "MNOONA01";
		}
		
		public override void FlushData() 	 
		{ 	 
			this._whereClause = null; 	 
			this._aggregateClause = null; 	 
			base.FlushData(); 	 
		}
			   
		/// <summary>
		/// Loads the business object with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="DEPARTMENTID"></param>
		/// <param name="EMPLOYEEID"></param>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadByPrimaryKey(decimal DEPARTMENTID, decimal EMPLOYEEID)
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					ListDictionary parameters = new ListDictionary();

					// Add in parameters
					parameters.Add(EmployeeDeptHistSchema.DEPARTMENTID.FieldName, DEPARTMENTID);
					parameters.Add(EmployeeDeptHistSchema.EMPLOYEEID.FieldName, EMPLOYEEID);

					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetEMPLOYEEDEPTHIST", parameters, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.DEPARTMENTID.Value = DEPARTMENTID;
					this.Where.EMPLOYEEID.Value = EMPLOYEEID;
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}
	
		/// <summary>
		/// Loads all records from the table.
		/// </summary>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadAll()
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetAllEMPLOYEEDEPTHIST", null, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		/// <summary>
		/// Adds a new record to the internal table.
		/// </summary>
		public override void AddNew()
		{
			base.AddNew();
		}

		protected override DBCommandWrapper GetInsertCommand(CommandType commandType)
		{	
			DBCommandWrapper dbCommandWrapper;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_AddEMPLOYEEDEPTHIST";
					dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand);

					CreateParameters(dbCommandWrapper);
					
					return dbCommandWrapper;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!item.IsComputed)
						{
							if ((item.IsAutoKey && this.IdentityInsert) || !item.IsAutoKey)
							{
								this.Query.AddInsertColumn(item);
							}
						}
					}
					dbCommandWrapper = this.Query.GetInsertCommandWrapper();

					dbCommandWrapper.Command.Parameters.Clear();
					if (this.IdentityInsert)
					{
					}
					else
					{
					}
					CreateParameters(dbCommandWrapper);

					return dbCommandWrapper;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DBCommandWrapper GetUpdateCommand(CommandType commandType)
		{
			DBCommandWrapper dbCommandWrapper;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_UpdateEMPLOYEEDEPTHIST";
					dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand);

					CreateParameters(dbCommandWrapper);
					
					return dbCommandWrapper;

				case CommandType.Text:
					this.Query.ClearAll();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!(item.IsAutoKey || item.IsComputed))
						{
							this.Query.AddUpdateColumn(item);
						}
					}

					this.Where.WhereClauseReset();
					this.Where.EMPLOYEEID.Operator = WhereParameter.Operand.Equal;
					this.Where.DEPARTMENTID.Operator = WhereParameter.Operand.Equal;
					dbCommandWrapper = this.Query.GetUpdateCommandWrapper();

					dbCommandWrapper.Command.Parameters.Clear();
					CreateParameters(dbCommandWrapper);
					
					return dbCommandWrapper;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DBCommandWrapper GetDeleteCommand(CommandType commandType)
		{
			DBCommandWrapper dbCommandWrapper;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_DeleteEMPLOYEEDEPTHIST";
					dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand);
					dbCommandWrapper.AddInParameter("DEPARTMENTID", DbType.Decimal, "DEPARTMENTID", DataRowVersion.Current);
					dbCommandWrapper.AddInParameter("EMPLOYEEID", DbType.Decimal, "EMPLOYEEID", DataRowVersion.Current);
					
					return dbCommandWrapper;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.DEPARTMENTID.Operator = WhereParameter.Operand.Equal;
					this.Where.EMPLOYEEID.Operator = WhereParameter.Operand.Equal;
					dbCommandWrapper = this.Query.GetDeleteCommandWrapper();

					dbCommandWrapper.Command.Parameters.Clear();
					dbCommandWrapper.AddInParameter("DEPARTMENTID", DbType.Decimal, "DEPARTMENTID", DataRowVersion.Current);
					dbCommandWrapper.AddInParameter("EMPLOYEEID", DbType.Decimal, "EMPLOYEEID", DataRowVersion.Current);
					
					return dbCommandWrapper;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		private void CreateParameters(DBCommandWrapper dbCommandWrapper)
		{
			dbCommandWrapper.AddInParameter("EMPLOYEEID", DbType.Decimal, "EMPLOYEEID", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("DEPARTMENTID", DbType.Decimal, "DEPARTMENTID", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("STARTDATE", DbType.DateTime, "STARTDATE", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("ENDDATE", DbType.DateTime, "ENDDATE", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("MODIFIEDDATE", DbType.DateTime, "MODIFIEDDATE", DataRowVersion.Current);
		}
		
		#region Properties
		public virtual decimal EMPLOYEEID
		{
			get
			{
				return this.GetDecimal(EmployeeDeptHistSchema.EMPLOYEEID.FieldName);
	    	}
			set
			{
				this.SetDecimal(EmployeeDeptHistSchema.EMPLOYEEID.FieldName, value);
			}
		}
		public virtual decimal DEPARTMENTID
		{
			get
			{
				return this.GetDecimal(EmployeeDeptHistSchema.DEPARTMENTID.FieldName);
	    	}
			set
			{
				this.SetDecimal(EmployeeDeptHistSchema.DEPARTMENTID.FieldName, value);
			}
		}
		public virtual DateTime STARTDATE
		{
			get
			{
				return this.GetDateTime(EmployeeDeptHistSchema.STARTDATE.FieldName);
	    	}
			set
			{
				this.SetDateTime(EmployeeDeptHistSchema.STARTDATE.FieldName, value);
			}
		}
		public virtual DateTime ENDDATE
		{
			get
			{
				return this.GetDateTime(EmployeeDeptHistSchema.ENDDATE.FieldName);
	    	}
			set
			{
				this.SetDateTime(EmployeeDeptHistSchema.ENDDATE.FieldName, value);
			}
		}
		public virtual DateTime MODIFIEDDATE
		{
			get
			{
				return this.GetDateTime(EmployeeDeptHistSchema.MODIFIEDDATE.FieldName);
	    	}
			set
			{
				this.SetDateTime(EmployeeDeptHistSchema.MODIFIEDDATE.FieldName, value);
			}
		}

		public override string TableName
		{
			get { return "EMPLOYEEDEPTHIST"; }
		}
		
		#endregion		
		
		#region String Properties
	
		public virtual string s_EMPLOYEEID
	    {
			get
	        {
				return this.IsColumnNull(EmployeeDeptHistSchema.EMPLOYEEID.FieldName) ? string.Empty : base.GetDecimalAsString(EmployeeDeptHistSchema.EMPLOYEEID.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeeDeptHistSchema.EMPLOYEEID.FieldName);
				else
					this.EMPLOYEEID = base.SetDecimalAsString(EmployeeDeptHistSchema.EMPLOYEEID.FieldName, value);
			}
		}

		public virtual string s_DEPARTMENTID
	    {
			get
	        {
				return this.IsColumnNull(EmployeeDeptHistSchema.DEPARTMENTID.FieldName) ? string.Empty : base.GetDecimalAsString(EmployeeDeptHistSchema.DEPARTMENTID.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeeDeptHistSchema.DEPARTMENTID.FieldName);
				else
					this.DEPARTMENTID = base.SetDecimalAsString(EmployeeDeptHistSchema.DEPARTMENTID.FieldName, value);
			}
		}

		public virtual string s_STARTDATE
	    {
			get
	        {
				return this.IsColumnNull(EmployeeDeptHistSchema.STARTDATE.FieldName) ? string.Empty : base.GetDateTimeAsString(EmployeeDeptHistSchema.STARTDATE.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeeDeptHistSchema.STARTDATE.FieldName);
				else
					this.STARTDATE = base.SetDateTimeAsString(EmployeeDeptHistSchema.STARTDATE.FieldName, value);
			}
		}

		public virtual string s_ENDDATE
	    {
			get
	        {
				return this.IsColumnNull(EmployeeDeptHistSchema.ENDDATE.FieldName) ? string.Empty : base.GetDateTimeAsString(EmployeeDeptHistSchema.ENDDATE.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeeDeptHistSchema.ENDDATE.FieldName);
				else
					this.ENDDATE = base.SetDateTimeAsString(EmployeeDeptHistSchema.ENDDATE.FieldName, value);
			}
		}

		public virtual string s_MODIFIEDDATE
	    {
			get
	        {
				return this.IsColumnNull(EmployeeDeptHistSchema.MODIFIEDDATE.FieldName) ? string.Empty : base.GetDateTimeAsString(EmployeeDeptHistSchema.MODIFIEDDATE.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(EmployeeDeptHistSchema.MODIFIEDDATE.FieldName);
				else
					this.MODIFIEDDATE = base.SetDateTimeAsString(EmployeeDeptHistSchema.MODIFIEDDATE.FieldName, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter EMPLOYEEID
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeeDeptHistSchema.EMPLOYEEID);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter DEPARTMENTID
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeeDeptHistSchema.DEPARTMENTID);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter STARTDATE
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeeDeptHistSchema.STARTDATE);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter ENDDATE
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeeDeptHistSchema.ENDDATE);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter MODIFIEDDATE
				{
					get
					{
							WhereParameter wp = new WhereParameter(EmployeeDeptHistSchema.MODIFIEDDATE);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter EMPLOYEEID
		    {
				get
		        {
					if(_EMPLOYEEID_W == null)
	        	    {
						_EMPLOYEEID_W = TearOff.EMPLOYEEID;
					}
					return _EMPLOYEEID_W;
				}
			}

			public WhereParameter DEPARTMENTID
		    {
				get
		        {
					if(_DEPARTMENTID_W == null)
	        	    {
						_DEPARTMENTID_W = TearOff.DEPARTMENTID;
					}
					return _DEPARTMENTID_W;
				}
			}

			public WhereParameter STARTDATE
		    {
				get
		        {
					if(_STARTDATE_W == null)
	        	    {
						_STARTDATE_W = TearOff.STARTDATE;
					}
					return _STARTDATE_W;
				}
			}

			public WhereParameter ENDDATE
		    {
				get
		        {
					if(_ENDDATE_W == null)
	        	    {
						_ENDDATE_W = TearOff.ENDDATE;
					}
					return _ENDDATE_W;
				}
			}

			public WhereParameter MODIFIEDDATE
		    {
				get
		        {
					if(_MODIFIEDDATE_W == null)
	        	    {
						_MODIFIEDDATE_W = TearOff.MODIFIEDDATE;
					}
					return _MODIFIEDDATE_W;
				}
			}

			private WhereParameter _EMPLOYEEID_W = null;
			private WhereParameter _DEPARTMENTID_W = null;
			private WhereParameter _STARTDATE_W = null;
			private WhereParameter _ENDDATE_W = null;
			private WhereParameter _MODIFIEDDATE_W = null;

			public void WhereClauseReset()
			{
				_EMPLOYEEID_W = null;
				_DEPARTMENTID_W = null;
				_STARTDATE_W = null;
				_ENDDATE_W = null;
				_MODIFIEDDATE_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private EasyObject _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter EMPLOYEEID
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeeDeptHistSchema.EMPLOYEEID);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter DEPARTMENTID
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeeDeptHistSchema.DEPARTMENTID);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter STARTDATE
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeeDeptHistSchema.STARTDATE);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter ENDDATE
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeeDeptHistSchema.ENDDATE);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter MODIFIEDDATE
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(EmployeeDeptHistSchema.MODIFIEDDATE);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter EMPLOYEEID
		    {
				get
		        {
					if(_EMPLOYEEID_W == null)
	        	    {
						_EMPLOYEEID_W = TearOff.EMPLOYEEID;
					}
					return _EMPLOYEEID_W;
				}
			}

			public AggregateParameter DEPARTMENTID
		    {
				get
		        {
					if(_DEPARTMENTID_W == null)
	        	    {
						_DEPARTMENTID_W = TearOff.DEPARTMENTID;
					}
					return _DEPARTMENTID_W;
				}
			}

			public AggregateParameter STARTDATE
		    {
				get
		        {
					if(_STARTDATE_W == null)
	        	    {
						_STARTDATE_W = TearOff.STARTDATE;
					}
					return _STARTDATE_W;
				}
			}

			public AggregateParameter ENDDATE
		    {
				get
		        {
					if(_ENDDATE_W == null)
	        	    {
						_ENDDATE_W = TearOff.ENDDATE;
					}
					return _ENDDATE_W;
				}
			}

			public AggregateParameter MODIFIEDDATE
		    {
				get
		        {
					if(_MODIFIEDDATE_W == null)
	        	    {
						_MODIFIEDDATE_W = TearOff.MODIFIEDDATE;
					}
					return _MODIFIEDDATE_W;
				}
			}

			private AggregateParameter _EMPLOYEEID_W = null;
			private AggregateParameter _DEPARTMENTID_W = null;
			private AggregateParameter _STARTDATE_W = null;
			private AggregateParameter _ENDDATE_W = null;
			private AggregateParameter _MODIFIEDDATE_W = null;

			public void AggregateClauseReset()
			{
				_EMPLOYEEID_W = null;
				_DEPARTMENTID_W = null;
				_STARTDATE_W = null;
				_ENDDATE_W = null;
				_MODIFIEDDATE_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private EasyObject _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	}
}
