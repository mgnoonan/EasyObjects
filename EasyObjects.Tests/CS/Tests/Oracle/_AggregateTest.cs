/*
'===============================================================================
'  Generated From - CSharp_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.7)

using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace NCI.EasyObjects.Tests.Oracle
{

	#region Schema

	public class AggregateTestSchema : NCI.EasyObjects.Schema
	{
		private static ArrayList _entries;
		public static SchemaItem ID = new SchemaItem("ID", DbType.Decimal, true, false, false, true, false, false);
		public static SchemaItem DEPARTMENTID = new SchemaItem("DEPARTMENTID", DbType.Decimal, false, true, false, false, false, false);
		public static SchemaItem FIRSTNAME = new SchemaItem("FIRSTNAME", DbType.AnsiString, SchemaItemJustify.None, 25, true, false, false, false);
		public static SchemaItem LASTNAME = new SchemaItem("LASTNAME", DbType.AnsiString, SchemaItemJustify.None, 15, true, false, false, false);
		public static SchemaItem AGE = new SchemaItem("AGE", DbType.Decimal, false, true, false, false, false, false);
		public static SchemaItem HIREDATE = new SchemaItem("HIREDATE", DbType.DateTime, false, true, false, false, false, false);
		public static SchemaItem SALARY = new SchemaItem("SALARY", DbType.Decimal, false, true, false, false, false, false);
		public static SchemaItem ISACTIVE = new SchemaItem("ISACTIVE", DbType.Decimal, false, true, false, false, false, false);
		public static SchemaItem TS = new SchemaItem("TS", DbType.Decimal, false, true, false, false, false, false);

		public override ArrayList SchemaEntries
		{
			get
			{
				if (_entries == null )
				{
					_entries = new ArrayList();
					_entries.Add(AggregateTestSchema.ID);
					AggregateTestSchema.ID.Properties.Add("SEQ:I", "MNOONA01.AGGTESTID");
					_entries.Add(AggregateTestSchema.DEPARTMENTID);
					_entries.Add(AggregateTestSchema.FIRSTNAME);
					_entries.Add(AggregateTestSchema.LASTNAME);
					_entries.Add(AggregateTestSchema.AGE);
					_entries.Add(AggregateTestSchema.HIREDATE);
					_entries.Add(AggregateTestSchema.SALARY);
					_entries.Add(AggregateTestSchema.ISACTIVE);
					_entries.Add(AggregateTestSchema.TS);
					AggregateTestSchema.TS.Properties.Add("SEQ:U", "MNOONA01.AGGTESTROWID");
					AggregateTestSchema.TS.IsRowID = true;
				}
				return _entries;
			}
		}
	}
	#endregion

	public abstract class _AggregateTest : EasyObject
	{

		public _AggregateTest()
		{
			AggregateTestSchema _schema = new AggregateTestSchema();
			this.SchemaEntries = _schema.SchemaEntries;
			this.SchemaGlobal = "MNOONA01";
		}
		
		public override void FlushData() 	 
		{ 	 
			this._whereClause = null; 	 
			this._aggregateClause = null; 	 
			base.FlushData(); 	 
		}
			   
		/// <summary>
		/// Loads the business object with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="ID"></param>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadByPrimaryKey(decimal ID)
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					ListDictionary parameters = new ListDictionary();

					// Add in parameters
					parameters.Add(AggregateTestSchema.ID.FieldName, ID);

					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetAGGREGATETEST", parameters, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.ID.Value = ID;
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}
	
		/// <summary>
		/// Loads all records from the table.
		/// </summary>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadAll()
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetAllAGGREGATETEST", null, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		/// <summary>
		/// Adds a new record to the internal table.
		/// </summary>
		public override void AddNew()
		{
			base.AddNew();
		}

		protected override DBCommandWrapper GetInsertCommand(CommandType commandType)
		{	
			DBCommandWrapper dbCommandWrapper;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_AddAGGREGATETEST";
					dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand);

					dbCommandWrapper.AddParameter("ID", DbType.Decimal, 0, ParameterDirection.Output, true, 0, 0, "ID", DataRowVersion.Default, Convert.DBNull);
					CreateParameters(dbCommandWrapper);
					
					return dbCommandWrapper;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!item.IsComputed)
						{
							if ((item.IsAutoKey && this.IdentityInsert) || !item.IsAutoKey)
							{
								this.Query.AddInsertColumn(item);
							}
						}
					}
					dbCommandWrapper = this.Query.GetInsertCommandWrapper();

					dbCommandWrapper.Command.Parameters.Clear();
					if (this.IdentityInsert)
					{
						dbCommandWrapper.AddInParameter("ID", DbType.Decimal, "ID", DataRowVersion.Default);
					}
					else
					{
						dbCommandWrapper.AddParameter("ID", DbType.Decimal, 0, ParameterDirection.InputOutput, true, 0, 0, "ID", DataRowVersion.Default, Convert.DBNull);
					}
					CreateParameters(dbCommandWrapper);

					return dbCommandWrapper;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DBCommandWrapper GetUpdateCommand(CommandType commandType)
		{
			DBCommandWrapper dbCommandWrapper;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_UpdateAGGREGATETEST";
					dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand);

					dbCommandWrapper.AddInParameter("ID", DbType.Decimal, "ID", DataRowVersion.Current);
					CreateParameters(dbCommandWrapper);
					
					return dbCommandWrapper;

				case CommandType.Text:
					this.Query.ClearAll();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!(item.IsAutoKey || item.IsComputed))
						{
							this.Query.AddUpdateColumn(item);
						}
					}

					this.Where.WhereClauseReset();
					this.Where.ID.Operator = WhereParameter.Operand.Equal;
					this.Where.TS.Operator = WhereParameter.Operand.Equal;
					dbCommandWrapper = this.Query.GetUpdateCommandWrapper();

					dbCommandWrapper.Command.Parameters.Clear();
					CreateParameters(dbCommandWrapper);
					dbCommandWrapper.AddInParameter("ID", DbType.Decimal, "ID", DataRowVersion.Current);
					
					return dbCommandWrapper;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DBCommandWrapper GetDeleteCommand(CommandType commandType)
		{
			DBCommandWrapper dbCommandWrapper;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_DeleteAGGREGATETEST";
					dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand);
					dbCommandWrapper.AddInParameter("ID", DbType.Decimal, "ID", DataRowVersion.Current);
					
					return dbCommandWrapper;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.ID.Operator = WhereParameter.Operand.Equal;
					dbCommandWrapper = this.Query.GetDeleteCommandWrapper();

					dbCommandWrapper.Command.Parameters.Clear();
					dbCommandWrapper.AddInParameter("ID", DbType.Decimal, "ID", DataRowVersion.Current);
					
					return dbCommandWrapper;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		private void CreateParameters(DBCommandWrapper dbCommandWrapper)
		{
			dbCommandWrapper.AddInParameter("DEPARTMENTID", DbType.Decimal, "DEPARTMENTID", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("FIRSTNAME", DbType.AnsiString, "FIRSTNAME", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("LASTNAME", DbType.AnsiString, "LASTNAME", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("AGE", DbType.Decimal, "AGE", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("HIREDATE", DbType.DateTime, "HIREDATE", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("SALARY", DbType.Decimal, "SALARY", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("ISACTIVE", DbType.Decimal, "ISACTIVE", DataRowVersion.Current);
			dbCommandWrapper.AddParameter("TS", DbType.Decimal, ParameterDirection.InputOutput, "TS", DataRowVersion.Current, null);
		}
		
		#region Properties
		public virtual decimal ID
		{
			get
			{
				return this.GetDecimal(AggregateTestSchema.ID.FieldName);
			}
			set
			{
				this.SetDecimal(AggregateTestSchema.ID.FieldName, value);
			}
		}
		public virtual decimal DEPARTMENTID
		{
			get
			{
				return this.GetDecimal(AggregateTestSchema.DEPARTMENTID.FieldName);
			}
			set
			{
				this.SetDecimal(AggregateTestSchema.DEPARTMENTID.FieldName, value);
			}
		}
		public virtual string FIRSTNAME
		{
			get
			{
				return this.GetString(AggregateTestSchema.FIRSTNAME.FieldName);
			}
			set
			{
				this.SetString(AggregateTestSchema.FIRSTNAME.FieldName, value);
			}
		}
		public virtual string LASTNAME
		{
			get
			{
				return this.GetString(AggregateTestSchema.LASTNAME.FieldName);
			}
			set
			{
				this.SetString(AggregateTestSchema.LASTNAME.FieldName, value);
			}
		}
		public virtual decimal AGE
		{
			get
			{
				return this.GetDecimal(AggregateTestSchema.AGE.FieldName);
			}
			set
			{
				this.SetDecimal(AggregateTestSchema.AGE.FieldName, value);
			}
		}
		public virtual DateTime HIREDATE
		{
			get
			{
				return this.GetDateTime(AggregateTestSchema.HIREDATE.FieldName);
			}
			set
			{
				this.SetDateTime(AggregateTestSchema.HIREDATE.FieldName, value);
			}
		}
		public virtual decimal SALARY
		{
			get
			{
				return this.GetDecimal(AggregateTestSchema.SALARY.FieldName);
			}
			set
			{
				this.SetDecimal(AggregateTestSchema.SALARY.FieldName, value);
			}
		}
		public virtual decimal ISACTIVE
		{
			get
			{
				return this.GetDecimal(AggregateTestSchema.ISACTIVE.FieldName);
			}
			set
			{
				this.SetDecimal(AggregateTestSchema.ISACTIVE.FieldName, value);
			}
		}
		public virtual decimal TS
		{
			get
			{
				return this.GetDecimal(AggregateTestSchema.TS.FieldName);
			}
			set
			{
				this.SetDecimal(AggregateTestSchema.TS.FieldName, value);
			}
		}

		public override string TableName
		{
			get { return "AGGREGATETEST"; }
		}
		
		#endregion		
		
		#region String Properties
	
		public virtual string s_ID
		{
			get
			{
				return this.IsColumnNull(AggregateTestSchema.ID.FieldName) ? string.Empty : base.GetDecimalAsString(AggregateTestSchema.ID.FieldName);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(AggregateTestSchema.ID.FieldName);
				else
					this.ID = base.SetDecimalAsString(AggregateTestSchema.ID.FieldName, value);
			}
		}

		public virtual string s_DEPARTMENTID
		{
			get
			{
				return this.IsColumnNull(AggregateTestSchema.DEPARTMENTID.FieldName) ? string.Empty : base.GetDecimalAsString(AggregateTestSchema.DEPARTMENTID.FieldName);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(AggregateTestSchema.DEPARTMENTID.FieldName);
				else
					this.DEPARTMENTID = base.SetDecimalAsString(AggregateTestSchema.DEPARTMENTID.FieldName, value);
			}
		}

		public virtual string s_FIRSTNAME
		{
			get
			{
				return this.IsColumnNull(AggregateTestSchema.FIRSTNAME.FieldName) ? string.Empty : base.GetStringAsString(AggregateTestSchema.FIRSTNAME.FieldName);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(AggregateTestSchema.FIRSTNAME.FieldName);
				else
					this.FIRSTNAME = base.SetStringAsString(AggregateTestSchema.FIRSTNAME.FieldName, value);
			}
		}

		public virtual string s_LASTNAME
		{
			get
			{
				return this.IsColumnNull(AggregateTestSchema.LASTNAME.FieldName) ? string.Empty : base.GetStringAsString(AggregateTestSchema.LASTNAME.FieldName);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(AggregateTestSchema.LASTNAME.FieldName);
				else
					this.LASTNAME = base.SetStringAsString(AggregateTestSchema.LASTNAME.FieldName, value);
			}
		}

		public virtual string s_AGE
		{
			get
			{
				return this.IsColumnNull(AggregateTestSchema.AGE.FieldName) ? string.Empty : base.GetDecimalAsString(AggregateTestSchema.AGE.FieldName);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(AggregateTestSchema.AGE.FieldName);
				else
					this.AGE = base.SetDecimalAsString(AggregateTestSchema.AGE.FieldName, value);
			}
		}

		public virtual string s_HIREDATE
		{
			get
			{
				return this.IsColumnNull(AggregateTestSchema.HIREDATE.FieldName) ? string.Empty : base.GetDateTimeAsString(AggregateTestSchema.HIREDATE.FieldName);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(AggregateTestSchema.HIREDATE.FieldName);
				else
					this.HIREDATE = base.SetDateTimeAsString(AggregateTestSchema.HIREDATE.FieldName, value);
			}
		}

		public virtual string s_SALARY
		{
			get
			{
				return this.IsColumnNull(AggregateTestSchema.SALARY.FieldName) ? string.Empty : base.GetDecimalAsString(AggregateTestSchema.SALARY.FieldName);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(AggregateTestSchema.SALARY.FieldName);
				else
					this.SALARY = base.SetDecimalAsString(AggregateTestSchema.SALARY.FieldName, value);
			}
		}

		public virtual string s_ISACTIVE
		{
			get
			{
				return this.IsColumnNull(AggregateTestSchema.ISACTIVE.FieldName) ? string.Empty : base.GetDecimalAsString(AggregateTestSchema.ISACTIVE.FieldName);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(AggregateTestSchema.ISACTIVE.FieldName);
				else
					this.ISACTIVE = base.SetDecimalAsString(AggregateTestSchema.ISACTIVE.FieldName, value);
			}
		}

		public virtual string s_TS
		{
			get
			{
				return this.IsColumnNull(AggregateTestSchema.TS.FieldName) ? string.Empty : base.GetDecimalAsString(AggregateTestSchema.TS.FieldName);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(AggregateTestSchema.TS.FieldName);
				else
					this.TS = base.SetDecimalAsString(AggregateTestSchema.TS.FieldName, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
						WhereParameter wp = new WhereParameter(AggregateTestSchema.ID);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}

				public WhereParameter DEPARTMENTID
				{
					get
					{
						WhereParameter wp = new WhereParameter(AggregateTestSchema.DEPARTMENTID);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}

				public WhereParameter FIRSTNAME
				{
					get
					{
						WhereParameter wp = new WhereParameter(AggregateTestSchema.FIRSTNAME);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}

				public WhereParameter LASTNAME
				{
					get
					{
						WhereParameter wp = new WhereParameter(AggregateTestSchema.LASTNAME);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}

				public WhereParameter AGE
				{
					get
					{
						WhereParameter wp = new WhereParameter(AggregateTestSchema.AGE);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}

				public WhereParameter HIREDATE
				{
					get
					{
						WhereParameter wp = new WhereParameter(AggregateTestSchema.HIREDATE);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}

				public WhereParameter SALARY
				{
					get
					{
						WhereParameter wp = new WhereParameter(AggregateTestSchema.SALARY);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}

				public WhereParameter ISACTIVE
				{
					get
					{
						WhereParameter wp = new WhereParameter(AggregateTestSchema.ISACTIVE);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}

				public WhereParameter TS
				{
					get
					{
						WhereParameter wp = new WhereParameter(AggregateTestSchema.TS);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
			{
				get
				{
					if(_ID_W == null)
					{
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter DEPARTMENTID
			{
				get
				{
					if(_DEPARTMENTID_W == null)
					{
						_DEPARTMENTID_W = TearOff.DEPARTMENTID;
					}
					return _DEPARTMENTID_W;
				}
			}

			public WhereParameter FIRSTNAME
			{
				get
				{
					if(_FIRSTNAME_W == null)
					{
						_FIRSTNAME_W = TearOff.FIRSTNAME;
					}
					return _FIRSTNAME_W;
				}
			}

			public WhereParameter LASTNAME
			{
				get
				{
					if(_LASTNAME_W == null)
					{
						_LASTNAME_W = TearOff.LASTNAME;
					}
					return _LASTNAME_W;
				}
			}

			public WhereParameter AGE
			{
				get
				{
					if(_AGE_W == null)
					{
						_AGE_W = TearOff.AGE;
					}
					return _AGE_W;
				}
			}

			public WhereParameter HIREDATE
			{
				get
				{
					if(_HIREDATE_W == null)
					{
						_HIREDATE_W = TearOff.HIREDATE;
					}
					return _HIREDATE_W;
				}
			}

			public WhereParameter SALARY
			{
				get
				{
					if(_SALARY_W == null)
					{
						_SALARY_W = TearOff.SALARY;
					}
					return _SALARY_W;
				}
			}

			public WhereParameter ISACTIVE
			{
				get
				{
					if(_ISACTIVE_W == null)
					{
						_ISACTIVE_W = TearOff.ISACTIVE;
					}
					return _ISACTIVE_W;
				}
			}

			public WhereParameter TS
			{
				get
				{
					if(_TS_W == null)
					{
						_TS_W = TearOff.TS;
					}
					return _TS_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _DEPARTMENTID_W = null;
			private WhereParameter _FIRSTNAME_W = null;
			private WhereParameter _LASTNAME_W = null;
			private WhereParameter _AGE_W = null;
			private WhereParameter _HIREDATE_W = null;
			private WhereParameter _SALARY_W = null;
			private WhereParameter _ISACTIVE_W = null;
			private WhereParameter _TS_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_DEPARTMENTID_W = null;
				_FIRSTNAME_W = null;
				_LASTNAME_W = null;
				_AGE_W = null;
				_HIREDATE_W = null;
				_SALARY_W = null;
				_ISACTIVE_W = null;
				_TS_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private EasyObject _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AggregateTestSchema.ID);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}

				public AggregateParameter DEPARTMENTID
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AggregateTestSchema.DEPARTMENTID);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}

				public AggregateParameter FIRSTNAME
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AggregateTestSchema.FIRSTNAME);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}

				public AggregateParameter LASTNAME
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AggregateTestSchema.LASTNAME);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}

				public AggregateParameter AGE
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AggregateTestSchema.AGE);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}

				public AggregateParameter HIREDATE
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AggregateTestSchema.HIREDATE);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}

				public AggregateParameter SALARY
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AggregateTestSchema.SALARY);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}

				public AggregateParameter ISACTIVE
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AggregateTestSchema.ISACTIVE);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}

				public AggregateParameter TS
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AggregateTestSchema.TS);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
			{
				get
				{
					if(_ID_W == null)
					{
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter DEPARTMENTID
			{
				get
				{
					if(_DEPARTMENTID_W == null)
					{
						_DEPARTMENTID_W = TearOff.DEPARTMENTID;
					}
					return _DEPARTMENTID_W;
				}
			}

			public AggregateParameter FIRSTNAME
			{
				get
				{
					if(_FIRSTNAME_W == null)
					{
						_FIRSTNAME_W = TearOff.FIRSTNAME;
					}
					return _FIRSTNAME_W;
				}
			}

			public AggregateParameter LASTNAME
			{
				get
				{
					if(_LASTNAME_W == null)
					{
						_LASTNAME_W = TearOff.LASTNAME;
					}
					return _LASTNAME_W;
				}
			}

			public AggregateParameter AGE
			{
				get
				{
					if(_AGE_W == null)
					{
						_AGE_W = TearOff.AGE;
					}
					return _AGE_W;
				}
			}

			public AggregateParameter HIREDATE
			{
				get
				{
					if(_HIREDATE_W == null)
					{
						_HIREDATE_W = TearOff.HIREDATE;
					}
					return _HIREDATE_W;
				}
			}

			public AggregateParameter SALARY
			{
				get
				{
					if(_SALARY_W == null)
					{
						_SALARY_W = TearOff.SALARY;
					}
					return _SALARY_W;
				}
			}

			public AggregateParameter ISACTIVE
			{
				get
				{
					if(_ISACTIVE_W == null)
					{
						_ISACTIVE_W = TearOff.ISACTIVE;
					}
					return _ISACTIVE_W;
				}
			}

			public AggregateParameter TS
			{
				get
				{
					if(_TS_W == null)
					{
						_TS_W = TearOff.TS;
					}
					return _TS_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _DEPARTMENTID_W = null;
			private AggregateParameter _FIRSTNAME_W = null;
			private AggregateParameter _LASTNAME_W = null;
			private AggregateParameter _AGE_W = null;
			private AggregateParameter _HIREDATE_W = null;
			private AggregateParameter _SALARY_W = null;
			private AggregateParameter _ISACTIVE_W = null;
			private AggregateParameter _TS_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_DEPARTMENTID_W = null;
				_FIRSTNAME_W = null;
				_LASTNAME_W = null;
				_AGE_W = null;
				_HIREDATE_W = null;
				_SALARY_W = null;
				_ISACTIVE_W = null;
				_TS_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private EasyObject _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	}
}


