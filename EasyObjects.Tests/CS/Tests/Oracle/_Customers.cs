/*
'===============================================================================
'  Generated From - CSharp_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.7)

using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace NCI.EasyObjects.Tests.Oracle
{

	#region Schema

	public class CustomersSchema : NCI.EasyObjects.Schema
	{
		private static ArrayList _entries;
		public static SchemaItem CUSTOMERID = new SchemaItem("CUSTOMERID", DbType.AnsiStringFixedLength, SchemaItemJustify.None, 5, false, true, false, false);
		public static SchemaItem COMPANYNAME = new SchemaItem("COMPANYNAME", DbType.AnsiString, SchemaItemJustify.None, 40, true, false, false, false);
		public static SchemaItem CONTACTNAME = new SchemaItem("CONTACTNAME", DbType.AnsiString, SchemaItemJustify.None, 30, true, false, false, false);
		public static SchemaItem CONTACTTITLE = new SchemaItem("CONTACTTITLE", DbType.AnsiString, SchemaItemJustify.None, 30, true, false, false, false);
		public static SchemaItem ADDRESS = new SchemaItem("ADDRESS", DbType.AnsiString, SchemaItemJustify.None, 60, true, false, false, false);
		public static SchemaItem CITY = new SchemaItem("CITY", DbType.AnsiString, SchemaItemJustify.None, 15, true, false, false, false);
		public static SchemaItem REGION = new SchemaItem("REGION", DbType.AnsiString, SchemaItemJustify.None, 15, true, false, false, false);
		public static SchemaItem POSTALCODE = new SchemaItem("POSTALCODE", DbType.AnsiString, SchemaItemJustify.None, 10, true, false, false, false);
		public static SchemaItem COUNTRY = new SchemaItem("COUNTRY", DbType.AnsiString, SchemaItemJustify.None, 15, true, false, false, false);
		public static SchemaItem PHONE = new SchemaItem("PHONE", DbType.AnsiString, SchemaItemJustify.None, 24, true, false, false, false);
		public static SchemaItem FAX = new SchemaItem("FAX", DbType.AnsiString, SchemaItemJustify.None, 24, true, false, false, false);

		public override ArrayList SchemaEntries
		{
			get
			{
				if (_entries == null )
				{
					_entries = new ArrayList();
					_entries.Add(CustomersSchema.CUSTOMERID);
					_entries.Add(CustomersSchema.COMPANYNAME);
					_entries.Add(CustomersSchema.CONTACTNAME);
					_entries.Add(CustomersSchema.CONTACTTITLE);
					_entries.Add(CustomersSchema.ADDRESS);
					_entries.Add(CustomersSchema.CITY);
					_entries.Add(CustomersSchema.REGION);
					_entries.Add(CustomersSchema.POSTALCODE);
					_entries.Add(CustomersSchema.COUNTRY);
					_entries.Add(CustomersSchema.PHONE);
					_entries.Add(CustomersSchema.FAX);
				}
				return _entries;
			}
		}
	}
	#endregion

	public abstract class _Customers : EasyObject
	{

		public _Customers()
		{
			CustomersSchema _schema = new CustomersSchema();
			this.SchemaEntries = _schema.SchemaEntries;
			this.SchemaGlobal = "MNOONA01";
		}
		
		public override void FlushData() 	 
		{ 	 
			this._whereClause = null; 	 
			this._aggregateClause = null; 	 
			base.FlushData(); 	 
		}
			   
		/// <summary>
		/// Loads the business object with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="CUSTOMERID"></param>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadByPrimaryKey(string CUSTOMERID)
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					ListDictionary parameters = new ListDictionary();

					// Add in parameters
					parameters.Add(CustomersSchema.CUSTOMERID.FieldName, CUSTOMERID);

					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetCUSTOMERS", parameters, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.CUSTOMERID.Value = CUSTOMERID;
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}
	
		/// <summary>
		/// Loads all records from the table.
		/// </summary>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadAll()
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetAllCUSTOMERS", null, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		/// <summary>
		/// Adds a new record to the internal table.
		/// </summary>
		public override void AddNew()
		{
			base.AddNew();
		}

		protected override DBCommandWrapper GetInsertCommand(CommandType commandType)
		{	
			DBCommandWrapper dbCommandWrapper;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_AddCUSTOMERS";
					dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand);

					CreateParameters(dbCommandWrapper);
					
					return dbCommandWrapper;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!item.IsComputed)
						{
							if ((item.IsAutoKey && this.IdentityInsert) || !item.IsAutoKey)
							{
								this.Query.AddInsertColumn(item);
							}
						}
					}
					dbCommandWrapper = this.Query.GetInsertCommandWrapper();

					dbCommandWrapper.Command.Parameters.Clear();
					if (this.IdentityInsert)
					{
					}
					else
					{
					}
					CreateParameters(dbCommandWrapper);

					return dbCommandWrapper;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DBCommandWrapper GetUpdateCommand(CommandType commandType)
		{
			DBCommandWrapper dbCommandWrapper;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_UpdateCUSTOMERS";
					dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand);

					CreateParameters(dbCommandWrapper);
					
					return dbCommandWrapper;

				case CommandType.Text:
					this.Query.ClearAll();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!(item.IsAutoKey || item.IsComputed))
						{
							this.Query.AddUpdateColumn(item);
						}
					}

					this.Where.WhereClauseReset();
					this.Where.CUSTOMERID.Operator = WhereParameter.Operand.Equal;
					dbCommandWrapper = this.Query.GetUpdateCommandWrapper();

					dbCommandWrapper.Command.Parameters.Clear();
					CreateParameters(dbCommandWrapper);
					
					return dbCommandWrapper;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DBCommandWrapper GetDeleteCommand(CommandType commandType)
		{
			DBCommandWrapper dbCommandWrapper;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_DeleteCUSTOMERS";
					dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand);
					dbCommandWrapper.AddInParameter("CUSTOMERID", DbType.AnsiStringFixedLength, "CUSTOMERID", DataRowVersion.Current);
					
					return dbCommandWrapper;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.CUSTOMERID.Operator = WhereParameter.Operand.Equal;
					dbCommandWrapper = this.Query.GetDeleteCommandWrapper();

					dbCommandWrapper.Command.Parameters.Clear();
					dbCommandWrapper.AddInParameter("CUSTOMERID", DbType.AnsiStringFixedLength, "CUSTOMERID", DataRowVersion.Current);
					
					return dbCommandWrapper;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		private void CreateParameters(DBCommandWrapper dbCommandWrapper)
		{
			dbCommandWrapper.AddInParameter("CUSTOMERID", DbType.AnsiStringFixedLength, "CUSTOMERID", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("COMPANYNAME", DbType.AnsiString, "COMPANYNAME", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("CONTACTNAME", DbType.AnsiString, "CONTACTNAME", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("CONTACTTITLE", DbType.AnsiString, "CONTACTTITLE", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("ADDRESS", DbType.AnsiString, "ADDRESS", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("CITY", DbType.AnsiString, "CITY", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("REGION", DbType.AnsiString, "REGION", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("POSTALCODE", DbType.AnsiString, "POSTALCODE", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("COUNTRY", DbType.AnsiString, "COUNTRY", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("PHONE", DbType.AnsiString, "PHONE", DataRowVersion.Current);
			dbCommandWrapper.AddInParameter("FAX", DbType.AnsiString, "FAX", DataRowVersion.Current);
		}
		
		#region Properties
		public virtual string CUSTOMERID
		{
			get
			{
				return this.GetString(CustomersSchema.CUSTOMERID.FieldName);
	    	}
			set
			{
				this.SetString(CustomersSchema.CUSTOMERID.FieldName, value);
			}
		}
		public virtual string COMPANYNAME
		{
			get
			{
				return this.GetString(CustomersSchema.COMPANYNAME.FieldName);
	    	}
			set
			{
				this.SetString(CustomersSchema.COMPANYNAME.FieldName, value);
			}
		}
		public virtual string CONTACTNAME
		{
			get
			{
				return this.GetString(CustomersSchema.CONTACTNAME.FieldName);
	    	}
			set
			{
				this.SetString(CustomersSchema.CONTACTNAME.FieldName, value);
			}
		}
		public virtual string CONTACTTITLE
		{
			get
			{
				return this.GetString(CustomersSchema.CONTACTTITLE.FieldName);
	    	}
			set
			{
				this.SetString(CustomersSchema.CONTACTTITLE.FieldName, value);
			}
		}
		public virtual string ADDRESS
		{
			get
			{
				return this.GetString(CustomersSchema.ADDRESS.FieldName);
	    	}
			set
			{
				this.SetString(CustomersSchema.ADDRESS.FieldName, value);
			}
		}
		public virtual string CITY
		{
			get
			{
				return this.GetString(CustomersSchema.CITY.FieldName);
	    	}
			set
			{
				this.SetString(CustomersSchema.CITY.FieldName, value);
			}
		}
		public virtual string REGION
		{
			get
			{
				return this.GetString(CustomersSchema.REGION.FieldName);
	    	}
			set
			{
				this.SetString(CustomersSchema.REGION.FieldName, value);
			}
		}
		public virtual string POSTALCODE
		{
			get
			{
				return this.GetString(CustomersSchema.POSTALCODE.FieldName);
	    	}
			set
			{
				this.SetString(CustomersSchema.POSTALCODE.FieldName, value);
			}
		}
		public virtual string COUNTRY
		{
			get
			{
				return this.GetString(CustomersSchema.COUNTRY.FieldName);
	    	}
			set
			{
				this.SetString(CustomersSchema.COUNTRY.FieldName, value);
			}
		}
		public virtual string PHONE
		{
			get
			{
				return this.GetString(CustomersSchema.PHONE.FieldName);
	    	}
			set
			{
				this.SetString(CustomersSchema.PHONE.FieldName, value);
			}
		}
		public virtual string FAX
		{
			get
			{
				return this.GetString(CustomersSchema.FAX.FieldName);
	    	}
			set
			{
				this.SetString(CustomersSchema.FAX.FieldName, value);
			}
		}

		public override string TableName
		{
			get { return "CUSTOMERS"; }
		}
		
		#endregion		
		
		#region String Properties
	
		public virtual string s_CUSTOMERID
	    {
			get
	        {
				return this.IsColumnNull(CustomersSchema.CUSTOMERID.FieldName) ? string.Empty : base.GetStringAsString(CustomersSchema.CUSTOMERID.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(CustomersSchema.CUSTOMERID.FieldName);
				else
					this.CUSTOMERID = base.SetStringAsString(CustomersSchema.CUSTOMERID.FieldName, value);
			}
		}

		public virtual string s_COMPANYNAME
	    {
			get
	        {
				return this.IsColumnNull(CustomersSchema.COMPANYNAME.FieldName) ? string.Empty : base.GetStringAsString(CustomersSchema.COMPANYNAME.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(CustomersSchema.COMPANYNAME.FieldName);
				else
					this.COMPANYNAME = base.SetStringAsString(CustomersSchema.COMPANYNAME.FieldName, value);
			}
		}

		public virtual string s_CONTACTNAME
	    {
			get
	        {
				return this.IsColumnNull(CustomersSchema.CONTACTNAME.FieldName) ? string.Empty : base.GetStringAsString(CustomersSchema.CONTACTNAME.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(CustomersSchema.CONTACTNAME.FieldName);
				else
					this.CONTACTNAME = base.SetStringAsString(CustomersSchema.CONTACTNAME.FieldName, value);
			}
		}

		public virtual string s_CONTACTTITLE
	    {
			get
	        {
				return this.IsColumnNull(CustomersSchema.CONTACTTITLE.FieldName) ? string.Empty : base.GetStringAsString(CustomersSchema.CONTACTTITLE.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(CustomersSchema.CONTACTTITLE.FieldName);
				else
					this.CONTACTTITLE = base.SetStringAsString(CustomersSchema.CONTACTTITLE.FieldName, value);
			}
		}

		public virtual string s_ADDRESS
	    {
			get
	        {
				return this.IsColumnNull(CustomersSchema.ADDRESS.FieldName) ? string.Empty : base.GetStringAsString(CustomersSchema.ADDRESS.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(CustomersSchema.ADDRESS.FieldName);
				else
					this.ADDRESS = base.SetStringAsString(CustomersSchema.ADDRESS.FieldName, value);
			}
		}

		public virtual string s_CITY
	    {
			get
	        {
				return this.IsColumnNull(CustomersSchema.CITY.FieldName) ? string.Empty : base.GetStringAsString(CustomersSchema.CITY.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(CustomersSchema.CITY.FieldName);
				else
					this.CITY = base.SetStringAsString(CustomersSchema.CITY.FieldName, value);
			}
		}

		public virtual string s_REGION
	    {
			get
	        {
				return this.IsColumnNull(CustomersSchema.REGION.FieldName) ? string.Empty : base.GetStringAsString(CustomersSchema.REGION.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(CustomersSchema.REGION.FieldName);
				else
					this.REGION = base.SetStringAsString(CustomersSchema.REGION.FieldName, value);
			}
		}

		public virtual string s_POSTALCODE
	    {
			get
	        {
				return this.IsColumnNull(CustomersSchema.POSTALCODE.FieldName) ? string.Empty : base.GetStringAsString(CustomersSchema.POSTALCODE.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(CustomersSchema.POSTALCODE.FieldName);
				else
					this.POSTALCODE = base.SetStringAsString(CustomersSchema.POSTALCODE.FieldName, value);
			}
		}

		public virtual string s_COUNTRY
	    {
			get
	        {
				return this.IsColumnNull(CustomersSchema.COUNTRY.FieldName) ? string.Empty : base.GetStringAsString(CustomersSchema.COUNTRY.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(CustomersSchema.COUNTRY.FieldName);
				else
					this.COUNTRY = base.SetStringAsString(CustomersSchema.COUNTRY.FieldName, value);
			}
		}

		public virtual string s_PHONE
	    {
			get
	        {
				return this.IsColumnNull(CustomersSchema.PHONE.FieldName) ? string.Empty : base.GetStringAsString(CustomersSchema.PHONE.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(CustomersSchema.PHONE.FieldName);
				else
					this.PHONE = base.SetStringAsString(CustomersSchema.PHONE.FieldName, value);
			}
		}

		public virtual string s_FAX
	    {
			get
	        {
				return this.IsColumnNull(CustomersSchema.FAX.FieldName) ? string.Empty : base.GetStringAsString(CustomersSchema.FAX.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(CustomersSchema.FAX.FieldName);
				else
					this.FAX = base.SetStringAsString(CustomersSchema.FAX.FieldName, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter CUSTOMERID
				{
					get
					{
							WhereParameter wp = new WhereParameter(CustomersSchema.CUSTOMERID);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter COMPANYNAME
				{
					get
					{
							WhereParameter wp = new WhereParameter(CustomersSchema.COMPANYNAME);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter CONTACTNAME
				{
					get
					{
							WhereParameter wp = new WhereParameter(CustomersSchema.CONTACTNAME);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter CONTACTTITLE
				{
					get
					{
							WhereParameter wp = new WhereParameter(CustomersSchema.CONTACTTITLE);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter ADDRESS
				{
					get
					{
							WhereParameter wp = new WhereParameter(CustomersSchema.ADDRESS);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter CITY
				{
					get
					{
							WhereParameter wp = new WhereParameter(CustomersSchema.CITY);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter REGION
				{
					get
					{
							WhereParameter wp = new WhereParameter(CustomersSchema.REGION);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter POSTALCODE
				{
					get
					{
							WhereParameter wp = new WhereParameter(CustomersSchema.POSTALCODE);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter COUNTRY
				{
					get
					{
							WhereParameter wp = new WhereParameter(CustomersSchema.COUNTRY);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter PHONE
				{
					get
					{
							WhereParameter wp = new WhereParameter(CustomersSchema.PHONE);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter FAX
				{
					get
					{
							WhereParameter wp = new WhereParameter(CustomersSchema.FAX);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter CUSTOMERID
		    {
				get
		        {
					if(_CUSTOMERID_W == null)
	        	    {
						_CUSTOMERID_W = TearOff.CUSTOMERID;
					}
					return _CUSTOMERID_W;
				}
			}

			public WhereParameter COMPANYNAME
		    {
				get
		        {
					if(_COMPANYNAME_W == null)
	        	    {
						_COMPANYNAME_W = TearOff.COMPANYNAME;
					}
					return _COMPANYNAME_W;
				}
			}

			public WhereParameter CONTACTNAME
		    {
				get
		        {
					if(_CONTACTNAME_W == null)
	        	    {
						_CONTACTNAME_W = TearOff.CONTACTNAME;
					}
					return _CONTACTNAME_W;
				}
			}

			public WhereParameter CONTACTTITLE
		    {
				get
		        {
					if(_CONTACTTITLE_W == null)
	        	    {
						_CONTACTTITLE_W = TearOff.CONTACTTITLE;
					}
					return _CONTACTTITLE_W;
				}
			}

			public WhereParameter ADDRESS
		    {
				get
		        {
					if(_ADDRESS_W == null)
	        	    {
						_ADDRESS_W = TearOff.ADDRESS;
					}
					return _ADDRESS_W;
				}
			}

			public WhereParameter CITY
		    {
				get
		        {
					if(_CITY_W == null)
	        	    {
						_CITY_W = TearOff.CITY;
					}
					return _CITY_W;
				}
			}

			public WhereParameter REGION
		    {
				get
		        {
					if(_REGION_W == null)
	        	    {
						_REGION_W = TearOff.REGION;
					}
					return _REGION_W;
				}
			}

			public WhereParameter POSTALCODE
		    {
				get
		        {
					if(_POSTALCODE_W == null)
	        	    {
						_POSTALCODE_W = TearOff.POSTALCODE;
					}
					return _POSTALCODE_W;
				}
			}

			public WhereParameter COUNTRY
		    {
				get
		        {
					if(_COUNTRY_W == null)
	        	    {
						_COUNTRY_W = TearOff.COUNTRY;
					}
					return _COUNTRY_W;
				}
			}

			public WhereParameter PHONE
		    {
				get
		        {
					if(_PHONE_W == null)
	        	    {
						_PHONE_W = TearOff.PHONE;
					}
					return _PHONE_W;
				}
			}

			public WhereParameter FAX
		    {
				get
		        {
					if(_FAX_W == null)
	        	    {
						_FAX_W = TearOff.FAX;
					}
					return _FAX_W;
				}
			}

			private WhereParameter _CUSTOMERID_W = null;
			private WhereParameter _COMPANYNAME_W = null;
			private WhereParameter _CONTACTNAME_W = null;
			private WhereParameter _CONTACTTITLE_W = null;
			private WhereParameter _ADDRESS_W = null;
			private WhereParameter _CITY_W = null;
			private WhereParameter _REGION_W = null;
			private WhereParameter _POSTALCODE_W = null;
			private WhereParameter _COUNTRY_W = null;
			private WhereParameter _PHONE_W = null;
			private WhereParameter _FAX_W = null;

			public void WhereClauseReset()
			{
				_CUSTOMERID_W = null;
				_COMPANYNAME_W = null;
				_CONTACTNAME_W = null;
				_CONTACTTITLE_W = null;
				_ADDRESS_W = null;
				_CITY_W = null;
				_REGION_W = null;
				_POSTALCODE_W = null;
				_COUNTRY_W = null;
				_PHONE_W = null;
				_FAX_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private EasyObject _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter CUSTOMERID
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(CustomersSchema.CUSTOMERID);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter COMPANYNAME
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(CustomersSchema.COMPANYNAME);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter CONTACTNAME
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(CustomersSchema.CONTACTNAME);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter CONTACTTITLE
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(CustomersSchema.CONTACTTITLE);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter ADDRESS
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(CustomersSchema.ADDRESS);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter CITY
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(CustomersSchema.CITY);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter REGION
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(CustomersSchema.REGION);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter POSTALCODE
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(CustomersSchema.POSTALCODE);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter COUNTRY
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(CustomersSchema.COUNTRY);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter PHONE
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(CustomersSchema.PHONE);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter FAX
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(CustomersSchema.FAX);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter CUSTOMERID
		    {
				get
		        {
					if(_CUSTOMERID_W == null)
	        	    {
						_CUSTOMERID_W = TearOff.CUSTOMERID;
					}
					return _CUSTOMERID_W;
				}
			}

			public AggregateParameter COMPANYNAME
		    {
				get
		        {
					if(_COMPANYNAME_W == null)
	        	    {
						_COMPANYNAME_W = TearOff.COMPANYNAME;
					}
					return _COMPANYNAME_W;
				}
			}

			public AggregateParameter CONTACTNAME
		    {
				get
		        {
					if(_CONTACTNAME_W == null)
	        	    {
						_CONTACTNAME_W = TearOff.CONTACTNAME;
					}
					return _CONTACTNAME_W;
				}
			}

			public AggregateParameter CONTACTTITLE
		    {
				get
		        {
					if(_CONTACTTITLE_W == null)
	        	    {
						_CONTACTTITLE_W = TearOff.CONTACTTITLE;
					}
					return _CONTACTTITLE_W;
				}
			}

			public AggregateParameter ADDRESS
		    {
				get
		        {
					if(_ADDRESS_W == null)
	        	    {
						_ADDRESS_W = TearOff.ADDRESS;
					}
					return _ADDRESS_W;
				}
			}

			public AggregateParameter CITY
		    {
				get
		        {
					if(_CITY_W == null)
	        	    {
						_CITY_W = TearOff.CITY;
					}
					return _CITY_W;
				}
			}

			public AggregateParameter REGION
		    {
				get
		        {
					if(_REGION_W == null)
	        	    {
						_REGION_W = TearOff.REGION;
					}
					return _REGION_W;
				}
			}

			public AggregateParameter POSTALCODE
		    {
				get
		        {
					if(_POSTALCODE_W == null)
	        	    {
						_POSTALCODE_W = TearOff.POSTALCODE;
					}
					return _POSTALCODE_W;
				}
			}

			public AggregateParameter COUNTRY
		    {
				get
		        {
					if(_COUNTRY_W == null)
	        	    {
						_COUNTRY_W = TearOff.COUNTRY;
					}
					return _COUNTRY_W;
				}
			}

			public AggregateParameter PHONE
		    {
				get
		        {
					if(_PHONE_W == null)
	        	    {
						_PHONE_W = TearOff.PHONE;
					}
					return _PHONE_W;
				}
			}

			public AggregateParameter FAX
		    {
				get
		        {
					if(_FAX_W == null)
	        	    {
						_FAX_W = TearOff.FAX;
					}
					return _FAX_W;
				}
			}

			private AggregateParameter _CUSTOMERID_W = null;
			private AggregateParameter _COMPANYNAME_W = null;
			private AggregateParameter _CONTACTNAME_W = null;
			private AggregateParameter _CONTACTTITLE_W = null;
			private AggregateParameter _ADDRESS_W = null;
			private AggregateParameter _CITY_W = null;
			private AggregateParameter _REGION_W = null;
			private AggregateParameter _POSTALCODE_W = null;
			private AggregateParameter _COUNTRY_W = null;
			private AggregateParameter _PHONE_W = null;
			private AggregateParameter _FAX_W = null;

			public void AggregateClauseReset()
			{
				_CUSTOMERID_W = null;
				_COMPANYNAME_W = null;
				_CONTACTNAME_W = null;
				_CONTACTTITLE_W = null;
				_ADDRESS_W = null;
				_CITY_W = null;
				_REGION_W = null;
				_POSTALCODE_W = null;
				_COUNTRY_W = null;
				_PHONE_W = null;
				_FAX_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private EasyObject _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	}
}
