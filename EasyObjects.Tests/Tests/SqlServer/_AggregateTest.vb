'===============================================================================
'  Generated From - VbNet_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject 
'      Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.2)

Imports System
Imports System.Data
Imports System.Data.Common
Imports System.Configuration
Imports System.Collections
Imports System.Collections.Specialized
Imports System.Xml
Imports System.IO

Imports Microsoft.Practices.EnterpriseLibrary.Data
Imports NCI.EasyObjects


NameSpace EasyObjects.Tests.SQL

#Region " Schema "

Public Class AggregateTestSchema
	Inherits NCI.EasyObjects.Schema

    Private Shared _entries As ArrayList
	Public Shared ID As New SchemaItem("ID", DbType.Int32, True, False, False, True, False, False)
	Public Shared DepartmentID As New SchemaItem("DepartmentID", DbType.Int32, False, True, False, False, False, False)
	Public Shared FirstName As New SchemaItem("FirstName", DbType.AnsiString, SchemaItemJustify.None, 25, True, False, False, False)
	Public Shared LastName As New SchemaItem("LastName", DbType.AnsiString, SchemaItemJustify.None, 15, True, False, False, False)
	Public Shared Age As New SchemaItem("Age", DbType.Int32, False, True, False, False, False, False)
	Public Shared HireDate As New SchemaItem("HireDate", DbType.DateTime, False, True, False, False, False, False)
	Public Shared Salary As New SchemaItem("Salary", DbType.Decimal, False, True, False, False, False, False)
	Public Shared IsActive As New SchemaItem("IsActive", DbType.Boolean, False, True, False, False, False, True)
	Public Shared IsActive2 As New SchemaItem("IsActive2", DbType.AnsiStringFixedLength, SchemaItemJustify.None, 1, False, False, False, True)
	Public Shared DateCreated As New SchemaItem("DateCreated", DbType.DateTime, False, False, False, False, False, True)
	Public Shared Ts As New SchemaItem("ts", DbType.Binary, False, True, True, False, False, False)

    Public Overrides ReadOnly Property SchemaEntries() As ArrayList
        Get
            If _entries Is Nothing Then
                _entries = New ArrayList()
				_entries.Add(AggregateTestSchema.ID)
				_entries.Add(AggregateTestSchema.DepartmentID)
				_entries.Add(AggregateTestSchema.FirstName)
				_entries.Add(AggregateTestSchema.LastName)
				_entries.Add(AggregateTestSchema.Age)
				_entries.Add(AggregateTestSchema.HireDate)
				_entries.Add(AggregateTestSchema.Salary)
				_entries.Add(AggregateTestSchema.IsActive)
				_entries.Add(AggregateTestSchema.IsActive2)
				_entries.Add(AggregateTestSchema.DateCreated)
				_entries.Add(AggregateTestSchema.Ts)
				AggregateTestSchema.Ts.IsComputed = True

            End If
            Return _entries
        End Get
    End Property

End Class

#End Region

Public MustInherit Class _AggregateTest
    Inherits EasyObject

    Sub New()
        Dim _schema As New AggregateTestSchema()
        Me.SchemaEntries = _schema.SchemaEntries
		Me.SchemaGlobal = "dbo"
    End Sub

	Public Overrides Sub FlushData()
		Me._whereClause = Nothing
		Me._aggregateClause = Nothing
		MyBase.FlushData()
	End Sub
		
	''' <summary>
	''' Loads the business object with info from the database, based on the requested primary key.
	''' </summary>
	''' <param name="ID"></param>
	''' <returns>A Boolean indicating success or failure of the query</returns>
	Public Function LoadByPrimaryKey(ByVal ID As Integer) As Boolean
		
		Select Case Me.DefaultCommandType
			Case CommandType.StoredProcedure
				Dim parameters As ListDictionary = New ListDictionary

				' Add in parameters
				parameters.Add(AggregateTestSchema.ID.FieldName, ID)

				Return MyBase.LoadFromSql(Me.SchemaStoredProcedureWithSeparator & "daab_GetAggregateTest", parameters, CommandType.StoredProcedure)
				
			Case CommandType.Text
                Me.Query.ClearAll()
                Me.Where.WhereClauseReset()
				Me.Where.ID.Value = ID
				Return Me.Query.Load()

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select
		
	End Function

    ''' <summary>
    ''' Loads all records from the table.
    ''' </summary>
    ''' <returns>A Boolean indicating success or failure of the query</returns>
    Public Function LoadAll() As Boolean
	
		Select Case Me.DefaultCommandType
		
			Case CommandType.StoredProcedure
				Dim parameters As ListDictionary = Nothing
				Return MyBase.LoadFromSql(Me.SchemaStoredProcedureWithSeparator & "daab_GetAllAggregateTest", parameters, CommandType.StoredProcedure)
				
			Case CommandType.Text
                Me.Query.ClearAll()
                Me.Where.WhereClauseReset()
				Return Me.Query.Load()
			
			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

    End Function

    ''' <summary>
    ''' Adds a new record to the internal table.
    ''' </summary>
	Public Overrides Sub AddNew()
		MyBase.AddNew()
		Me.ApplyDefaults()
	End Sub

	''' <summary>
	''' Apply any default values to columns
	''' </summary>
	Protected Overrides Sub ApplyDefaults()
		Me.IsActive = 1
		Me.IsActive2 = "Y"
		Me.DateCreated = DateTime.Now
	End Sub

    Protected Overrides Function GetInsertCommand(commandType As CommandType) As DbCommand
	
		Dim dbCommand As DbCommand
		
        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "daab_AddAggregateTest"
				dbCommand = db.GetStoredProcCommand(sqlCommand)
				
				db.AddParameter(dbCommand, "ID", DbType.Int32, 0, ParameterDirection.Output, True, 0, 0, "ID", DataRowVersion.Default, Convert.DBNull)
				CreateParameters(db, dbCommand)

			Case CommandType.Text
                Me.Query.ClearAll()
				Me.Where.WhereClauseReset()
				For Each item As SchemaItem In Me.SchemaEntries
                    If Not item.IsComputed Then
                        If (item.IsAutoKey AndAlso Me.IdentityInsert) OrElse Not item.IsAutoKey Then
                            Me.Query.AddInsertColumn(item)
                        End If
                    End If
				Next
				dbCommand = Me.Query.GetInsertCommandWrapper()

				dbCommand.Parameters.Clear()
				If Me.IdentityInsert Then
					db.AddInParameter(dbCommand, "ID", DbType.Int32, "ID", DataRowVersion.Default)
				Else
					db.AddParameter(dbCommand, "ID", DbType.Int32, 0, ParameterDirection.Output, True, 0, 0, "ID", DataRowVersion.Default, Convert.DBNull)
				End If

				CreateParameters(db, dbCommand)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommand

    End Function

    Protected Overrides Function GetUpdateCommand(commandType As CommandType) As DbCommand
	
		Dim dbCommand As DbCommand

        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "daab_UpdateAggregateTest"
				dbCommand = db.GetStoredProcCommand(sqlCommand)
		
				db.AddInParameter(dbCommand, "ID", DbType.Int32, "ID", DataRowVersion.Current)
				CreateParameters(db, dbCommand)

			Case CommandType.Text
                Me.Query.ClearAll()
				For Each item As SchemaItem In Me.SchemaEntries
					If Not (item.IsAutoKey OrElse item.IsComputed)
						Me.Query.AddUpdateColumn(item)
					End If
				Next

				Me.Where.WhereClauseReset()
				Me.Where.ID.Operator = WhereParameter.Operand.Equal
				Me.Where.Ts.Operator = WhereParameter.Operand.Equal
				dbCommand = Me.Query.GetUpdateCommandWrapper()

				dbCommand.Parameters.Clear()
				CreateParameters(db, dbCommand)
				db.AddInParameter(dbCommand, "ID", DbType.Int32, "ID", DataRowVersion.Current)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommand

    End Function

    Protected Overrides Function GetDeleteCommand(commandType As CommandType) As DbCommand
	
		Dim dbCommand As DbCommand

        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "daab_DeleteAggregateTest"
				dbCommand = db.GetStoredProcCommand(sqlCommand)
		
				' Add primary key parameters
				db.AddInParameter(dbCommand, "ID", DbType.Int32, "ID", DataRowVersion.Current)

			Case CommandType.Text
                Me.Query.ClearAll()
				Me.Where.WhereClauseReset()
				Me.Where.ID.Operator = WhereParameter.Operand.Equal
				dbCommand = Me.Query.GetDeleteCommandWrapper()

				dbCommand.Parameters.Clear()
				db.AddInParameter(dbCommand, "ID", DbType.Int32, "ID", DataRowVersion.Current)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommand

    End Function

    Private Sub CreateParameters(ByVal db As Database, ByVal dbCommand As DbCommand)
		
		db.AddInParameter(dbCommand, "DepartmentID", DbType.Int32, "DepartmentID", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "FirstName", DbType.AnsiString, "FirstName", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "LastName", DbType.AnsiString, "LastName", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "Age", DbType.Int32, "Age", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "HireDate", DbType.DateTime, "HireDate", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "Salary", DbType.Decimal, "Salary", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "IsActive", DbType.Boolean, "IsActive", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "IsActive2", DbType.AnsiStringFixedLength, "IsActive2", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "DateCreated", DbType.DateTime, "DateCreated", DataRowVersion.Current)
		db.AddParameter(dbCommand, "Ts", DbType.Binary, 8, ParameterDirection.InputOutput, False, 0, 0, "ts", DataRowVersion.Current, Nothing)

    End Sub

#Region " Properties "

	Public Overridable Property ID() As Integer
        Get
			Return Me.GetInteger(AggregateTestSchema.ID.FieldName)
      End Get
        Set(ByVal Value As Integer)
			Me.SetInteger(AggregateTestSchema.ID.FieldName, Value)
      End Set
    End Property

	Public Overridable Property DepartmentID() As Integer
        Get
			Return Me.GetInteger(AggregateTestSchema.DepartmentID.FieldName)
      End Get
        Set(ByVal Value As Integer)
			Me.SetInteger(AggregateTestSchema.DepartmentID.FieldName, Value)
      End Set
    End Property

	Public Overridable Property FirstName() As String
        Get
			Return Me.GetString(AggregateTestSchema.FirstName.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(AggregateTestSchema.FirstName.FieldName, Value)
      End Set
    End Property

	Public Overridable Property LastName() As String
        Get
			Return Me.GetString(AggregateTestSchema.LastName.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(AggregateTestSchema.LastName.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Age() As Integer
        Get
			Return Me.GetInteger(AggregateTestSchema.Age.FieldName)
      End Get
        Set(ByVal Value As Integer)
			Me.SetInteger(AggregateTestSchema.Age.FieldName, Value)
      End Set
    End Property

	Public Overridable Property HireDate() As DateTime
        Get
			Return Me.GetDateTime(AggregateTestSchema.HireDate.FieldName)
      End Get
        Set(ByVal Value As DateTime)
			Me.SetDateTime(AggregateTestSchema.HireDate.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Salary() As Decimal
        Get
			Return Me.GetDecimal(AggregateTestSchema.Salary.FieldName)
      End Get
        Set(ByVal Value As Decimal)
			Me.SetDecimal(AggregateTestSchema.Salary.FieldName, Value)
      End Set
    End Property

	Public Overridable Property IsActive() As Boolean
        Get
			Return Me.GetBoolean(AggregateTestSchema.IsActive.FieldName)
      End Get
        Set(ByVal Value As Boolean)
			Me.SetBoolean(AggregateTestSchema.IsActive.FieldName, Value)
      End Set
    End Property

	Public Overridable Property IsActive2() As String
        Get
			Return Me.GetString(AggregateTestSchema.IsActive2.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(AggregateTestSchema.IsActive2.FieldName, Value)
      End Set
    End Property

	Public Overridable Property DateCreated() As DateTime
        Get
			Return Me.GetDateTime(AggregateTestSchema.DateCreated.FieldName)
      End Get
        Set(ByVal Value As DateTime)
			Me.SetDateTime(AggregateTestSchema.DateCreated.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Ts() As Byte()
        Get
			Return Me.GetByteArray(AggregateTestSchema.Ts.FieldName)
      End Get
        Set(ByVal Value As Byte())
			Me.SetByteArray(AggregateTestSchema.Ts.FieldName, Value)
      End Set
    End Property

    Public Overrides ReadOnly Property TableName() As String
        Get
            Return "AggregateTest"
        End Get
    End Property

#End Region

#Region " String Properties "
		Public Overridable Property s_ID As String
			Get
				If Me.IsColumnNull(AggregateTestSchema.ID.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(AggregateTestSchema.ID.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(AggregateTestSchema.ID.FieldName)
				Else
					Me.ID = MyBase.SetIntegerAsString(AggregateTestSchema.ID.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_DepartmentID As String
			Get
				If Me.IsColumnNull(AggregateTestSchema.DepartmentID.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(AggregateTestSchema.DepartmentID.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(AggregateTestSchema.DepartmentID.FieldName)
				Else
					Me.DepartmentID = MyBase.SetIntegerAsString(AggregateTestSchema.DepartmentID.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_FirstName As String
			Get
				If Me.IsColumnNull(AggregateTestSchema.FirstName.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(AggregateTestSchema.FirstName.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(AggregateTestSchema.FirstName.FieldName)
				Else
					Me.FirstName = MyBase.SetStringAsString(AggregateTestSchema.FirstName.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_LastName As String
			Get
				If Me.IsColumnNull(AggregateTestSchema.LastName.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(AggregateTestSchema.LastName.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(AggregateTestSchema.LastName.FieldName)
				Else
					Me.LastName = MyBase.SetStringAsString(AggregateTestSchema.LastName.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Age As String
			Get
				If Me.IsColumnNull(AggregateTestSchema.Age.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(AggregateTestSchema.Age.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(AggregateTestSchema.Age.FieldName)
				Else
					Me.Age = MyBase.SetIntegerAsString(AggregateTestSchema.Age.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_HireDate As String
			Get
				If Me.IsColumnNull(AggregateTestSchema.HireDate.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetDateTimeAsString(AggregateTestSchema.HireDate.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(AggregateTestSchema.HireDate.FieldName)
				Else
					Me.HireDate = MyBase.SetDateTimeAsString(AggregateTestSchema.HireDate.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Salary As String
			Get
				If Me.IsColumnNull(AggregateTestSchema.Salary.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(AggregateTestSchema.Salary.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(AggregateTestSchema.Salary.FieldName)
				Else
					Me.Salary = MyBase.SetDecimalAsString(AggregateTestSchema.Salary.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_IsActive As String
			Get
				If Me.IsColumnNull(AggregateTestSchema.IsActive.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetBooleanAsString(AggregateTestSchema.IsActive.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(AggregateTestSchema.IsActive.FieldName)
				Else
					Me.IsActive = MyBase.SetBooleanAsString(AggregateTestSchema.IsActive.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_IsActive2 As String
			Get
				If Me.IsColumnNull(AggregateTestSchema.IsActive2.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(AggregateTestSchema.IsActive2.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(AggregateTestSchema.IsActive2.FieldName)
				Else
					Me.IsActive2 = MyBase.SetStringAsString(AggregateTestSchema.IsActive2.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_DateCreated As String
			Get
				If Me.IsColumnNull(AggregateTestSchema.DateCreated.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetDateTimeAsString(AggregateTestSchema.DateCreated.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(AggregateTestSchema.DateCreated.FieldName)
				Else
					Me.DateCreated = MyBase.SetDateTimeAsString(AggregateTestSchema.DateCreated.FieldName, Value)
				End If
			End Set
		End Property


#End Region

#Region " Where Clause "
    Public Class WhereClause

        Public Sub New(ByVal entity As EasyObject)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffWhereParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffWhereParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region " TearOff's "
		Public class TearOffWhereParameter
		
			Private _clause as WhereClause
			
			Public Sub New(ByVal clause As WhereClause)
				Me._clause = clause
			End Sub

			Public ReadOnly Property ID() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(AggregateTestSchema.ID)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property DepartmentID() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(AggregateTestSchema.DepartmentID)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property FirstName() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(AggregateTestSchema.FirstName)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property LastName() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(AggregateTestSchema.LastName)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Age() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(AggregateTestSchema.Age)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property HireDate() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(AggregateTestSchema.HireDate)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Salary() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(AggregateTestSchema.Salary)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property IsActive() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(AggregateTestSchema.IsActive)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property IsActive2() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(AggregateTestSchema.IsActive2)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property DateCreated() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(AggregateTestSchema.DateCreated)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Ts() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(AggregateTestSchema.Ts)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

	End Class
	
	#End Region	

		Public ReadOnly Property ID() As WhereParameter 
			Get
				If _ID_W Is Nothing Then
					_ID_W = TearOff.ID
				End If
				Return _ID_W
			End Get
		End Property

		Public ReadOnly Property DepartmentID() As WhereParameter 
			Get
				If _DepartmentID_W Is Nothing Then
					_DepartmentID_W = TearOff.DepartmentID
				End If
				Return _DepartmentID_W
			End Get
		End Property

		Public ReadOnly Property FirstName() As WhereParameter 
			Get
				If _FirstName_W Is Nothing Then
					_FirstName_W = TearOff.FirstName
				End If
				Return _FirstName_W
			End Get
		End Property

		Public ReadOnly Property LastName() As WhereParameter 
			Get
				If _LastName_W Is Nothing Then
					_LastName_W = TearOff.LastName
				End If
				Return _LastName_W
			End Get
		End Property

		Public ReadOnly Property Age() As WhereParameter 
			Get
				If _Age_W Is Nothing Then
					_Age_W = TearOff.Age
				End If
				Return _Age_W
			End Get
		End Property

		Public ReadOnly Property HireDate() As WhereParameter 
			Get
				If _HireDate_W Is Nothing Then
					_HireDate_W = TearOff.HireDate
				End If
				Return _HireDate_W
			End Get
		End Property

		Public ReadOnly Property Salary() As WhereParameter 
			Get
				If _Salary_W Is Nothing Then
					_Salary_W = TearOff.Salary
				End If
				Return _Salary_W
			End Get
		End Property

		Public ReadOnly Property IsActive() As WhereParameter 
			Get
				If _IsActive_W Is Nothing Then
					_IsActive_W = TearOff.IsActive
				End If
				Return _IsActive_W
			End Get
		End Property

		Public ReadOnly Property IsActive2() As WhereParameter 
			Get
				If _IsActive2_W Is Nothing Then
					_IsActive2_W = TearOff.IsActive2
				End If
				Return _IsActive2_W
			End Get
		End Property

		Public ReadOnly Property DateCreated() As WhereParameter 
			Get
				If _DateCreated_W Is Nothing Then
					_DateCreated_W = TearOff.DateCreated
				End If
				Return _DateCreated_W
			End Get
		End Property

		Public ReadOnly Property Ts() As WhereParameter 
			Get
				If _Ts_W Is Nothing Then
					_Ts_W = TearOff.Ts
				End If
				Return _Ts_W
			End Get
		End Property

		Private _ID_W As WhereParameter = Nothing
		Private _DepartmentID_W As WhereParameter = Nothing
		Private _FirstName_W As WhereParameter = Nothing
		Private _LastName_W As WhereParameter = Nothing
		Private _Age_W As WhereParameter = Nothing
		Private _HireDate_W As WhereParameter = Nothing
		Private _Salary_W As WhereParameter = Nothing
		Private _IsActive_W As WhereParameter = Nothing
		Private _IsActive2_W As WhereParameter = Nothing
		Private _DateCreated_W As WhereParameter = Nothing
		Private _Ts_W As WhereParameter = Nothing

		Public Sub WhereClauseReset()

		_ID_W = Nothing
		_DepartmentID_W = Nothing
		_FirstName_W = Nothing
		_LastName_W = Nothing
		_Age_W = Nothing
		_HireDate_W = Nothing
		_Salary_W = Nothing
		_IsActive_W = Nothing
		_IsActive2_W = Nothing
		_DateCreated_W = Nothing
		_Ts_W = Nothing
			Me._entity.Query.FlushWhereParameters()

		End Sub
	
		Private _entity As EasyObject
		Private _tearOff As TearOffWhereParameter
    End Class	

	Public ReadOnly Property Where() As WhereClause
		Get
			If _whereClause Is Nothing Then
				_whereClause = New WhereClause(Me)
			End If
	
			Return _whereClause
		End Get
	End Property
	
	Private _whereClause As WhereClause = Nothing	
#End Region	

#Region " Aggregate Clause "
    Public Class AggregateClause

        Public Sub New(ByVal entity As EasyObject)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffAggregateParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffAggregateParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region " TearOff's "
		Public class TearOffAggregateParameter
		
			Private _clause as AggregateClause
			
			Public Sub New(ByVal clause As AggregateClause)
				Me._clause = clause
			End Sub

			Public ReadOnly Property ID() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(AggregateTestSchema.ID)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property DepartmentID() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(AggregateTestSchema.DepartmentID)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property FirstName() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(AggregateTestSchema.FirstName)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property LastName() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(AggregateTestSchema.LastName)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Age() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(AggregateTestSchema.Age)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property HireDate() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(AggregateTestSchema.HireDate)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Salary() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(AggregateTestSchema.Salary)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property IsActive() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(AggregateTestSchema.IsActive)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property IsActive2() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(AggregateTestSchema.IsActive2)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property DateCreated() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(AggregateTestSchema.DateCreated)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Ts() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(AggregateTestSchema.Ts)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

	End Class
	
	#End Region	

		Public ReadOnly Property ID() As AggregateParameter 
			Get
				If _ID_W Is Nothing Then
					_ID_W = TearOff.ID
				End If
				Return _ID_W
			End Get
		End Property

		Public ReadOnly Property DepartmentID() As AggregateParameter 
			Get
				If _DepartmentID_W Is Nothing Then
					_DepartmentID_W = TearOff.DepartmentID
				End If
				Return _DepartmentID_W
			End Get
		End Property

		Public ReadOnly Property FirstName() As AggregateParameter 
			Get
				If _FirstName_W Is Nothing Then
					_FirstName_W = TearOff.FirstName
				End If
				Return _FirstName_W
			End Get
		End Property

		Public ReadOnly Property LastName() As AggregateParameter 
			Get
				If _LastName_W Is Nothing Then
					_LastName_W = TearOff.LastName
				End If
				Return _LastName_W
			End Get
		End Property

		Public ReadOnly Property Age() As AggregateParameter 
			Get
				If _Age_W Is Nothing Then
					_Age_W = TearOff.Age
				End If
				Return _Age_W
			End Get
		End Property

		Public ReadOnly Property HireDate() As AggregateParameter 
			Get
				If _HireDate_W Is Nothing Then
					_HireDate_W = TearOff.HireDate
				End If
				Return _HireDate_W
			End Get
		End Property

		Public ReadOnly Property Salary() As AggregateParameter 
			Get
				If _Salary_W Is Nothing Then
					_Salary_W = TearOff.Salary
				End If
				Return _Salary_W
			End Get
		End Property

		Public ReadOnly Property IsActive() As AggregateParameter 
			Get
				If _IsActive_W Is Nothing Then
					_IsActive_W = TearOff.IsActive
				End If
				Return _IsActive_W
			End Get
		End Property

		Public ReadOnly Property IsActive2() As AggregateParameter 
			Get
				If _IsActive2_W Is Nothing Then
					_IsActive2_W = TearOff.IsActive2
				End If
				Return _IsActive2_W
			End Get
		End Property

		Public ReadOnly Property DateCreated() As AggregateParameter 
			Get
				If _DateCreated_W Is Nothing Then
					_DateCreated_W = TearOff.DateCreated
				End If
				Return _DateCreated_W
			End Get
		End Property

		Public ReadOnly Property Ts() As AggregateParameter 
			Get
				If _Ts_W Is Nothing Then
					_Ts_W = TearOff.Ts
				End If
				Return _Ts_W
			End Get
		End Property

		Private _ID_W As AggregateParameter = Nothing
		Private _DepartmentID_W As AggregateParameter = Nothing
		Private _FirstName_W As AggregateParameter = Nothing
		Private _LastName_W As AggregateParameter = Nothing
		Private _Age_W As AggregateParameter = Nothing
		Private _HireDate_W As AggregateParameter = Nothing
		Private _Salary_W As AggregateParameter = Nothing
		Private _IsActive_W As AggregateParameter = Nothing
		Private _IsActive2_W As AggregateParameter = Nothing
		Private _DateCreated_W As AggregateParameter = Nothing
		Private _Ts_W As AggregateParameter = Nothing

		Public Sub AggregateClauseReset()

		_ID_W = Nothing
		_DepartmentID_W = Nothing
		_FirstName_W = Nothing
		_LastName_W = Nothing
		_Age_W = Nothing
		_HireDate_W = Nothing
		_Salary_W = Nothing
		_IsActive_W = Nothing
		_IsActive2_W = Nothing
		_DateCreated_W = Nothing
		_Ts_W = Nothing
			Me._entity.Query.FlushAggregateParameters()

		End Sub
	
		Private _entity As EasyObject
		Private _tearOff As TearOffAggregateParameter
    End Class	

	Public ReadOnly Property Aggregate() As AggregateClause
		Get
			If _aggregateClause Is Nothing Then
				_aggregateClause = New AggregateClause(Me)
			End If
	
			Return _aggregateClause
		End Get
	End Property
	
	Private _aggregateClause As AggregateClause = Nothing	
#End Region	

End Class

End NameSpace


